{"version":3,"file":"FinalQuestionPage-NR70V6or.js","sources":["../../src/features/final-question/services/geminiRateLimit.ts","../../src/features/final-question/services/geminiPrompts.ts","../../src/features/final-question/services/geminiApiClient.ts","../../src/features/final-question/services/geminiParser.ts","../../src/features/final-question/services/geminiServiceNew.ts","../../src/features/final-question/hooks/useQuestionGeneration.ts","../../src/features/final-question/components/FinalQuestionCard/FinalQuestionCard.tsx","../../src/features/final-question/components/FinalQuestionModal/FinalQuestionModal.tsx","../../src/features/final-question/pages/FinalQuestionPage.tsx"],"sourcesContent":["/**\n * Gemini API Rate Limiting Service\n *\n * Focused service for handling API rate limiting and request throttling.\n * Provides intelligent rate limiting with real-time feedback and countdown\n * timers to ensure compliance with Google Gemini API limits.\n *\n * Features:\n * - Per-minute request counting (15 requests/minute)\n * - Minimum interval enforcement (4 seconds between requests)\n * - Real-time countdown feedback during waits\n * - Automatic window reset tracking\n * - User-friendly status messages\n *\n * @fileoverview Rate limiting service for Gemini API\n * @version 1.0.0\n * @since December 2025\n */\n\n/**\n * Rate limiting configuration constants\n * Following Google Gemini API free tier limits with safety margins\n */\nexport const RATE_LIMIT_CONFIG = {\n  /** Maximum requests allowed per minute */\n  MAX_REQUESTS_PER_MINUTE: 15,\n  /** Time window for rate limit tracking (1 minute) */\n  RATE_LIMIT_WINDOW: 60000,\n  /** Minimum time between requests (4 seconds for safety) */\n  MIN_REQUEST_INTERVAL: 4000,\n} as const;\n\n/**\n * Rate limiting information for external consumers\n * Provides comprehensive status about current API usage limits\n */\nexport interface RateLimitStatus {\n  /** Whether the current request would be rate limited */\n  isRateLimited: boolean;\n  /** Time to wait before next request (in seconds) */\n  retryAfter?: number;\n  /** User-friendly message explaining the rate limit status */\n  message?: string;\n  /** Number of requests remaining in current window */\n  requestsRemaining: number;\n  /** Time until rate limit window resets (in seconds) */\n  timeUntilReset: number;\n  /** Whether approaching rate limit threshold (warning state) */\n  isNearLimit: boolean;\n}\n\n/**\n * Internal tracking state for rate limiting\n * Maintains session state across multiple API calls\n */\nclass RateLimitTracker {\n  private lastRequestTime = 0;\n  private requestCount = 0;\n\n  /**\n   * Check if a new request would be rate limited\n   * Validates against both per-minute limits and minimum intervals\n   *\n   * @returns Complete rate limit status information\n   */\n  checkRateLimit(): RateLimitStatus {\n    const now = Date.now();\n\n    // Reset counter if window has passed\n    if (now - this.lastRequestTime > RATE_LIMIT_CONFIG.RATE_LIMIT_WINDOW) {\n      this.requestCount = 0;\n    }\n\n    const requestsRemaining = Math.max(\n      0,\n      RATE_LIMIT_CONFIG.MAX_REQUESTS_PER_MINUTE - this.requestCount\n    );\n\n    const timeUntilReset = Math.max(\n      0,\n      RATE_LIMIT_CONFIG.RATE_LIMIT_WINDOW - (now - this.lastRequestTime)\n    );\n\n    // Check if we're at the per-minute limit\n    if (this.requestCount >= RATE_LIMIT_CONFIG.MAX_REQUESTS_PER_MINUTE) {\n      const waitSeconds = Math.ceil(timeUntilReset / 1000);\n      return {\n        isRateLimited: true,\n        retryAfter: waitSeconds,\n        message: `Rate limit reached (${RATE_LIMIT_CONFIG.MAX_REQUESTS_PER_MINUTE}/minute). Please wait ${waitSeconds} seconds.`,\n        requestsRemaining: 0,\n        timeUntilReset: waitSeconds,\n        isNearLimit: true,\n      };\n    }\n\n    // Check if we need to wait between requests\n    const timeSinceLastRequest = now - this.lastRequestTime;\n    if (\n      timeSinceLastRequest < RATE_LIMIT_CONFIG.MIN_REQUEST_INTERVAL &&\n      this.requestCount > 0\n    ) {\n      const waitTime =\n        RATE_LIMIT_CONFIG.MIN_REQUEST_INTERVAL - timeSinceLastRequest;\n      const waitSeconds = Math.ceil(waitTime / 1000);\n      return {\n        isRateLimited: true,\n        retryAfter: waitSeconds,\n        message: `Please wait ${waitSeconds} seconds between requests to avoid rate limits.`,\n        requestsRemaining,\n        timeUntilReset: Math.ceil(timeUntilReset / 1000),\n        isNearLimit: requestsRemaining <= 3,\n      };\n    }\n\n    return {\n      isRateLimited: false,\n      requestsRemaining,\n      timeUntilReset: Math.ceil(timeUntilReset / 1000),\n      isNearLimit: requestsRemaining <= 3,\n    };\n  }\n\n  /**\n   * Record a successful request for rate limiting tracking\n   * Updates internal counters and timestamps\n   */\n  recordRequest(): void {\n    this.requestCount++;\n    this.lastRequestTime = Date.now();\n  }\n\n  /**\n   * Get current status for UI display without recording a request\n   * Useful for status indicators and warnings\n   *\n   * @returns Current rate limit status without side effects\n   */\n  getStatus(): RateLimitStatus {\n    return this.checkRateLimit();\n  }\n}\n\n/**\n * Singleton rate limit tracker instance\n * Maintains state across the entire application session\n */\nconst rateLimitTracker = new RateLimitTracker();\n\n/**\n * Wait for the specified number of seconds with optional progress callback\n *\n * @param seconds - Number of seconds to wait\n * @param onProgress - Optional callback called each second with countdown\n * @returns Promise that resolves after the specified time\n */\nexport const waitWithProgress = async (\n  seconds: number,\n  onProgress?: (secondsRemaining: number) => void\n): Promise<void> => {\n  for (let i = seconds; i > 0; i--) {\n    if (onProgress) {\n      onProgress(i);\n    }\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n  }\n};\n\n/**\n * Check if the next request would be rate limited\n * Primary interface for external consumers to check rate limit status\n *\n * @returns Complete rate limit status information\n */\nexport const checkRateLimit = (): RateLimitStatus => {\n  return rateLimitTracker.checkRateLimit();\n};\n\n/**\n * Record a successful API request for rate limiting purposes\n * Must be called after each successful API call\n */\nexport const recordRequest = (): void => {\n  rateLimitTracker.recordRequest();\n};\n\n/**\n * Get current rate limit status for UI display\n * Provides real-time information without recording a request\n *\n * @returns Current rate limiting status and timing information\n */\nexport const getRateLimitStatus = (): RateLimitStatus => {\n  return rateLimitTracker.getStatus();\n};\n\n/**\n * Handle rate limiting with user feedback\n * Comprehensive rate limit handling with real-time countdown feedback\n *\n * @param onStatusUpdate - Callback for status updates during waits\n * @returns Promise that resolves when safe to make request\n */\nexport const handleRateLimit = async (\n  onStatusUpdate?: (message: string, isWaiting: boolean) => void\n): Promise<void> => {\n  const status = checkRateLimit();\n\n  if (status.isRateLimited && status.retryAfter) {\n    if (onStatusUpdate) {\n      // Show countdown during wait with real-time updates\n      await waitWithProgress(status.retryAfter, (secondsRemaining) => {\n        onStatusUpdate(\n          `Please wait ${secondsRemaining} second${\n            secondsRemaining !== 1 ? \"s\" : \"\"\n          } before generating another question...`,\n          true\n        );\n      });\n\n      // Clear waiting status\n      onStatusUpdate(\"Generating your question...\", false);\n    } else {\n      // Silent wait if no callback provided\n      await new Promise((resolve) =>\n        setTimeout(resolve, status.retryAfter! * 1000)\n      );\n    }\n  }\n};\n","/**\n * Gemini AI Prompt Generation Service\n *\n * Focused service for creating comprehensive, context-aware prompts for\n * Google Gemini AI. Handles multilingual support, difficulty variations,\n * category-specific fact-checking, and session-based duplicate prevention.\n *\n * Features:\n * - Multilingual prompt generation (English, Bulgarian)\n * - Difficulty-based instruction customization\n * - Category-specific fact-checking (geography, history, science)\n * - Session history integration for duplicate prevention\n * - Bulgarian geography accuracy corrections\n * - Enhanced variability instructions\n *\n * @fileoverview Prompt generation service for Gemini AI\n * @version 1.0.0\n * @since December 2025\n */\n\nimport type { SessionQuestion } from \"../types\";\n\n/**\n * Parameters for prompt generation\n * Defines all configurable aspects of question generation\n */\nexport interface PromptGenerationParams {\n  /** Desired difficulty level (easy, medium, hard, random) */\n  difficulty: string;\n  /** Target language for the question and answer */\n  language: string;\n  /** Preferred category or topic (random if empty) */\n  category: string;\n  /** Array of previously generated questions to avoid duplicates */\n  previousQuestions: SessionQuestion[];\n}\n\n/**\n * Create a comprehensive prompt for Gemini AI with enhanced instructions\n *\n * Builds context-aware prompts that include user preferences, session history,\n * and category-specific fact-checking instructions to ensure high-quality,\n * accurate question generation.\n *\n * @param params - Complete prompt generation parameters\n * @returns Comprehensive prompt string optimized for Gemini AI\n */\nexport const createEnhancedGeminiPrompt = (\n  params: PromptGenerationParams\n): string => {\n  const { difficulty, language, category, previousQuestions } = params;\n\n  // Generate language-specific instructions\n  const languageInstruction = getLanguageInstruction(language);\n\n  // Generate category-specific instructions\n  const categoryInstruction = getCategoryInstruction(category);\n\n  // Generate difficulty-specific instructions\n  const difficultyInstruction = getDifficultyInstruction(difficulty);\n\n  // Generate session context to avoid duplicates\n  const previousQuestionsContext = getPreviousQuestionsContext(previousQuestions);\n\n  // Generate category-specific fact-checking instructions\n  const factCheckingInstruction = getFactCheckingInstruction(category);\n\n  return `You are an expert quiz master with access to accurate, up-to-date information. Generate a single quiz question and its answer.\n\n${languageInstruction}\n${categoryInstruction}\n${difficultyInstruction}\n${factCheckingInstruction}\n${previousQuestionsContext}\n\nCRITICAL REQUIREMENTS:\n- The answer must be 100% factually correct and verifiable\n- For geographic questions, double-check all facts (heights, locations, names)\n- Avoid controversial or ambiguous topics\n- Make the question engaging and educational\n- Ensure the question is unique and not repetitive\n\nIMPORTANT: Respond ONLY with a valid JSON object in this exact format:\n{\n  \"question\": \"Your generated question here\",\n  \"answer\": \"The correct answer here\", \n  \"category\": \"The category of the question\",\n  \"difficulty\": \"${difficulty}\"\n}\n\nDo not include any other text, explanations, or formatting outside the JSON object.`;\n};\n\n/**\n * Generate language-specific instructions for the AI\n *\n * Provides clear language requirements for question and answer generation.\n * Supports English and Bulgarian with proper character encoding.\n *\n * @param language - Target language for generation\n * @returns Language instruction string for the prompt\n */\nfunction getLanguageInstruction(language: string): string {\n  switch (language.toLowerCase()) {\n    case \"bulgarian\":\n    case \"bg\":\n      return \"Generate the question and answer in Bulgarian language. Use proper Bulgarian Cyrillic characters and grammar.\";\n    case \"english\":\n    case \"en\":\n    default:\n      return \"Generate the question and answer in English language.\";\n  }\n}\n\n/**\n * Generate category-specific instructions for the AI\n *\n * Provides topic guidance while maintaining flexibility for random generation.\n * Handles both specific categories and random topic selection.\n *\n * @param category - Preferred category or topic\n * @returns Category instruction string for the prompt\n */\nfunction getCategoryInstruction(category: string): string {\n  if (!category || category.toLowerCase() === \"random\") {\n    return \"Choose a random general knowledge topic from areas like geography, history, science, literature, arts, sports, or current events.\";\n  }\n\n  return `Generate a question about the category: ${category}. Stay focused on this topic while ensuring the question is interesting and educational.`;\n}\n\n/**\n * Generate difficulty-specific instructions with enhanced variability\n *\n * Provides detailed instructions about question complexity, knowledge\n * requirements, and reasoning depth for each difficulty level.\n *\n * @param difficulty - Target difficulty level\n * @returns Detailed difficulty instruction for AI prompt\n */\nfunction getDifficultyInstruction(difficulty: string): string {\n  switch (difficulty.toLowerCase()) {\n    case \"easy\":\n      return `Make this an EASY question that most people would know. Use basic, well-known facts that are:\n- Commonly taught in elementary or high school\n- Widely known in popular culture\n- Basic geographical locations (capitals, famous landmarks)\n- Simple historical events or dates\n- Fundamental scientific concepts`;\n\n    case \"hard\":\n      return `Make this a HARD question that requires specialized knowledge or expertise. Include:\n- Advanced technical or scientific concepts\n- Obscure historical details or lesser-known events\n- Specialized terminology or professional knowledge\n- Complex relationships between concepts\n- Details that require deep study or research to know`;\n\n    case \"medium\":\n    default:\n      return `Make this a MEDIUM difficulty question that requires some general knowledge and thinking. It should be:\n- Challenging but not impossible for an educated person\n- More than basic facts but not requiring specialized expertise\n- Encouraging critical thinking or making connections\n- Accessible to someone with good general knowledge\n- Engaging and educational without being frustrating`;\n  }\n}\n\n/**\n * Generate session context to prevent duplicate questions\n *\n * Creates context from previously generated questions to ensure variety\n * and prevent repetition within the same session.\n *\n * @param previousQuestions - Array of previously generated questions\n * @returns Context string with previous questions or empty string\n */\nfunction getPreviousQuestionsContext(previousQuestions: SessionQuestion[]): string {\n  if (previousQuestions.length === 0) {\n    return \"\";\n  }\n\n  // Use last 10 questions for context to avoid overly long prompts\n  const recentQuestions = previousQuestions.slice(-10);\n\n  return `\\n\\nIMPORTANT: Do NOT repeat any of these recently asked questions. Generate something completely different:\\n${recentQuestions\n    .map((q, i) => `${i + 1}. ${q.question}`)\n    .join(\"\\n\")}`;\n}\n\n/**\n * Generate category-specific fact-checking instructions\n *\n * Provides specialized fact-checking instructions based on the question\n * category to ensure accuracy and correct common AI misconceptions.\n *\n * @param category - Question category to generate instructions for\n * @returns Category-specific fact-checking instruction text\n */\nfunction getFactCheckingInstruction(category: string): string {\n  const lowerCategory = category.toLowerCase();\n\n  // Geographic fact-checking with Bulgarian geography corrections\n  if (\n    lowerCategory.includes(\"geography\") ||\n    lowerCategory.includes(\"смолян\") ||\n    lowerCategory.includes(\"bulgaria\") ||\n    lowerCategory.includes(\"mountain\") ||\n    lowerCategory.includes(\"peak\") ||\n    lowerCategory.includes(\"geographic\")\n  ) {\n    return `\\nFACT-CHECKING FOR GEOGRAPHY: \n- For Bulgarian geography: Verify all mountain peaks, heights, and locations\n- For Smolyan region: The highest peak near Smolyan is Perelik (2,191m), NOT Snezhanka\n- Snezhanka is near Pamporovo but is NOT the highest peak in the Smolyan area\n- Always verify geographical facts against reliable sources\n- Double-check all numerical data (heights, distances, populations)\n- Confirm current political boundaries and country names`;\n  }\n\n  // Historical fact-checking\n  if (lowerCategory.includes(\"history\") || lowerCategory.includes(\"historical\")) {\n    return `\\nFACT-CHECKING FOR HISTORY: \n- Verify all dates, names, and historical events\n- Ensure chronological accuracy and cause-effect relationships\n- Cross-reference multiple historical sources\n- Avoid disputed historical interpretations\n- Confirm spelling of historical figures and places`;\n  }\n\n  // Scientific fact-checking\n  if (\n    lowerCategory.includes(\"science\") ||\n    lowerCategory.includes(\"scientific\") ||\n    lowerCategory.includes(\"physics\") ||\n    lowerCategory.includes(\"chemistry\") ||\n    lowerCategory.includes(\"biology\")\n  ) {\n    return `\\nFACT-CHECKING FOR SCIENCE: \n- Verify all scientific facts, figures, and formulas\n- Ensure laws and theories are correctly stated\n- Use current scientific understanding and discoveries\n- Double-check units of measurement and calculations\n- Avoid outdated scientific information`;\n  }\n\n  // General fact-checking\n  return `\\nFACT-CHECKING: \n- Verify all facts before including them in the question\n- Use reliable, authoritative sources for verification\n- Avoid outdated, disputed, or controversial information\n- Double-check numerical data and proper names\n- Ensure information is current and accurate`;\n} ","/**\n * Gemini API Client Service\n *\n * Focused service for handling direct communication with Google Gemini API.\n * Provides secure, reliable API calls with comprehensive error handling,\n * automatic retries, and proper response validation.\n *\n * Features:\n * - Secure API key management and validation\n * - HTTP request/response handling with proper headers\n * - Automatic retry logic for transient failures\n * - Response validation and error parsing\n * - Network connectivity checks\n * - Development-safe API key logging\n *\n * @fileoverview API client for Google Gemini AI\n * @version 1.0.0\n * @since December 2025\n */\n\nimport type { FinalQuestion } from \"../types\";\n\n/**\n * Gemini API response structure\n * Represents the JSON format returned by Google Gemini API\n */\ninterface GeminiApiResponse {\n  candidates: Array<{\n    content: {\n      parts: Array<{\n        text: string;\n      }>;\n    };\n  }>;\n}\n\n/**\n * API request configuration for Gemini calls\n * Optimized settings for question generation with high variability\n */\ninterface GeminiRequestConfig {\n  /** The prompt text to send to the AI */\n  prompt: string;\n  /** Temperature for response variability (0.0-1.0) */\n  temperature?: number;\n  /** Top-K token selection parameter */\n  topK?: number;\n  /** Top-P probability mass parameter */\n  topP?: number;\n  /** Maximum output tokens allowed */\n  maxOutputTokens?: number;\n}\n\n/**\n * Default configuration for Gemini API requests\n * Optimized for maximum question variability and quality\n */\nconst DEFAULT_CONFIG: Required<Omit<GeminiRequestConfig, \"prompt\">> = {\n  temperature: 0.9, // High temperature for creative variability\n  topK: 40, // Balanced token selection\n  topP: 0.95, // High probability mass for diversity\n  maxOutputTokens: 1024, // Sufficient for comprehensive questions\n} as const;\n\n/**\n * Check if the Gemini API is available and ready to use\n *\n * Validates both API key availability and network connectivity.\n * Provides safe logging that doesn't expose API keys in production.\n *\n * @returns True if API key exists and device is online\n */\nexport const isGeminiAvailable = (): boolean => {\n  const apiKey = import.meta.env.VITE_GEMINI_API_KEY;\n  const isOnline = navigator.onLine;\n\n  // Only log once per session in development to avoid console spam\n  if (import.meta.env.DEV && !(window as any).__GEMINI_LOGGED) {\n    console.log(\"🔍 Gemini API Check:\", {\n      hasApiKey: !!apiKey,\n      apiKeyLength: apiKey?.length || 0,\n      isOnline,\n      apiKeyPreview: apiKey ? `${apiKey.substring(0, 10)}...` : \"NOT_SET\",\n    });\n    (window as any).__GEMINI_LOGGED = true;\n  }\n\n  return !!(apiKey && isOnline);\n};\n\n/**\n * Get the API key with proper validation\n *\n * Securely retrieves and validates the API key from environment variables.\n * Throws descriptive errors for missing or invalid keys.\n *\n * @returns Valid API key string\n * @throws Error if API key is missing or invalid\n */\nfunction getValidatedApiKey(): string {\n  const apiKey = import.meta.env.VITE_GEMINI_API_KEY;\n\n  if (!apiKey) {\n    throw new Error(\n      \"AI service is temporarily unavailable. Please try again later.\"\n    );\n  }\n\n  if (typeof apiKey !== \"string\" || apiKey.length < 20) {\n    throw new Error(\"Invalid API configuration. Please contact support.\");\n  }\n\n  return apiKey;\n}\n\n/**\n * Create the request body for Gemini API calls\n *\n * Builds the properly formatted request body with optimal configuration\n * for question generation tasks.\n *\n * @param config - Request configuration including prompt and parameters\n * @returns Complete request body object for API call\n */\nfunction createRequestBody(config: GeminiRequestConfig): object {\n  const {\n    prompt,\n    temperature = DEFAULT_CONFIG.temperature,\n    topK = DEFAULT_CONFIG.topK,\n    topP = DEFAULT_CONFIG.topP,\n    maxOutputTokens = DEFAULT_CONFIG.maxOutputTokens,\n  } = config;\n\n  return {\n    contents: [\n      {\n        parts: [\n          {\n            text: prompt,\n          },\n        ],\n      },\n    ],\n    generationConfig: {\n      temperature,\n      topK,\n      topP,\n      maxOutputTokens,\n    },\n  };\n}\n\n/**\n * Make a request to the Gemini API with error handling and retries\n *\n * Handles the complete API communication lifecycle including authentication,\n * request formatting, error handling, and response validation.\n *\n * @param config - Request configuration with prompt and optional parameters\n * @param onStatusUpdate - Optional callback for status updates during retries\n * @returns Promise resolving to the raw API response\n * @throws Error for API failures, network issues, or invalid responses\n */\nexport const callGeminiApi = async (\n  config: GeminiRequestConfig,\n  onStatusUpdate?: (message: string, isWaiting: boolean) => void\n): Promise<string> => {\n  // Validate prerequisites\n  if (!navigator.onLine) {\n    throw new Error(\"Internet connection required\");\n  }\n\n  const apiKey = getValidatedApiKey();\n\n  // Create properly formatted request\n  const requestBody = createRequestBody(config);\n\n  try {\n    if (onStatusUpdate) {\n      onStatusUpdate(\"Contacting AI service...\", false);\n    }\n\n    const response = await fetch(\n      `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${apiKey}`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(requestBody),\n      }\n    );\n\n    // Handle HTTP errors\n    if (!response.ok) {\n      await handleApiError(response, config, onStatusUpdate);\n    }\n\n    // Parse and validate response\n    const data: GeminiApiResponse = await response.json();\n\n    if (!data.candidates || data.candidates.length === 0) {\n      throw new Error(\"No response generated from AI service\");\n    }\n\n    const generatedText = data.candidates[0].content.parts[0].text;\n\n    if (!generatedText || typeof generatedText !== \"string\") {\n      throw new Error(\"Invalid response format from AI service\");\n    }\n\n    return generatedText;\n  } catch (error) {\n    console.error(\"Gemini API error:\", error);\n\n    if (error instanceof Error) {\n      throw error;\n    }\n\n    throw new Error(\"Failed to generate question. Please try again.\");\n  }\n};\n\n/**\n * Handle API errors with appropriate retry logic\n *\n * Processes different types of API errors and implements retry strategies\n * for transient failures like rate limiting.\n *\n * @param response - Failed HTTP response\n * @param config - Original request configuration for retries\n * @param onStatusUpdate - Optional callback for status updates\n * @throws Error for non-retryable failures or after exhausting retries\n */\nasync function handleApiError(\n  response: Response,\n  config: GeminiRequestConfig,\n  onStatusUpdate?: (message: string, isWaiting: boolean) => void\n): Promise<never> {\n  let errorData: any = {};\n\n  try {\n    errorData = await response.json();\n  } catch {\n    // Ignore JSON parsing errors for error responses\n  }\n\n  // Handle rate limiting from Google's side\n  if (response.status === 429) {\n    const waitTime = 4; // Conservative wait time\n\n    if (onStatusUpdate) {\n      onStatusUpdate(\n        `API rate limit reached. Waiting ${waitTime} seconds before retrying...`,\n        true\n      );\n\n      // Wait with feedback\n      for (let i = waitTime; i > 0; i--) {\n        onStatusUpdate(\n          `API rate limit reached. Retrying in ${i} second${\n            i !== 1 ? \"s\" : \"\"\n          }...`,\n          true\n        );\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n      }\n\n      onStatusUpdate(\"Retrying your request...\", false);\n    } else {\n      await new Promise((resolve) => setTimeout(resolve, waitTime * 1000));\n    }\n\n    // Retry the request once\n    return callGeminiApi(config, onStatusUpdate);\n  }\n\n  // Handle other API errors\n  const errorMessage = errorData.error?.message || \"Unknown API error\";\n\n  switch (response.status) {\n    case 400:\n      throw new Error(`Invalid request: ${errorMessage}`);\n    case 401:\n      throw new Error(\"API key is invalid or expired\");\n    case 403:\n      throw new Error(\"API access forbidden - check your API key permissions\");\n    case 404:\n      throw new Error(\"AI service endpoint not found\");\n    case 500:\n    case 502:\n    case 503:\n    case 504:\n      throw new Error(\n        \"AI service is temporarily unavailable. Please try again.\"\n      );\n    default:\n      throw new Error(`API error (${response.status}): ${errorMessage}`);\n  }\n}\n","/**\n * Gemini Response Parser Service\n *\n * Focused service for parsing and validating responses from Google Gemini AI.\n * Provides robust JSON parsing, data validation, and fallback mechanisms\n * to ensure reliable question generation even with malformed responses.\n *\n * Features:\n * - Safe JSON extraction from AI responses\n * - Comprehensive data validation\n * - Graceful fallback for parsing failures\n * - Type-safe question object creation\n * - Detailed error logging for debugging\n *\n * @fileoverview Response parsing service for Gemini AI\n * @version 1.0.0\n * @since December 2025\n */\n\nimport type { FinalQuestion } from \"../types\";\n\n/**\n * Raw question data extracted from AI response\n * Represents the basic structure expected from Gemini AI\n */\ninterface ParsedQuestionData {\n  question: string;\n  answer: string;\n  category: string;\n  difficulty: string;\n}\n\n/**\n * Validation result for parsed question data\n * Provides detailed feedback about data quality and completeness\n */\ninterface ValidationResult {\n  isValid: boolean;\n  errors: string[];\n  warnings: string[];\n}\n\n/**\n * Parse Gemini AI response and extract question data\n *\n * Safely parses JSON from AI response text and extracts structured question\n * data with comprehensive error handling and fallback mechanisms.\n *\n * @param responseText - Raw text response from Gemini API\n * @returns Complete FinalQuestion object with unique ID\n * @throws Error if parsing fails and fallback cannot be applied\n */\nexport const parseGeminiResponse = (responseText: string): FinalQuestion => {\n  try {\n    // Extract and validate the raw question data\n    const parsedData = extractQuestionData(responseText);\n\n    // Validate the extracted data\n    const validation = validateQuestionData(parsedData);\n\n    if (!validation.isValid) {\n      console.warn(\"Question data validation failed:\", validation.errors);\n      // Use fallback for invalid data\n      return createFallbackQuestion();\n    }\n\n    // Log any warnings for development\n    if (validation.warnings.length > 0 && import.meta.env.DEV) {\n      console.warn(\"Question data warnings:\", validation.warnings);\n    }\n\n    // Create complete question object\n    return createFinalQuestion(parsedData);\n  } catch (error) {\n    console.error(\"Failed to parse Gemini response:\", {\n      error: error instanceof Error ? error.message : \"Unknown error\",\n      responseText: responseText.substring(0, 200) + \"...\", // Log first 200 chars\n    });\n\n    // Return fallback question for any parsing failure\n    return createFallbackQuestion();\n  }\n};\n\n/**\n * Extract JSON question data from AI response text\n *\n * Performs robust JSON extraction with multiple fallback strategies\n * to handle various response formats from the AI.\n *\n * @param responseText - Raw response text to parse\n * @returns Extracted question data object\n * @throws Error if no valid JSON can be extracted\n */\nfunction extractQuestionData(responseText: string): ParsedQuestionData {\n  // Clean the response text\n  const cleanedText = responseText.trim();\n\n  if (!cleanedText) {\n    throw new Error(\"Empty response text\");\n  }\n\n  // Strategy 1: Try to parse the entire response as JSON\n  try {\n    const parsed = JSON.parse(cleanedText);\n    if (isQuestionDataObject(parsed)) {\n      return parsed;\n    }\n  } catch {\n    // Continue to next strategy\n  }\n\n  // Strategy 2: Extract JSON from response text using regex\n  const jsonMatch = cleanedText.match(/\\{[\\s\\S]*\\}/);\n  if (jsonMatch) {\n    try {\n      const parsed = JSON.parse(jsonMatch[0]);\n      if (isQuestionDataObject(parsed)) {\n        return parsed;\n      }\n    } catch {\n      // Continue to next strategy\n    }\n  }\n\n  // Strategy 3: Look for JSON-like structure with more flexible regex\n  const flexibleJsonMatch = cleanedText.match(/\\{[^}]*\"question\"[^}]*\\}/s);\n  if (flexibleJsonMatch) {\n    try {\n      const parsed = JSON.parse(flexibleJsonMatch[0]);\n      if (isQuestionDataObject(parsed)) {\n        return parsed;\n      }\n    } catch {\n      // Continue to error\n    }\n  }\n\n  throw new Error(\"No valid JSON structure found in response\");\n}\n\n/**\n * Type guard to check if an object has the expected question data structure\n *\n * @param obj - Object to validate\n * @returns True if object has required question properties\n */\nfunction isQuestionDataObject(obj: any): obj is ParsedQuestionData {\n  return (\n    obj &&\n    typeof obj === \"object\" &&\n    typeof obj.question === \"string\" &&\n    typeof obj.answer === \"string\"\n  );\n}\n\n/**\n * Validate extracted question data for completeness and quality\n *\n * Performs comprehensive validation of question data including content\n * quality checks and structural validation.\n *\n * @param data - Parsed question data to validate\n * @returns Detailed validation result with errors and warnings\n */\nfunction validateQuestionData(data: ParsedQuestionData): ValidationResult {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n\n  // Required field validation\n  if (!data.question || data.question.trim().length < 10) {\n    errors.push(\"Question text is missing or too short\");\n  }\n\n  if (!data.answer || data.answer.trim().length < 1) {\n    errors.push(\"Answer text is missing\");\n  }\n\n  // Content quality checks\n  if (data.question && data.question.length > 500) {\n    warnings.push(\"Question is unusually long\");\n  }\n\n  if (data.answer && data.answer.length > 200) {\n    warnings.push(\"Answer is unusually long\");\n  }\n\n  // Category validation\n  if (!data.category || data.category.trim().length === 0) {\n    warnings.push(\"Category is missing, will use default\");\n  }\n\n  // Difficulty validation\n  const validDifficulties = [\"easy\", \"medium\", \"hard\"];\n  if (\n    !data.difficulty ||\n    !validDifficulties.includes(data.difficulty.toLowerCase())\n  ) {\n    warnings.push(\"Invalid difficulty, will use default\");\n  }\n\n  // Check for common formatting issues\n  if (data.question && !data.question.trim().endsWith(\"?\")) {\n    warnings.push(\"Question does not end with a question mark\");\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n    warnings,\n  };\n}\n\n/**\n * Create a complete FinalQuestion object from validated data\n *\n * Transforms parsed and validated data into the final question object\n * with proper defaults and unique identification.\n *\n * @param data - Validated question data\n * @returns Complete FinalQuestion object\n */\nfunction createFinalQuestion(data: ParsedQuestionData): FinalQuestion {\n  // Normalize and clean the data\n  const question = data.question.trim();\n  const answer = data.answer.trim();\n  const category = data.category?.trim() || \"General Knowledge\";\n  const difficulty = normalizeDifficulty(data.difficulty);\n\n  return {\n    id: generateQuestionId(),\n    question,\n    answer,\n    category,\n    difficulty,\n  };\n}\n\n/**\n * Normalize difficulty value to ensure consistency\n *\n * @param difficulty - Raw difficulty value from AI\n * @returns Normalized difficulty level\n */\nfunction normalizeDifficulty(difficulty: string): \"easy\" | \"medium\" | \"hard\" {\n  const normalized = difficulty?.toLowerCase().trim();\n\n  switch (normalized) {\n    case \"easy\":\n    case \"simple\":\n    case \"beginner\":\n      return \"easy\";\n    case \"hard\":\n    case \"difficult\":\n    case \"expert\":\n    case \"advanced\":\n      return \"hard\";\n    case \"medium\":\n    case \"moderate\":\n    case \"intermediate\":\n    default:\n      return \"medium\";\n  }\n}\n\n/**\n * Generate a unique ID for a question\n *\n * Creates a random alphanumeric identifier for question tracking.\n *\n * @returns Unique question identifier\n */\nfunction generateQuestionId(): string {\n  return Math.random().toString(36).substring(2, 9);\n}\n\n/**\n * Create a fallback question for when parsing fails\n *\n * Provides a reliable fallback question to ensure the application\n * continues functioning even when AI responses are malformed.\n *\n * @returns Basic fallback question object\n */\nfunction createFallbackQuestion(): FinalQuestion {\n  const fallbackQuestions = [\n    {\n      question: \"What is the capital of France?\",\n      answer: \"Paris\",\n      category: \"Geography\",\n      difficulty: \"easy\" as const,\n    },\n    {\n      question: \"Who wrote the play 'Romeo and Juliet'?\",\n      answer: \"William Shakespeare\",\n      category: \"Literature\",\n      difficulty: \"easy\" as const,\n    },\n    {\n      question: \"What is the largest planet in our solar system?\",\n      answer: \"Jupiter\",\n      category: \"Science\",\n      difficulty: \"easy\" as const,\n    },\n  ];\n\n  // Select a random fallback question\n  const randomIndex = Math.floor(Math.random() * fallbackQuestions.length);\n  const selectedFallback = fallbackQuestions[randomIndex];\n\n  return {\n    id: generateQuestionId(),\n    ...selectedFallback,\n  };\n}\n","/**\n * Gemini AI Service - Refactored Composition Service\n *\n * REFACTORED: This service now composes smaller, focused modules following\n * the Single Responsibility Principle. The original monolithic 528-line\n * service has been split into:\n * - geminiRateLimit: Rate limiting and request throttling\n * - geminiPrompts: Prompt generation and enhancement\n * - geminiApiClient: API communication and error handling\n * - geminiParser: Response parsing and validation\n *\n * This service maintains backward compatibility while providing a cleaner,\n * more maintainable architecture.\n *\n * Original Features Preserved:\n * - Multilingual support (English, Bulgarian)\n * - Difficulty and category control\n * - Session-based duplicate prevention\n * - Geographic fact-checking for accuracy\n * - Intelligent rate limiting with user feedback\n * - Real-time countdown timers during waits\n * - Comprehensive error handling and retries\n *\n * @fileoverview Refactored composition service for Gemini AI\n * @version 3.0.0 (Refactored)\n * @since December 2025\n */\n\nimport type { FinalQuestion, GeminiQuestionParams } from \"../types\";\nimport { \n  checkRateLimit, \n  recordRequest, \n  handleRateLimit, \n  getRateLimitStatus \n} from \"./geminiRateLimit\";\nimport { createEnhancedGeminiPrompt } from \"./geminiPrompts\";\nimport { callGeminiApi, isGeminiAvailable } from \"./geminiApiClient\";\nimport { parseGeminiResponse } from \"./geminiParser\";\n\n/**\n * Generate a question using Google Gemini AI with comprehensive features\n *\n * Main function for generating AI-powered questions with all advanced features:\n * - Rate limiting with real-time countdown feedback\n * - Session-based duplicate prevention\n * - Enhanced prompts with fact-checking\n * - Geographic accuracy corrections\n * - Multilingual support\n * - Robust error handling and retries\n *\n * This function composes the focused services to provide a unified interface\n * for question generation while maintaining backward compatibility.\n *\n * @param params - Question generation parameters including difficulty, language, category, and session history\n * @param onStatusUpdate - Optional callback for real-time status updates during generation\n * @returns Promise resolving to a complete FinalQuestion object\n * @throws Error if API key missing, network unavailable, or generation fails\n */\nexport const generateQuestionWithGemini = async (\n  params: GeminiQuestionParams = {} as GeminiQuestionParams,\n  onStatusUpdate?: (message: string, isWaiting: boolean) => void\n): Promise<FinalQuestion> => {\n  try {\n    // Handle rate limiting with user feedback\n    await handleRateLimit(onStatusUpdate);\n\n    // Generate comprehensive prompt using focused prompt service\n    const prompt = createEnhancedGeminiPrompt({\n      difficulty: params.difficulty || \"medium\",\n      language: params.language || \"English\",\n      category: params.category || \"random\",\n      previousQuestions: params.previousQuestions || [],\n    });\n\n    // Make API call using focused API client\n    const responseText = await callGeminiApi(\n      { prompt },\n      onStatusUpdate\n    );\n\n    // Record successful request for rate limiting\n    recordRequest();\n\n    // Parse response using focused parser service\n    const question = parseGeminiResponse(responseText);\n\n    return question;\n  } catch (error) {\n    console.error(\"Question generation error:\", error);\n\n    if (error instanceof Error) {\n      throw error;\n    }\n\n    throw new Error(\"Failed to generate question. Please try again.\");\n  }\n};\n\n/**\n * Check if the Gemini AI service is available and ready to use\n *\n * Validates both API key availability and network connectivity.\n * Uses the focused API client for consistent availability checking.\n *\n * @returns True if API key exists and device is online\n */\nexport { isGeminiAvailable };\n\n/**\n * Get current rate limit status for UI display\n *\n * Provides real-time information about API usage for user interface.\n * Uses the focused rate limiting service for consistent status reporting.\n *\n * @returns Object with current rate limiting status and timing information\n */\nexport { getRateLimitStatus };\n\n/**\n * Legacy compatibility exports\n * Maintains backward compatibility with existing code\n */\nexport {\n  checkRateLimit,\n  recordRequest,\n  handleRateLimit,\n} from \"./geminiRateLimit\";\n\nexport {\n  createEnhancedGeminiPrompt,\n} from \"./geminiPrompts\";\n\nexport {\n  callGeminiApi,\n} from \"./geminiApiClient\";\n\nexport {\n  parseGeminiResponse,\n} from \"./geminiParser\"; ","/**\n * useQuestionGeneration Hook\n *\n * Custom hook for managing final question generation using Google Gemini API.\n * Handles question generation, online/offline detection, error states, and rate limiting.\n *\n * Responsibilities:\n * - Manage question state\n * - Handle Gemini API integration with rate limiting\n * - Provide online/offline detection\n * - Manage loading states, waiting states, and error handling\n * - Show user-friendly status messages during rate limiting\n */\n\nimport { useState, useEffect } from \"react\";\nimport type {\n  FinalQuestion,\n  QuestionGenerationSettings,\n  RateLimitInfo,\n  SessionQuestion,\n} from \"../types\";\nimport {\n  generateQuestionWithGemini,\n  isGeminiAvailable,\n  getRateLimitStatus,\n} from \"../services/geminiServiceNew\";\n\n/**\n * Return type interface for the useQuestionGeneration hook\n *\n * Provides all state values and control functions needed by components\n * to manage question generation and display.\n */\ninterface QuestionGenerationHook {\n  /** Currently generated question (null if none generated) */\n  question: FinalQuestion | null;\n  /** Whether a question is being generated */\n  isLoading: boolean;\n  /** Whether waiting due to rate limiting */\n  isWaiting: boolean;\n  /** Current status message for user feedback */\n  statusMessage: string;\n  /** Current error message (null if no error) */\n  error: string | null;\n  /** Whether the device is online and can reach AI service */\n  isOnline: boolean;\n  /** Whether the question modal is currently open */\n  isModalOpen: boolean;\n  /** Current rate limiting information from AI service */\n  rateLimitInfo: RateLimitInfo;\n  /** Number of questions generated in current session */\n  sessionQuestionCount: number;\n  /** Function to control modal visibility */\n  setIsModalOpen: (isOpen: boolean) => void;\n  /** Function to generate a new question */\n  generateNewQuestion: () => Promise<void>;\n  /** Function to refresh the current question */\n  refreshQuestion: () => Promise<void>;\n  /** Current question generation settings */\n  settings: QuestionGenerationSettings;\n  /** Function to update generation settings */\n  updateSettings: (newSettings: Partial<QuestionGenerationSettings>) => void;\n  /** Function to clear all settings */\n  clearSettings: () => void;\n}\n\n/**\n * useQuestionGeneration Hook\n *\n * Manages the state and logic for generating final questions using Gemini AI.\n * Includes intelligent rate limiting and user feedback.\n *\n * @returns Object containing question state and control functions\n */\nexport const useQuestionGeneration = (): QuestionGenerationHook => {\n  const [question, setQuestion] = useState<FinalQuestion | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isWaiting, setIsWaiting] = useState(false);\n  const [statusMessage, setStatusMessage] = useState(\"\");\n  const [error, setError] = useState<string | null>(null);\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [rateLimitInfo, setRateLimitInfo] = useState({\n    requestsRemaining: 15,\n    timeUntilReset: 0,\n    isNearLimit: false,\n  });\n  // User settings for question generation\n  const [settings, setSettings] = useState<QuestionGenerationSettings>({\n    difficulty: \"\",\n    language: \"\",\n    category: \"\",\n  });\n\n  // Session-based question history to prevent duplicates (max 20 questions)\n  const [sessionQuestions, setSessionQuestions] = useState<SessionQuestion[]>(\n    []\n  );\n\n  // Monitor online/offline status\n  useEffect(() => {\n    const handleOnline = () => setIsOnline(true);\n    const handleOffline = () => setIsOnline(false);\n\n    window.addEventListener(\"online\", handleOnline);\n    window.addEventListener(\"offline\", handleOffline);\n\n    return () => {\n      window.removeEventListener(\"online\", handleOnline);\n      window.removeEventListener(\"offline\", handleOffline);\n    };\n  }, []);\n\n  // Update rate limit info periodically\n  useEffect(() => {\n    const updateRateLimitInfo = () => {\n      setRateLimitInfo(getRateLimitStatus());\n    };\n\n    updateRateLimitInfo();\n    const interval = setInterval(updateRateLimitInfo, 1000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // Clear session history when modal is closed\n  useEffect(() => {\n    if (!isModalOpen) {\n      // Clear session history when modal is closed to free memory\n      setSessionQuestions([]);\n    }\n  }, [isModalOpen]);\n\n  /**\n   * Status update callback for the Gemini API service\n   * Handles real-time feedback during question generation including countdown timers\n   */\n  const handleStatusUpdate = (message: string, waiting: boolean) => {\n    setStatusMessage(message);\n    setIsWaiting(waiting);\n    if (!waiting) {\n      setIsLoading(true);\n    }\n  };\n\n  /**\n   * Generates a new question using the Gemini AI service\n   * Validates prerequisites and handles the complete generation flow\n   */\n  const generateNewQuestion = async () => {\n    if (!isOnline) {\n      setError(\"Internet connection required to generate questions\");\n      return;\n    }\n\n    const geminiAvailable = isGeminiAvailable();\n    if (!geminiAvailable) {\n      setError(\"AI service is not available. Please check your connection.\");\n      return;\n    }\n\n    setIsLoading(true);\n    setIsWaiting(false);\n    setError(null);\n    setStatusMessage(\"Preparing to generate question...\");\n\n    try {\n      // Prepare parameters for Gemini API with session history\n      const params = {\n        difficulty: settings.difficulty || \"medium\",\n        language: settings.language || \"English\",\n        category: settings.category || \"random\",\n        previousQuestions: sessionQuestions, // Pass session history to avoid duplicates\n      };\n\n      const newQuestion = await generateQuestionWithGemini(\n        params,\n        handleStatusUpdate\n      );\n      setQuestion(newQuestion);\n      setStatusMessage(\"Question generated successfully!\");\n\n      // Add to session history (keep max 20 questions)\n      setSessionQuestions((prev) => {\n        const updated = [\n          ...prev,\n          { question: newQuestion.question, answer: newQuestion.answer },\n        ];\n        return updated.slice(-20); // Keep only last 20 questions\n      });\n\n      // Clear status message after a short delay\n      setTimeout(() => {\n        setStatusMessage(\"\");\n      }, 2000);\n    } catch (err) {\n      const errorMessage =\n        err instanceof Error ? err.message : \"Failed to generate question\";\n      setError(errorMessage);\n      setStatusMessage(\"\");\n      console.error(\"Question generation error:\", err);\n    } finally {\n      setIsLoading(false);\n      setIsWaiting(false);\n    }\n  };\n\n  /**\n   * Refreshes the current question with a new one\n   * Uses existing question settings or generates a new one if none exists\n   */\n  const refreshQuestion = async () => {\n    if (!question) {\n      await generateNewQuestion();\n      return;\n    }\n\n    if (!isOnline) {\n      setError(\"Internet connection required to refresh questions\");\n      return;\n    }\n\n    setIsLoading(true);\n    setIsWaiting(false);\n    setError(null);\n    setStatusMessage(\"Refreshing question...\");\n\n    try {\n      // Use the same settings as the current question with session history\n      const params = {\n        difficulty: settings.difficulty || question.difficulty || \"medium\",\n        language: settings.language || \"English\",\n        category: settings.category || question.category || \"random\",\n        previousQuestions: sessionQuestions, // Pass session history to avoid duplicates\n      };\n\n      const newQuestion = await generateQuestionWithGemini(\n        params,\n        handleStatusUpdate\n      );\n      setQuestion(newQuestion);\n      setStatusMessage(\"Question refreshed successfully!\");\n\n      // Add to session history (keep max 20 questions)\n      setSessionQuestions((prev) => {\n        const updated = [\n          ...prev,\n          { question: newQuestion.question, answer: newQuestion.answer },\n        ];\n        return updated.slice(-20); // Keep only last 20 questions\n      });\n\n      // Clear status message after a short delay\n      setTimeout(() => {\n        setStatusMessage(\"\");\n      }, 2000);\n    } catch (err) {\n      const errorMessage =\n        err instanceof Error ? err.message : \"Failed to refresh question\";\n      setError(errorMessage);\n      setStatusMessage(\"\");\n      console.error(\"Question refresh error:\", err);\n    } finally {\n      setIsLoading(false);\n      setIsWaiting(false);\n    }\n  };\n\n  /**\n   * Updates question generation settings with new values\n   * Merges new settings with existing ones and clears any previous errors\n   */\n  const updateSettings = (newSettings: Partial<QuestionGenerationSettings>) => {\n    setSettings((prev) => ({ ...prev, ...newSettings }));\n    // Clear any previous errors when settings change\n    setError(null);\n  };\n\n  /**\n   * Clears all question generation settings and resets state\n   * Also clears session history, errors, and status messages\n   */\n  const clearSettings = () => {\n    setSettings({\n      difficulty: \"\",\n      language: \"\",\n      category: \"\",\n    });\n    setError(null);\n    setStatusMessage(\"\");\n    // Clear session history when settings are cleared\n    setSessionQuestions([]);\n  };\n\n  return {\n    question,\n    isLoading,\n    isWaiting,\n    statusMessage,\n    error,\n    isOnline,\n    isModalOpen,\n    rateLimitInfo,\n    sessionQuestionCount: sessionQuestions.length,\n    setIsModalOpen,\n    generateNewQuestion,\n    refreshQuestion,\n    settings,\n    updateSettings,\n    clearSettings,\n  };\n};\n","/**\n * FinalQuestionCard Component\n *\n * A focused component for displaying a single final question card.\n * Shows question text, answer, and optional metadata with hover effects.\n *\n * Responsibilities:\n * - Display question and answer\n * - Provide hover animations\n * - Handle responsive layout\n * - Show metadata (category, difficulty)\n */\n\nimport { Box, Typography, Chip } from \"@mui/material\";\nimport type { FinalQuestionCardProps } from \"../../types\";\n\n/**\n * FinalQuestionCard Component\n *\n * Renders a single final question card with question text, answer,\n * and optional metadata. Provides hover effects and responsive design.\n *\n * @param props - Component props\n * @returns JSX element for the final question card\n */\nexport const FinalQuestionCard = ({\n  question,\n  isRefreshing = false,\n}: FinalQuestionCardProps) => {\n  return (\n    <Box\n      sx={{\n        p: 2,\n        bgcolor: \"background.default\",\n        borderRadius: 2,\n        boxShadow: (theme) => theme.shadows[2],\n        opacity: isRefreshing ? 0.5 : 1,\n        transform: isRefreshing ? \"scale(0.98)\" : \"scale(1)\",\n        transition: \"all 0.3s ease-in-out\",\n        \"&:hover\": {\n          boxShadow: (theme) => theme.shadows[4],\n          transform: isRefreshing ? \"scale(0.98)\" : \"translateY(-2px)\",\n        },\n      }}\n    >\n      {/* Question Text */}\n      <Typography\n        variant=\"h6\"\n        fontWeight={600}\n        color=\"primary.main\"\n        sx={{\n          mb: 2,\n          display: \"flex\",\n          alignItems: \"center\",\n          gap: 0.5,\n        }}\n      >\n        ❓ {question.question}\n      </Typography>\n\n      {/* Answer */}\n      <Box\n        sx={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          gap: 1,\n          mb: 2,\n        }}\n      >\n        <Typography\n          variant=\"subtitle2\"\n          color=\"text.secondary\"\n          sx={{ fontWeight: 500 }}\n        >\n          Answer:\n        </Typography>\n        <Typography\n          variant=\"body1\"\n          color=\"text.primary\"\n          sx={{\n            fontSize: \"1rem\",\n            lineHeight: 1.5,\n          }}\n        >\n          {question.answer}\n        </Typography>\n      </Box>\n\n      {/* Metadata Chips */}\n      <Box\n        sx={{\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          gap: 1,\n          mt: 2,\n        }}\n      >\n        {question.category && (\n          <Chip\n            label={question.category}\n            size=\"small\"\n            color=\"primary\"\n            variant=\"outlined\"\n          />\n        )}\n        {question.difficulty && (\n          <Chip\n            label={question.difficulty}\n            size=\"small\"\n            color={\n              question.difficulty === \"easy\"\n                ? \"success\"\n                : question.difficulty === \"medium\"\n                ? \"warning\"\n                : \"error\"\n            }\n            variant=\"outlined\"\n          />\n        )}\n      </Box>\n    </Box>\n  );\n};\n","/**\n * FinalQuestionModal Component\n *\n * Container component for displaying a final question in a modal dialog.\n * Handles the modal layout, question display, and action buttons.\n *\n * Responsibilities:\n * - Display question in a responsive layout\n * - Handle modal open/close state\n * - Coordinate question actions (refresh, copy)\n * - Provide proper modal accessibility\n */\n\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  Box,\n  Typography,\n  IconButton,\n  Tooltip,\n} from \"@mui/material\";\nimport RefreshIcon from \"@mui/icons-material/Refresh\";\nimport ContentCopyIcon from \"@mui/icons-material/ContentCopy\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport { FinalQuestionCard } from \"../FinalQuestionCard/FinalQuestionCard\";\nimport type { FinalQuestionModalProps } from \"../../types\";\n\n/**\n * FinalQuestionModal Component\n *\n * Renders a modal dialog containing the final question card\n * and action buttons for refreshing and copying.\n *\n * @param props - Component props\n * @returns JSX element for the final question modal\n */\nexport const FinalQuestionModal = ({\n  open,\n  question,\n  isRefreshing,\n  isGenerating,\n  onClose,\n  onRefresh,\n  onCopy,\n}: FinalQuestionModalProps) => {\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      maxWidth=\"sm\"\n      fullWidth\n      aria-labelledby=\"final-question-modal-title\"\n      disableRestoreFocus\n      PaperProps={{\n        sx: {\n          borderRadius: 2,\n          maxHeight: \"90vh\",\n        },\n      }}\n    >\n      {/* Modal Header */}\n      <DialogTitle\n        id=\"final-question-modal-title\"\n        sx={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n          pb: 1,\n        }}\n      >\n        <Typography variant=\"h6\" component=\"div\">\n          Final Question\n        </Typography>\n        <Box sx={{ display: \"flex\", gap: 1 }}>\n          {/* Refresh Button */}\n          <Tooltip title=\"Generate new question\">\n            <span>\n              <IconButton\n                onClick={onRefresh}\n                disabled={isGenerating || isRefreshing}\n                size=\"small\"\n                aria-label=\"Generate new question\"\n              >\n                <RefreshIcon />\n              </IconButton>\n            </span>\n          </Tooltip>\n\n          {/* Copy Button */}\n          <Tooltip title=\"Copy question\">\n            <span>\n              <IconButton\n                onClick={onCopy}\n                disabled={!question}\n                size=\"small\"\n                aria-label=\"Copy question\"\n              >\n                <ContentCopyIcon />\n              </IconButton>\n            </span>\n          </Tooltip>\n\n          {/* Close Button */}\n          <Tooltip title=\"Close\">\n            <IconButton onClick={onClose} size=\"small\" aria-label=\"Close modal\">\n              <CloseIcon />\n            </IconButton>\n          </Tooltip>\n        </Box>\n      </DialogTitle>\n\n      {/* Modal Content */}\n      <DialogContent id=\"final-question-modal-content\" sx={{ pt: 1 }}>\n        {question ? (\n          <Box\n            sx={{\n              opacity: isRefreshing ? 0.5 : 1,\n              transform: isRefreshing ? \"scale(0.98)\" : \"scale(1)\",\n              transition: \"all 0.3s ease-in-out\",\n            }}\n          >\n            <FinalQuestionCard\n              question={question}\n              isRefreshing={isRefreshing}\n            />\n          </Box>\n        ) : (\n          <Box\n            sx={{\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              minHeight: 200,\n              textAlign: \"center\",\n            }}\n          >\n            <Typography variant=\"body1\" color=\"text.secondary\">\n              No question generated yet.\n            </Typography>\n          </Box>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n};\n ","/**\n * FinalQuestionPage Component\n *\n * Main page component for the Final Question feature.\n * Orchestrates all components and hooks to provide the complete functionality.\n *\n * Responsibilities:\n * - Coordinate between all feature components\n * - Manage overall page layout and structure\n * - Handle integration between hooks and components\n * - Provide snackbar feedback for user actions\n */\n\nimport {\n  Box,\n  Container,\n  Typography,\n  Button,\n  Stack,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  TextField,\n  IconButton,\n  Tooltip,\n  Paper,\n  Alert,\n  Chip,\n  LinearProgress,\n  Collapse,\n} from \"@mui/material\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport WifiOffIcon from \"@mui/icons-material/WifiOff\";\nimport WifiIcon from \"@mui/icons-material/Wifi\";\nimport HourglassEmptyIcon from \"@mui/icons-material/HourglassEmpty\";\nimport { useQuestionGeneration } from \"../hooks\";\n\nimport { FinalQuestionModal } from \"../components\";\nimport { useSnackbar } from \"../../../shared/hooks/useSnackbar\";\n\n/**\n * Final Question Page Component\n * Displays the final question interface with settings and AI-powered question generation\n */\nconst FinalQuestionPage = () => {\n  const {\n    question,\n    isLoading,\n    isWaiting,\n    statusMessage,\n    error,\n    isOnline,\n    isModalOpen,\n    rateLimitInfo,\n    sessionQuestionCount,\n    setIsModalOpen,\n    generateNewQuestion,\n    refreshQuestion,\n    settings,\n    updateSettings,\n    clearSettings,\n  } = useQuestionGeneration();\n\n  const { showSnackbar } = useSnackbar();\n\n  /**\n   * Handles the generation of a new final question\n   * Validates online status, generates question via hook, and opens modal\n   */\n  const handleGenerateQuestion = async () => {\n    if (!isOnline) {\n      showSnackbar(\n        \"Internet connection required to generate questions\",\n        \"error\"\n      );\n      return;\n    }\n\n    try {\n      await generateNewQuestion();\n      // Open modal immediately after successful generation\n      setIsModalOpen(true);\n    } catch (err) {\n      console.error(\"Error generating question:\", err);\n      showSnackbar(\n        err instanceof Error ? err.message : \"Failed to generate question\",\n        \"error\"\n      );\n    }\n  };\n\n  /**\n   * Handles refreshing the current question with a new one\n   * Validates online status and refreshes via hook\n   */\n  const handleRefreshQuestion = async () => {\n    if (!isOnline) {\n      showSnackbar(\n        \"Internet connection required to refresh questions\",\n        \"error\"\n      );\n      return;\n    }\n\n    try {\n      await refreshQuestion();\n    } catch (err) {\n      showSnackbar(\n        err instanceof Error ? err.message : \"Failed to refresh question\",\n        \"error\"\n      );\n    }\n  };\n\n  /**\n   * Clears all question generation settings and provides user feedback\n   */\n  const handleClearAll = () => {\n    clearSettings();\n    showSnackbar(\"Settings cleared\", \"info\");\n  };\n\n  /**\n   * Get dynamic button text based on current application state\n   * Provides clear feedback to users about what's happening\n   */\n  const getButtonText = () => {\n    if (isWaiting) return \"Please Wait...\";\n    if (isLoading) return \"Generating with AI...\";\n    if (!isOnline) return \"Internet Required\";\n    return \"Generate Final Question\";\n  };\n\n  return (\n    <Container maxWidth=\"md\">\n      <Box py={4}>\n        <Typography variant=\"h4\" component=\"h1\" gutterBottom align=\"center\">\n          Final Question\n        </Typography>\n\n        {/* Combined Connection Status and Rate Limit */}\n        <Box\n          display=\"flex\"\n          justifyContent=\"center\"\n          gap={1}\n          mb={2}\n          flexWrap=\"wrap\"\n        >\n          <Chip\n            icon={isOnline ? <WifiIcon /> : <WifiOffIcon />}\n            label={\n              isOnline\n                ? `Online - AI Ready | ${rateLimitInfo.requestsRemaining}/15 RPM`\n                : \"Offline - Internet Required\"\n            }\n            color={\n              isOnline\n                ? rateLimitInfo.isNearLimit\n                  ? \"warning\"\n                  : \"success\"\n                : \"error\"\n            }\n            variant=\"outlined\"\n          />\n          {sessionQuestionCount > 0 && (\n            <Chip\n              label={`Session: ${sessionQuestionCount} question${\n                sessionQuestionCount !== 1 ? \"s\" : \"\"\n              }`}\n              color=\"info\"\n              variant=\"outlined\"\n              size=\"small\"\n            />\n          )}\n        </Box>\n\n        {/* Status Message */}\n        <Collapse in={!!statusMessage}>\n          <Alert\n            severity={isWaiting ? \"info\" : \"success\"}\n            sx={{ mb: 2 }}\n            icon={isWaiting ? <HourglassEmptyIcon /> : undefined}\n          >\n            {statusMessage}\n          </Alert>\n        </Collapse>\n\n        {/* Loading Progress */}\n        {(isLoading || isWaiting) && (\n          <Box sx={{ mb: 2 }}>\n            <LinearProgress\n              variant={isWaiting ? \"indeterminate\" : \"query\"}\n              color={isWaiting ? \"warning\" : \"primary\"}\n            />\n          </Box>\n        )}\n\n        {/* Error Alert */}\n        {error && (\n          <Alert severity=\"error\" sx={{ mb: 3 }}>\n            {error}\n          </Alert>\n        )}\n\n        {/* Offline Warning */}\n        {!isOnline && (\n          <Alert severity=\"warning\" sx={{ mb: 3 }}>\n            Internet connection is required to generate questions using AI.\n            Please check your connection and try again.\n          </Alert>\n        )}\n\n        {/* Rate Limit Warning */}\n        {rateLimitInfo.isNearLimit && isOnline && (\n          <Alert severity=\"warning\" sx={{ mb: 3 }}>\n            You're approaching the rate limit ({rateLimitInfo.requestsRemaining}{\" \"}\n            requests remaining).\n            {rateLimitInfo.timeUntilReset > 0 &&\n              ` Limit resets in ${Math.floor(\n                rateLimitInfo.timeUntilReset / 60\n              )}:${(rateLimitInfo.timeUntilReset % 60)\n                .toString()\n                .padStart(2, \"0\")}.`}\n          </Alert>\n        )}\n\n        {/* Single Card with Settings and Generate Button */}\n        <Paper\n          elevation={2}\n          sx={{\n            p: 3,\n            borderRadius: 2,\n            maxWidth: 600,\n            mx: \"auto\",\n            opacity: isWaiting ? 0.8 : 1,\n            transition: \"opacity 0.3s ease\",\n          }}\n        >\n          {/* Settings Header */}\n          <Box\n            sx={{\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"space-between\",\n              mb: 3,\n            }}\n          >\n            <Typography variant=\"h6\" component=\"h2\">\n              AI Question Settings\n            </Typography>\n            <Tooltip title=\"Clear all settings\">\n              <IconButton\n                onClick={handleClearAll}\n                color=\"error\"\n                size=\"small\"\n                aria-label=\"Clear all settings\"\n                disabled={isLoading || isWaiting}\n              >\n                <DeleteIcon />\n              </IconButton>\n            </Tooltip>\n          </Box>\n\n          <Stack spacing={3}>\n            {/* Difficulty Selection */}\n            <FormControl fullWidth disabled={isLoading || isWaiting}>\n              <InputLabel id=\"difficulty-label\">Difficulty</InputLabel>\n              <Select\n                labelId=\"difficulty-label\"\n                value={settings.difficulty || \"\"}\n                label=\"Difficulty\"\n                onChange={(e) => updateSettings({ difficulty: e.target.value })}\n              >\n                <MenuItem value=\"\">Random</MenuItem>\n                <MenuItem value=\"easy\">Easy</MenuItem>\n                <MenuItem value=\"medium\">Medium</MenuItem>\n                <MenuItem value=\"hard\">Hard</MenuItem>\n              </Select>\n            </FormControl>\n\n            {/* Language Selection */}\n            <FormControl fullWidth disabled={isLoading || isWaiting}>\n              <InputLabel id=\"language-label\">Language</InputLabel>\n              <Select\n                labelId=\"language-label\"\n                value={settings.language || \"\"}\n                label=\"Language\"\n                onChange={(e) => updateSettings({ language: e.target.value })}\n              >\n                <MenuItem value=\"\">English (Default)</MenuItem>\n                <MenuItem value=\"English\">English</MenuItem>\n                <MenuItem value=\"Bulgarian\">Bulgarian</MenuItem>\n              </Select>\n            </FormControl>\n\n            {/* Category Input */}\n            <TextField\n              fullWidth\n              label=\"Category (optional)\"\n              placeholder=\"e.g., Science, History, Sports...\"\n              value={settings.category || \"\"}\n              onChange={(e) => updateSettings({ category: e.target.value })}\n              helperText=\"Leave empty for random category\"\n              disabled={isLoading || isWaiting}\n            />\n\n            {/* Generate Button */}\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={handleGenerateQuestion}\n              disabled={isLoading || isWaiting || !isOnline}\n              fullWidth\n              size=\"large\"\n              sx={{\n                py: 1.5,\n                fontSize: \"1.1rem\",\n                fontWeight: 600,\n                mt: 2,\n              }}\n            >\n              {getButtonText()}\n            </Button>\n\n            {/* AI Info */}\n            <Typography\n              variant=\"caption\"\n              color=\"text.secondary\"\n              align=\"center\"\n              sx={{ mt: 1 }}\n            >\n              Powered by Google Gemini AI • Supports English & Bulgarian\n              {isOnline && (\n                <>\n                  <br />\n                  Rate limit: 15 requests/minute • Smart duplicate prevention\n                </>\n              )}\n            </Typography>\n          </Stack>\n        </Paper>\n\n        {/* Modal */}\n        <FinalQuestionModal\n          open={isModalOpen}\n          onClose={() => setIsModalOpen(false)}\n          question={question}\n          isRefreshing={isLoading}\n          isGenerating={isLoading}\n          onRefresh={handleRefreshQuestion}\n          onCopy={() => {\n            if (question) {\n              navigator.clipboard.writeText(\n                `Q: ${question.question}\\nA: ${question.answer}`\n              );\n              showSnackbar(\"Question copied to clipboard!\", \"success\");\n            }\n          }}\n        />\n      </Box>\n    </Container>\n  );\n};\n\nexport default FinalQuestionPage;\n"],"names":["RATE_LIMIT_CONFIG","RateLimitTracker","__publicField","now","requestsRemaining","timeUntilReset","waitSeconds","timeSinceLastRequest","waitTime","rateLimitTracker","waitWithProgress","seconds","onProgress","i","resolve","checkRateLimit","recordRequest","getRateLimitStatus","handleRateLimit","onStatusUpdate","status","secondsRemaining","createEnhancedGeminiPrompt","params","difficulty","language","category","previousQuestions","languageInstruction","getLanguageInstruction","categoryInstruction","getCategoryInstruction","difficultyInstruction","getDifficultyInstruction","previousQuestionsContext","getPreviousQuestionsContext","factCheckingInstruction","getFactCheckingInstruction","q","lowerCategory","DEFAULT_CONFIG","isGeminiAvailable","getValidatedApiKey","apiKey","createRequestBody","config","prompt","temperature","topK","topP","maxOutputTokens","callGeminiApi","requestBody","response","handleApiError","data","generatedText","error","errorData","errorMessage","_a","parseGeminiResponse","responseText","parsedData","extractQuestionData","validation","validateQuestionData","createFinalQuestion","createFallbackQuestion","cleanedText","parsed","isQuestionDataObject","jsonMatch","flexibleJsonMatch","obj","errors","warnings","validDifficulties","question","answer","normalizeDifficulty","generateQuestionId","fallbackQuestions","randomIndex","selectedFallback","generateQuestionWithGemini","useQuestionGeneration","setQuestion","useState","isLoading","setIsLoading","isWaiting","setIsWaiting","statusMessage","setStatusMessage","setError","isOnline","setIsOnline","isModalOpen","setIsModalOpen","rateLimitInfo","setRateLimitInfo","settings","setSettings","sessionQuestions","setSessionQuestions","useEffect","handleOnline","handleOffline","updateRateLimitInfo","interval","handleStatusUpdate","message","waiting","generateNewQuestion","newQuestion","prev","err","refreshQuestion","updateSettings","newSettings","clearSettings","FinalQuestionCard","isRefreshing","jsxs","Box","theme","Typography","jsx","Chip","FinalQuestionModal","open","isGenerating","onClose","onRefresh","onCopy","Dialog","DialogTitle","Tooltip","IconButton","RefreshIcon","ContentCopyIcon","CloseIcon","DialogContent","FinalQuestionPage","sessionQuestionCount","showSnackbar","useSnackbar","handleGenerateQuestion","handleRefreshQuestion","handleClearAll","getButtonText","Container","WifiIcon","WifiOffIcon","Collapse","Alert","HourglassEmptyIcon","LinearProgress","Paper","DeleteIcon","Stack","FormControl","InputLabel","Select","e","MenuItem","TextField","Button","Fragment"],"mappings":"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"}