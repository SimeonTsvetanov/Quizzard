{"version":3,"file":"PointsCounter-DA8r1sFD.js","sources":["../../src/features/points-counter/types/index.ts","../../src/features/points-counter/utils/gameUtils.ts","../../src/features/points-counter/hooks/useGameState.ts","../../src/features/points-counter/hooks/useGamePersistence.ts","../../src/features/points-counter/hooks/useGameActions.ts","../../src/features/points-counter/hooks/usePointsCounter.ts","../../src/features/points-counter/components/TeamSetup/hooks/useTeamSetupForm.ts","../../src/features/points-counter/components/TeamSetup/components/TeamInputs.tsx","../../src/features/points-counter/components/TeamSetup/components/GameSettings.tsx","../../src/features/points-counter/components/TeamSetup/components/ActionButtons.tsx","../../src/features/points-counter/components/TeamSetup/components/ClearDataDialog.tsx","../../src/features/points-counter/components/TeamSetup/TeamSetup.tsx","../../src/features/points-counter/components/RoundNavigation/RoundNavigation.tsx","../../src/features/points-counter/components/TeamCard/TeamCard.tsx","../../src/features/points-counter/components/GameScreen/GameActionButtons.tsx","../../src/features/points-counter/components/Leaderboard/Leaderboard.tsx","../../src/features/points-counter/components/GameScreen/LeaderboardModal.tsx","../../src/features/points-counter/components/GameScreen/EndGameConfirmDialog.tsx","../../src/features/points-counter/components/GameScreen/GameScreen.tsx","../../src/features/points-counter/pages/PointsCounter.tsx"],"sourcesContent":["/**\n * TypeScript Type Definitions for Points Counter Feature\n * \n * Defines all interfaces and types used throughout the Points Counter\n * for quiz scoring, team management, and game state persistence.\n * \n * @fileoverview Points Counter type definitions and interfaces\n * @version 1.0.0\n * @since December 2025\n */\n\n/**\n * Represents a single team participating in the quiz\n */\nexport interface Team {\n  /** Unique identifier for the team */\n  id: string;\n  /** Display name of the team (editable by user) */\n  name: string;\n  /** Total accumulated points across all rounds */\n  totalScore: number;\n  /** Points scored in each round (indexed by round number) */\n  roundScores: Record<number, number>;\n  /** Color theme for team identification (optional) */\n  color?: string;\n}\n\n/**\n * Represents a single round in the quiz\n */\nexport interface Round {\n  /** Round number (1-based indexing) */\n  number: number;\n  /** Optional round title/description */\n  title?: string;\n  /** Whether this round has been completed */\n  completed: boolean;\n  /** Points awarded to each team in this round */\n  teamScores: Record<string, number>; // teamId -> score\n}\n\n/**\n * Complete game state for the Points Counter\n */\nexport interface GameState {\n  /** Array of all teams in the game */\n  teams: Team[];\n  /** Array of all rounds in the game */\n  rounds: Round[];\n  /** Currently active round number */\n  currentRound: number;\n  /** Total number of rounds planned */\n  totalRounds: number;\n  /** Whether the game is in setup mode or active play */\n  gameMode: 'setup' | 'playing' | 'finished';\n  /** Game creation timestamp */\n  createdAt: number;\n  /** Last update timestamp */\n  updatedAt: number;\n}\n\n/**\n * Props interface for team scoring cards\n */\nexport interface TeamCardProps {\n  /** Team data to display */\n  team: Team;\n  /** Current round number for score input */\n  currentRound: number;\n  /** Callback when team score is updated */\n  onScoreUpdate: (teamId: string, roundScore: number) => void;\n  /** Whether the card is in edit mode */\n  editMode?: boolean;\n}\n\n/**\n * Props interface for the leaderboard component\n */\nexport interface LeaderboardProps {\n  /** Array of teams sorted by score */\n  teams: Team[];\n  /** Whether to show detailed round breakdown */\n  showDetails?: boolean;\n  /** Current round number for context */\n  currentRound: number;\n}\n\n/**\n * Props interface for round navigation\n */\nexport interface RoundNavigationProps {\n  /** Current active round */\n  currentRound: number;\n  /** Total number of rounds */\n  totalRounds: number;\n  /** Callback when round is changed */\n  onRoundChange: (round: number) => void;\n  /** Whether navigation is disabled */\n  disabled?: boolean;\n}\n\n/**\n * Configuration options for team setup\n */\nexport interface TeamSetupConfig {\n  /** Number of teams to create */\n  teamCount: number;\n  /** Whether to use random funny team names */\n  useRandomNames: boolean;\n  /** Custom team names provided by user */\n  customNames?: string[];\n}\n\n/**\n * Leaderboard entry for ranking display\n */\nexport interface LeaderboardEntry {\n  /** Ranking position (1st, 2nd, 3rd, etc.) */\n  position: number;\n  /** Team data */\n  team: Team;\n  /** Points difference from first place */\n  pointsFromFirst: number;\n  /** Whether this is the current leader */\n  isLeader: boolean;\n}\n\n/**\n * Export format options for leaderboard sharing\n */\nexport type ExportFormat = 'text' | 'json' | 'csv';\n\n/**\n * Game action types for state management\n */\nexport type GameAction = \n  | { type: 'SET_TEAMS'; payload: Team[] }\n  | { type: 'UPDATE_TEAM_SCORE'; payload: { teamId: string; round: number; score: number } }\n  | { type: 'SET_CURRENT_ROUND'; payload: number }\n  | { type: 'ADD_ROUND'; payload: Round }\n  | { type: 'RESET_GAME' }\n  | { type: 'SET_GAME_MODE'; payload: GameState['gameMode'] }\n  | { type: 'UPDATE_TEAM_NAME'; payload: { teamId: string; name: string } };\n\n/**\n * Default team names pool for random selection\n */\nexport const FUNNY_TEAM_NAMES = [\n  \"Quiz Khalifa\", \"The Mighty Morphin Flower Arrangers\", \"Agatha Quiztie\", \n  \"Les Quizerables\", \"The Questionables\", \"Trivia Newton John\", \"Quiz Team Aguilera\",\n  \"50 Shades of Quiz\", \"Game of Phones\", \"The Quizzards of Oz\", \"Quiz Me Maybe\",\n  \"The Brainy Bunch\", \"Smarty Pints\", \"The Think Tank\", \"Quiz and Tell\",\n  \"The Answer is 42\", \"Ctrl+Alt+Defeat\", \"The WiFi Seekers\", \"404 Team Not Found\",\n  \"The Googleheads\", \"Byte Me\", \"The Neural Network\", \"Artificial Stupidity\",\n  \"The Data Miners\", \"Cloud Nine\", \"The Debugging Ducks\", \"Syntax Errors\",\n  \"The Recursive Rebels\", \"Boolean Operators\", \"Stack Overflow Heroes\"\n] as const;\n\n/**\n * Game configuration constants\n */\nexport const GAME_CONSTANTS = {\n  /** Minimum number of teams allowed */\n  MIN_TEAMS: 1,\n  /** Maximum number of teams allowed */\n  MAX_TEAMS: 20,\n  /** Default number of teams */\n  DEFAULT_TEAMS: 4,\n  /** Default number of rounds */\n  DEFAULT_ROUNDS: 5,\n  /** Maximum score allowed per round */\n  MAX_ROUND_SCORE: 999.99,\n  /** Minimum score allowed per round */\n  MIN_ROUND_SCORE: -999.99,\n  /** Minimum score that can be entered */\n  MIN_SCORE: -999,\n  /** Maximum score that can be entered */\n  MAX_SCORE: 999,\n  /** Maximum decimal places for scores */\n  SCORE_DECIMAL_PLACES: 2,\n} as const; ","/**\n * Points Counter Game Utilities\n *\n * Core utility functions for managing quiz games, team generation,\n * scoring calculations, and leaderboard operations.\n *\n * @fileoverview Game management utilities for Points Counter\n * @version 1.0.0\n * @since December 2025\n */\n\nimport type { Team, GameState, Round, LeaderboardEntry } from \"../types\";\nimport { FUNNY_TEAM_NAMES, GAME_CONSTANTS } from \"../types\";\n\n/**\n * Generates a random selection of team names from the funny names pool\n * Ensures no duplicate names are selected\n *\n * @param count - Number of team names to generate\n * @returns Array of unique funny team names\n */\nexport const generateRandomTeamNames = (count: number): string[] => {\n  const availableNames = [...FUNNY_TEAM_NAMES];\n  const selectedNames: string[] = [];\n\n  // Ensure we don't request more names than available\n  const nameCount = Math.min(count, availableNames.length);\n\n  for (let i = 0; i < nameCount; i++) {\n    const randomIndex = Math.floor(Math.random() * availableNames.length);\n    const selectedName = availableNames.splice(randomIndex, 1)[0];\n    selectedNames.push(selectedName);\n  }\n\n  // If we need more names than available, generate generic ones\n  if (count > availableNames.length) {\n    for (let i = selectedNames.length; i < count; i++) {\n      selectedNames.push(`Team ${i + 1}`);\n    }\n  }\n\n  return selectedNames;\n};\n\n/**\n * Creates initial teams with random names or custom names\n *\n * @param teamCount - Number of teams to create\n * @param customNames - Optional array of custom team names\n * @returns Array of initialized teams\n */\nexport const createInitialTeams = (\n  teamCount: number,\n  customNames?: string[]\n): Team[] => {\n  const names =\n    customNames && customNames.length >= teamCount\n      ? customNames.slice(0, teamCount)\n      : generateRandomTeamNames(teamCount);\n\n  return names.map((name, index) => ({\n    id: `team-${Date.now()}-${index}`, // Unique ID with timestamp\n    name: name.trim() || `Team ${index + 1}`, // Fallback if name is empty\n    totalScore: 0,\n    roundScores: {},\n  }));\n};\n\n/**\n * Calculates total score for a team across all rounds with decimal precision\n *\n * @param team - Team to calculate score for\n * @returns Total accumulated score with proper decimal handling\n */\nexport const calculateTeamTotalScore = (team: Team): number => {\n  const total = Object.values(team.roundScores).reduce(\n    (total, score) => total + score,\n    0\n  );\n  // Round to avoid floating point precision issues\n  return roundScore(total);\n};\n\n/**\n * Updates a team's score for a specific round and recalculates total\n *\n * @param team - Team to update\n * @param round - Round number\n * @param score - Score to set for the round\n * @returns Updated team object\n */\nexport const updateTeamScore = (\n  team: Team,\n  round: number,\n  score: number\n): Team => {\n  const updatedTeam = {\n    ...team,\n    roundScores: {\n      ...team.roundScores,\n      [round]: score,\n    },\n  };\n\n  // Recalculate total score\n  updatedTeam.totalScore = calculateTeamTotalScore(updatedTeam);\n\n  return updatedTeam;\n};\n\n/**\n * Sorts teams by total score (descending) for leaderboard display\n *\n * @param teams - Array of teams to sort\n * @returns Array of teams sorted by score (highest first)\n */\nexport const sortTeamsByScore = (teams: Team[]): Team[] => {\n  return [...teams].sort((a, b) => b.totalScore - a.totalScore);\n};\n\n/**\n * Creates leaderboard entries with rankings and point differences\n *\n * @param teams - Array of teams to rank\n * @returns Array of leaderboard entries with positions\n */\nexport const createLeaderboard = (teams: Team[]): LeaderboardEntry[] => {\n  const sortedTeams = sortTeamsByScore(teams);\n  const topScore = sortedTeams[0]?.totalScore || 0;\n\n  return sortedTeams.map((team, index) => ({\n    position: index + 1,\n    team,\n    pointsFromFirst: topScore - team.totalScore,\n    isLeader: index === 0,\n  }));\n};\n\n/**\n * Formats leaderboard for clipboard sharing with nice formatting\n *\n * @param leaderboard - Leaderboard entries to format\n * @param roundNumber - Current round number for context\n * @returns Formatted text string for sharing\n */\nexport const formatLeaderboardForSharing = (\n  leaderboard: LeaderboardEntry[],\n  roundNumber: number\n): string => {\n  const timestamp = new Date().toLocaleString();\n  let formatted = `🏆 QUIZ LEADERBOARD - Round ${roundNumber}\\n`;\n  formatted += `Generated: ${timestamp}\\n\\n`;\n\n  leaderboard.forEach((entry) => {\n    const { position, team } = entry;\n    let positionEmoji = \"\";\n\n    // Add emojis for top 3 positions\n    if (position === 1) positionEmoji = \"🥇\";\n    else if (position === 2) positionEmoji = \"🥈\";\n    else if (position === 3) positionEmoji = \"🥉\";\n    else positionEmoji = `${position}.`;\n\n    formatted += `${positionEmoji} ${team.name}: ${team.totalScore} points\\n`;\n  });\n\n  formatted += `\\n📊 Generated by Quizzard Points Counter`;\n  return formatted;\n};\n\n/**\n * Validates if a score input is valid\n *\n * @param score - Score value to validate\n * @returns Boolean indicating if score is valid\n */\nexport const isValidScore = (score: number): boolean => {\n  return (\n    !isNaN(score) &&\n    score >= GAME_CONSTANTS.MIN_SCORE &&\n    score <= GAME_CONSTANTS.MAX_SCORE\n  );\n};\n\n/**\n * Rounds score to allowed decimal places\n *\n * @param score - Score to round\n * @returns Rounded score value\n */\nexport const roundScore = (score: number): number => {\n  return (\n    Math.round(score * Math.pow(10, GAME_CONSTANTS.SCORE_DECIMAL_PLACES)) /\n    Math.pow(10, GAME_CONSTANTS.SCORE_DECIMAL_PLACES)\n  );\n};\n\n/**\n * Formats score for display with optimal decimal handling\n *\n * Shows whole numbers without decimals (e.g., \"5\") and decimal numbers\n * with up to 2 decimal places (e.g., \"5.25\")\n *\n * @param score - Numeric score value to format\n * @returns Formatted string representation\n */\nexport const formatScore = (score: number): string => {\n  return score % 1 === 0 ? score.toString() : score.toFixed(2);\n};\n\n/**\n * Creates a new round object\n *\n * @param roundNumber - Round number to create\n * @param teamIds - Array of team IDs to initialize scores for\n * @returns New round object\n */\nexport const createNewRound = (\n  roundNumber: number,\n  teamIds: string[]\n): Round => {\n  const teamScores: Record<string, number> = {};\n  teamIds.forEach((teamId) => {\n    teamScores[teamId] = 0;\n  });\n\n  return {\n    number: roundNumber,\n    completed: false,\n    teamScores,\n  };\n};\n\n/**\n * Creates initial game state with teams and first round\n *\n * @param teams - Initial teams for the game\n * @param totalRounds - Total number of rounds planned\n * @returns Initial game state object\n */\nexport const createInitialGameState = (\n  teams: Team[],\n  totalRounds: number = GAME_CONSTANTS.DEFAULT_ROUNDS\n): GameState => {\n  const teamIds = teams.map((team) => team.id);\n  const firstRound = createNewRound(1, teamIds);\n\n  return {\n    teams,\n    rounds: [firstRound],\n    currentRound: 1,\n    totalRounds,\n    gameMode: \"setup\",\n    createdAt: Date.now(),\n    updatedAt: Date.now(),\n  };\n};\n\n/**\n * Updates game state with new score for a team in a specific round\n *\n * @param gameState - Current game state\n * @param teamId - ID of team to update\n * @param round - Round number\n * @param score - New score value\n * @returns Updated game state\n */\nexport const updateGameScore = (\n  gameState: GameState,\n  teamId: string,\n  round: number,\n  score: number\n): GameState => {\n  // Validate score\n  const validatedScore = isValidScore(score) ? roundScore(score) : 0;\n\n  // Update teams array\n  const updatedTeams = gameState.teams.map((team) =>\n    team.id === teamId ? updateTeamScore(team, round, validatedScore) : team\n  );\n\n  // Update rounds array\n  const updatedRounds = gameState.rounds.map((r) =>\n    r.number === round\n      ? { ...r, teamScores: { ...r.teamScores, [teamId]: validatedScore } }\n      : r\n  );\n\n  return {\n    ...gameState,\n    teams: updatedTeams,\n    rounds: updatedRounds,\n    updatedAt: Date.now(),\n  };\n};\n\n/**\n * Copies formatted text to clipboard\n *\n * @param text - Text to copy to clipboard\n * @returns Promise resolving to success boolean\n */\nexport const copyToClipboard = async (text: string): Promise<boolean> => {\n  try {\n    if (navigator.clipboard && window.isSecureContext) {\n      await navigator.clipboard.writeText(text);\n      return true;\n    } else {\n      // Fallback for older browsers or non-secure contexts\n      const textArea = document.createElement(\"textarea\");\n      textArea.value = text;\n      textArea.style.position = \"fixed\";\n      textArea.style.left = \"-999999px\";\n      textArea.style.top = \"-999999px\";\n      document.body.appendChild(textArea);\n      textArea.focus();\n      textArea.select();\n      const result = document.execCommand(\"copy\");\n      document.body.removeChild(textArea);\n      return result;\n    }\n  } catch (error) {\n    console.error(\"Failed to copy to clipboard:\", error);\n    return false;\n  }\n};\n","/**\n * Game State Management Hook\n *\n * Focused hook that manages the core state of the Points Counter game.\n * Extracted from the monolithic usePointsCounter hook to improve maintainability\n * and follow Single Responsibility Principle.\n *\n * Responsibilities:\n * - Game status management (ON/OFF)\n * - Teams state management\n * - Rounds configuration\n * - UI state (loading, errors)\n * - Current round navigation\n *\n * @fileoverview Core state management for Points Counter\n * @version 1.0.0\n * @since December 2025\n */\n\nimport { useState, useCallback, useMemo } from \"react\";\nimport type { Team } from \"../types\";\nimport { GAME_CONSTANTS } from \"../types\";\nimport { createLeaderboard } from \"../utils/gameUtils\";\n\n/**\n * Game Status Types\n */\ntype GameStatus = \"ON\" | \"OFF\";\n\n/**\n * Game State Interface\n */\nexport interface GameState {\n  gameStatus: GameStatus;\n  teams: Team[];\n  rounds: number;\n  currentRound: number;\n  isLoading: boolean;\n  error: string | null;\n}\n\n/**\n * Game State Actions Interface\n */\nexport interface GameStateActions {\n  setGameStatus: (status: GameStatus) => void;\n  setTeams: React.Dispatch<React.SetStateAction<Team[]>>;\n  setRounds: (rounds: number) => void;\n  setCurrentRound: (round: number) => void;\n  setIsLoading: (loading: boolean) => void;\n  setError: (error: string | null) => void;\n  clearError: () => void;\n  resetToInitialState: () => void;\n  initializeState: (\n    gameStatus: GameStatus,\n    teams: Team[],\n    rounds: number,\n    currentRound: number\n  ) => void;\n}\n\n/**\n * Return interface for useGameState hook\n */\nexport interface UseGameStateReturn {\n  state: GameState;\n  actions: GameStateActions;\n  derived: {\n    leaderboard: ReturnType<typeof createLeaderboard>;\n  };\n}\n\n/**\n * Game State Management Hook\n *\n * Manages the core state variables for the Points Counter game.\n * Provides actions for state updates and derived data calculations.\n *\n * @returns Object containing state, actions, and derived data\n */\nexport const useGameState = (): UseGameStateReturn => {\n  // === PRIMARY STATE ===\n  const [gameStatus, setGameStatus] = useState<GameStatus>(\"OFF\");\n  const [teams, setTeams] = useState<Team[]>([]);\n  const [rounds, setRounds] = useState<number>(GAME_CONSTANTS.DEFAULT_ROUNDS);\n  const [currentRound, setCurrentRound] = useState(1);\n\n  // === UI STATE ===\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  /**\n   * Clear current error message\n   */\n  const clearError = useCallback(() => {\n    setError(null);\n  }, []);\n\n  /**\n   * Reset all state to initial values\n   */\n  const resetToInitialState = useCallback(() => {\n    setGameStatus(\"OFF\");\n    setTeams([]);\n    setRounds(GAME_CONSTANTS.DEFAULT_ROUNDS);\n    setCurrentRound(1);\n    setIsLoading(false);\n    setError(null);\n  }, []);\n\n  /**\n   * Initialize state with provided values (for persistence restoration)\n   */\n  const initializeState = useCallback(\n    (\n      gameStatus: GameStatus,\n      teams: Team[],\n      rounds: number,\n      currentRound: number\n    ) => {\n      setGameStatus(gameStatus);\n      setTeams(teams);\n      setRounds(rounds);\n      setCurrentRound(currentRound);\n      setError(null);\n    },\n    []\n  );\n\n  // === DERIVED DATA ===\n  // Memoize leaderboard calculation to prevent unnecessary recalculations\n  const leaderboard = useMemo(() => {\n    return createLeaderboard(teams);\n  }, [teams]);\n\n  return {\n    state: {\n      gameStatus,\n      teams,\n      rounds,\n      currentRound,\n      isLoading,\n      error,\n    },\n    actions: {\n      setGameStatus,\n      setTeams,\n      setRounds,\n      setCurrentRound,\n      setIsLoading,\n      setError,\n      clearError,\n      resetToInitialState,\n      initializeState,\n    },\n    derived: {\n      leaderboard,\n    },\n  };\n};\n","/**\n * Game Persistence Hook\n *\n * Focused hook that manages localStorage persistence for the Points Counter game.\n * Extracted from the monolithic usePointsCounter hook to improve maintainability\n * and follow Single Responsibility Principle.\n *\n * Responsibilities:\n * - Loading persisted game state from localStorage\n * - Saving game state to localStorage\n * - Auto-save with debouncing (500ms)\n * - Data validation and error handling\n * - Migration support for legacy keys\n *\n * @fileoverview Persistence management for Points Counter\n * @version 1.0.0\n * @since December 2025\n */\n\nimport { useEffect, useCallback } from \"react\";\nimport type { Team } from \"../types\";\nimport { STORAGE_KEYS } from \"../../../shared/utils/storageKeys\";\nimport type { GameState, GameStateActions } from \"./useGameState\";\n\n/**\n * Game Status Types\n */\ntype GameStatus = \"ON\" | \"OFF\";\n\n/**\n * Complete Game Data Structure for localStorage Persistence\n */\ninterface GameData {\n  gameStatus: GameStatus;\n  teams: Team[];\n  rounds: number;\n  currentRound: number;\n  createdAt: number;\n  updatedAt: number;\n}\n\n/**\n * Game Persistence Actions Interface\n */\nexport interface GamePersistenceActions {\n  loadPersistedState: () => void;\n  saveGameState: () => void;\n}\n\n/**\n * Game Persistence Hook\n *\n * Manages localStorage operations for the Points Counter game.\n * Provides loading, saving, and auto-save functionality.\n *\n * @param state - Current game state\n * @param actions - Game state actions\n * @returns Object containing persistence actions\n */\nexport const useGamePersistence = (\n  state: GameState,\n  actions: GameStateActions\n): GamePersistenceActions => {\n  const { gameStatus, teams, rounds, currentRound } = state;\n  const { initializeState, resetToInitialState, setError } = actions;\n\n  /**\n   * Load Persisted Game State from localStorage\n   *\n   * Attempts to restore game state from localStorage on app startup.\n   * Handles data validation and graceful fallback to fresh state.\n   * Supports migration from legacy storage keys if needed.\n   */\n  const loadPersistedState = useCallback(() => {\n    try {\n      const storedData = localStorage.getItem(STORAGE_KEYS.PC_GAME_STATE);\n\n      if (storedData) {\n        const gameData: GameData = JSON.parse(storedData);\n\n        // Validate required data structure\n        if (\n          gameData.gameStatus &&\n          Array.isArray(gameData.teams) &&\n          typeof gameData.rounds === \"number\" &&\n          gameData.rounds > 0\n        ) {\n          initializeState(\n            gameData.gameStatus,\n            gameData.teams,\n            gameData.rounds,\n            gameData.currentRound || 1\n          );\n\n          console.log(\n            `Restored ${gameData.gameStatus} game with ${gameData.teams.length} teams, ${gameData.rounds} rounds`\n          );\n          return; // Successfully restored\n        }\n      }\n\n      // No valid data found - initialize fresh game in OFF mode\n      console.log(\"No valid game state found, starting fresh\");\n      resetToInitialState();\n    } catch (error) {\n      console.error(\"Failed to load persisted game state:\", error);\n      // Reset to safe state on any error\n      resetToInitialState();\n      setError(\"Failed to load saved game data\");\n    }\n  }, [initializeState, resetToInitialState, setError]);\n\n  /**\n   * Save Current Game State to localStorage\n   *\n   * Persists complete game state as atomic JSON object.\n   * Preserves creation timestamp while updating modification time.\n   * Only saves when game has meaningful data to persist.\n   */\n  const saveGameState = useCallback(() => {\n    try {\n      const gameData: GameData = {\n        gameStatus,\n        teams,\n        rounds,\n        currentRound,\n        createdAt: Date.now(), // Will be overwritten if updating existing\n        updatedAt: Date.now(),\n      };\n\n      // Preserve creation timestamp for existing games\n      const existingData = localStorage.getItem(STORAGE_KEYS.PC_GAME_STATE);\n      if (existingData) {\n        try {\n          const existing: GameData = JSON.parse(existingData);\n          gameData.createdAt = existing.createdAt || Date.now();\n        } catch {\n          // Invalid existing data, use current timestamp\n        }\n      }\n\n      localStorage.setItem(\n        STORAGE_KEYS.PC_GAME_STATE,\n        JSON.stringify(gameData)\n      );\n    } catch (error) {\n      console.error(\"Failed to save game state:\", error);\n      setError(\"Failed to save game progress\");\n    }\n  }, [gameStatus, teams, rounds, currentRound, setError]);\n\n  /**\n   * Auto-Save Effect with Debouncing\n   *\n   * Automatically saves game state 500ms after any change, but ONLY when:\n   * - Game status is 'ON' (active game)\n   * - There are teams to save\n   *\n   * This prevents unnecessary writes during setup and provides responsive\n   * auto-save for PWA and offline compatibility.\n   */\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      if (gameStatus === \"ON\" && teams.length > 0) {\n        saveGameState();\n      }\n    }, 500); // 500ms debounce as per development standards\n\n    return () => clearTimeout(timeoutId);\n  }, [gameStatus, teams, rounds, currentRound, saveGameState]);\n\n  /**\n   * Initialize Hook on Component Mount\n   * Load any persisted game state from previous sessions\n   */\n  useEffect(() => {\n    loadPersistedState();\n  }, [loadPersistedState]);\n\n  return {\n    loadPersistedState,\n    saveGameState,\n  };\n};\n","/**\n * Game Actions Hook\n *\n * Focused hook that manages game lifecycle actions for the Points Counter.\n * Extracted from the monolithic usePointsCounter hook to improve maintainability\n * and follow Single Responsibility Principle.\n *\n * Responsibilities:\n * - Starting new games\n * - Ending/clearing games\n * - Edit mode functionality\n * - Updating game setup\n * - Team score management\n * - Round navigation\n *\n * @fileoverview Game action management for Points Counter\n * @version 1.0.0\n * @since December 2025\n */\n\nimport { useCallback } from \"react\";\nimport type { Team } from \"../types\";\nimport { GAME_CONSTANTS } from \"../types\";\nimport { STORAGE_KEYS } from \"../../../shared/utils/storageKeys\";\nimport {\n  calculateTeamTotalScore,\n  isValidScore,\n  roundScore,\n} from \"../utils/gameUtils\";\nimport type { GameState, GameStateActions } from \"./useGameState\";\n\n/**\n * Game Actions Interface\n */\nexport interface GameActions {\n  startGame: (teams: Team[], rounds: number) => void;\n  endGame: () => void;\n  enterEditMode: () => void;\n  updateGameSetup: (teams: Team[], rounds: number) => void;\n  updateTeamScore: (teamId: string, round: number, score: number) => void;\n  setCurrentRound: (round: number) => void;\n  clearAllData: () => void;\n}\n\n/**\n * Game Actions Hook\n *\n * Manages game lifecycle actions and team score operations.\n * Provides comprehensive game management functionality.\n *\n * @param state - Current game state\n * @param actions - Game state actions\n * @returns Object containing game actions\n */\nexport const useGameActions = (\n  state: GameState,\n  actions: GameStateActions\n): GameActions => {\n  const { gameStatus, teams, rounds, currentRound } = state;\n  const {\n    setGameStatus,\n    setTeams,\n    setRounds,\n    setCurrentRound: setStateCurrentRound,\n    setIsLoading,\n    setError,\n    resetToInitialState,\n  } = actions;\n\n  /**\n   * Start New Game\n   *\n   * Creates fresh game with provided teams and rounds.\n   * Initializes all teams with zero scores for all rounds.\n   * Validates input and provides user feedback.\n   *\n   * @param newTeams - Array of teams to include in game\n   * @param newRounds - Number of rounds for this game\n   */\n  const startGame = useCallback(\n    (newTeams: Team[], newRounds: number) => {\n      setIsLoading(true);\n      setError(null);\n\n      try {\n        // Validation: Minimum requirements\n        if (newTeams.length < 1 || newRounds < 1) {\n          setError(\"Fill minimum one Team and at least 1 Round\");\n          setIsLoading(false);\n          return;\n        }\n\n        // Initialize teams with complete round score structure\n        const initializedTeams = newTeams.map((team) => {\n          const roundScores: Record<number, number> = {};\n\n          // Create score entry for each round, initialized to 0\n          for (let i = 1; i <= newRounds; i++) {\n            roundScores[i] = 0;\n          }\n\n          return {\n            ...team,\n            totalScore: 0,\n            roundScores,\n          };\n        });\n\n        // Set game state to active\n        setTeams(initializedTeams);\n        setRounds(newRounds);\n        setStateCurrentRound(1);\n        setGameStatus(\"ON\");\n\n        console.log(\n          `Started new game: ${newTeams.length} teams, ${newRounds} rounds`\n        );\n\n        // Brief loading state for smooth UX\n        setTimeout(() => setIsLoading(false), 300);\n      } catch (error) {\n        console.error(\"Failed to start game:\", error);\n        setError(\"Failed to start game\");\n        setIsLoading(false);\n      }\n    },\n    [\n      setIsLoading,\n      setError,\n      setTeams,\n      setRounds,\n      setStateCurrentRound,\n      setGameStatus,\n    ]\n  );\n\n  /**\n   * End Game and Clear All Data\n   *\n   * Completely resets Points Counter to fresh state:\n   * - Clears localStorage completely\n   * - Resets all state to initial values\n   * - Returns to setup mode (OFF)\n   *\n   * This provides \"Start Fresh\" functionality.\n   */\n  const endGame = useCallback(() => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      // Complete localStorage cleanup\n      localStorage.removeItem(STORAGE_KEYS.PC_GAME_STATE);\n\n      // Reset all state to initial OFF mode\n      resetToInitialState();\n\n      console.log(\"Game ended, all data cleared\");\n\n      // Brief loading for smooth transition\n      setTimeout(() => setIsLoading(false), 300);\n    } catch (error) {\n      console.error(\"Failed to end game:\", error);\n      setError(\"Failed to end game\");\n      setIsLoading(false);\n    }\n  }, [setIsLoading, setError, resetToInitialState]);\n\n  /**\n   * Enter Edit Mode\n   *\n   * Allows modification of teams and rounds while keeping game ON.\n   * This enables live adjustments without losing existing scores.\n   * UI will show setup screen but with existing data pre-filled.\n   */\n  const enterEditMode = useCallback(() => {\n    setError(null);\n    console.log(\"Entered edit mode\");\n  }, [setError]);\n\n  /**\n   * Update Game Setup in Edit Mode\n   *\n   * Modifies teams and rounds while preserving existing scores:\n   * - Existing teams keep all their round scores\n   * - New teams are initialized with zero scores\n   * - Extra rounds are added if round count increases\n   * - Removed rounds are preserved in data (just not displayed)\n   *\n   * @param newTeams - Updated team list\n   * @param newRounds - Updated round count\n   */\n  const updateGameSetup = useCallback(\n    (newTeams: Team[], newRounds: number) => {\n      setIsLoading(true);\n      setError(null);\n\n      try {\n        // Validation\n        if (newTeams.length < 1 || newRounds < 1) {\n          setError(\"Fill minimum one Team and at least 1 Round\");\n          setIsLoading(false);\n          return;\n        }\n\n        // Smart team update: preserve existing scores, add new teams\n        const updatedTeams = newTeams.map((newTeam) => {\n          const existingTeam = teams.find((t) => t.name === newTeam.name);\n\n          if (existingTeam) {\n            // Existing team: preserve scores and extend rounds if needed\n            const updatedRoundScores = { ...existingTeam.roundScores };\n\n            // Add scores for new rounds if count increased\n            for (let i = rounds + 1; i <= newRounds; i++) {\n              updatedRoundScores[i] = 0;\n            }\n\n            return {\n              ...existingTeam,\n              roundScores: updatedRoundScores,\n              totalScore: calculateTeamTotalScore({\n                ...existingTeam,\n                roundScores: updatedRoundScores,\n              }),\n            };\n          } else {\n            // New team: initialize with zero scores for all rounds\n            const roundScores: Record<number, number> = {};\n            for (let i = 1; i <= newRounds; i++) {\n              roundScores[i] = 0;\n            }\n\n            return {\n              ...newTeam,\n              totalScore: 0,\n              roundScores,\n            };\n          }\n        });\n\n        // Update state\n        setTeams(updatedTeams);\n        setRounds(newRounds);\n\n        // Adjust current round if it exceeds new round count\n        if (currentRound > newRounds) {\n          setStateCurrentRound(newRounds);\n        }\n\n        // Keep gameStatus as 'ON' - don't change it\n\n        console.log(\n          `Updated game setup: ${newTeams.length} teams, ${newRounds} rounds`\n        );\n\n        setTimeout(() => setIsLoading(false), 300);\n      } catch (error) {\n        console.error(\"Failed to update game setup:\", error);\n        setError(\"Failed to update game setup\");\n        setIsLoading(false);\n      }\n    },\n    [\n      teams,\n      rounds,\n      currentRound,\n      setIsLoading,\n      setError,\n      setTeams,\n      setRounds,\n      setStateCurrentRound,\n    ]\n  );\n\n  /**\n   * Update Team Score for Specific Round\n   *\n   * Updates individual team's score with full decimal support:\n   * - Validates score is within allowed range (-999 to 999)\n   * - Rounds to 2 decimal places for consistency\n   * - Recalculates team's total score across all rounds\n   * - Triggers auto-save via useEffect\n   *\n   * @param teamId - Unique identifier of team to update\n   * @param round - Round number to update score for\n   * @param score - New score value (supports decimals)\n   */\n  const updateTeamScore = useCallback(\n    (teamId: string, round: number, score: number) => {\n      // Validate score input\n      if (!isValidScore(score)) {\n        setError(\n          `Score must be between ${GAME_CONSTANTS.MIN_SCORE} and ${GAME_CONSTANTS.MAX_SCORE}`\n        );\n        return;\n      }\n\n      // Round to allowed decimal places\n      const roundedScore = roundScore(score);\n\n      setError(null);\n\n      setTeams((prevTeams) =>\n        prevTeams.map((team) => {\n          if (team.id === teamId) {\n            // Update specific round score\n            const updatedRoundScores = {\n              ...team.roundScores,\n              [round]: roundedScore,\n            };\n\n            // Recalculate total with decimal precision\n            const newTotalScore = calculateTeamTotalScore({\n              ...team,\n              roundScores: updatedRoundScores,\n            });\n\n            return {\n              ...team,\n              roundScores: updatedRoundScores,\n              totalScore: newTotalScore,\n            };\n          }\n          return team;\n        })\n      );\n    },\n    [setError, setTeams]\n  );\n\n  /**\n   * Navigate to Different Round\n   *\n   * Changes current round within valid range (1 to rounds).\n   * Provides validation and error feedback.\n   *\n   * @param round - Target round number (1-based)\n   */\n  const setCurrentRound = useCallback(\n    (round: number) => {\n      if (round >= 1 && round <= rounds) {\n        setStateCurrentRound(round);\n        setError(null);\n      } else {\n        setError(`Round must be between 1 and ${rounds}`);\n      }\n    },\n    [rounds, setStateCurrentRound, setError]\n  );\n\n  /**\n   * Clear All Data (alias for endGame)\n   * Provides semantic clarity for \"Clear All\" buttons\n   */\n  const clearAllData = useCallback(() => {\n    endGame();\n  }, [endGame]);\n\n  return {\n    startGame,\n    endGame,\n    enterEditMode,\n    updateGameSetup,\n    updateTeamScore,\n    setCurrentRound,\n    clearAllData,\n  };\n};\n","/**\n * Points Counter Hook - Refactored Composition Hook\n *\n * REFACTORED: This hook now composes smaller, focused hooks following\n * the Single Responsibility Principle. The original monolithic 549-line\n * hook has been split into:\n * - useGameState: Core state management and navigation\n * - useGamePersistence: localStorage operations and auto-save logic\n * - useGameActions: Game lifecycle actions and score management\n *\n * This hook maintains backward compatibility while providing a cleaner,\n * more maintainable architecture.\n *\n * Original Features Preserved:\n * - ON/OFF game state logic (setup vs active game modes)\n * - Team scoring with decimal precision support\n * - Round-by-round progression and navigation\n * - localStorage persistence with auto-save (500ms debounced)\n * - Edit mode functionality for live game modifications\n * - Error handling and validation\n * - Leaderboard calculations\n *\n * @fileoverview Refactored composition hook for Points Counter\n * @version 3.0.0 (Refactored)\n * @since December 2025\n */\n\nimport { useGameState } from \"./useGameState\";\nimport { useGamePersistence } from \"./useGamePersistence\";\nimport { useGameActions } from \"./useGameActions\";\nimport type { Team } from \"../types\";\nimport { createLeaderboard } from \"../utils/gameUtils\";\n\n/**\n * Hook Return Interface\n * Provides complete Points Counter functionality to components\n * Maintains backward compatibility with original API\n */\ninterface UsePointsCounterReturn {\n  // === STATE VALUES ===\n  /** Current game status ('ON' = active, 'OFF' = setup) */\n  gameStatus: \"ON\" | \"OFF\";\n  /** Array of teams with current scores and round data */\n  teams: Team[];\n  /** Total number of rounds configured for this game */\n  rounds: number;\n  /** Currently active round number (1-based) */\n  currentRound: number;\n  /** Loading state for UI feedback during operations */\n  isLoading: boolean;\n  /** Current error message, null if no error */\n  error: string | null;\n  /** Calculated leaderboard with positions and rankings */\n  leaderboard: ReturnType<typeof createLeaderboard>;\n\n  // === GAME ACTIONS ===\n  /** Start new game with provided teams and round count */\n  startGame: (teams: Team[], rounds: number) => void;\n  /** End current game and clear all data */\n  endGame: () => void;\n  /** Enter edit mode to modify teams/rounds while game is ON */\n  enterEditMode: () => void;\n  /** Update game setup in edit mode (teams/rounds) */\n  updateGameSetup: (teams: Team[], rounds: number) => void;\n  /** Update individual team score for specific round */\n  updateTeamScore: (teamId: string, round: number, score: number) => void;\n  /** Navigate to different round */\n  setCurrentRound: (round: number) => void;\n  /** Clear current error message */\n  clearError: () => void;\n  /** Clear all game data (alias for endGame) */\n  clearAllData: () => void;\n}\n\n/**\n * Main Points Counter Hook (Refactored)\n *\n * This hook composes the smaller, focused hooks to provide a unified\n * interface for Points Counter game management. It maintains backward\n * compatibility with the original API while benefiting from improved\n * maintainability through Single Responsibility Principle.\n *\n * Usage Example:\n * ```tsx\n * const {\n *   gameStatus,\n *   teams,\n *   startGame,\n *   updateTeamScore,\n *   leaderboard\n * } = usePointsCounter();\n *\n * // Start new game\n * startGame([{id: '1', name: 'Team A', ...}], 5);\n *\n * // Update score with decimal support\n * updateTeamScore('team-1', 1, 2.5);\n * ```\n */\nexport const usePointsCounter = (): UsePointsCounterReturn => {\n  // Compose focused hooks following Single Responsibility Principle\n  const { state, actions: stateActions, derived } = useGameState();\n\n  // Initialize persistence (auto-loads and auto-saves)\n  useGamePersistence(state, stateActions);\n\n  // Get game actions that work with the state\n  const gameActions = useGameActions(state, stateActions);\n\n  // Return complete hook interface maintaining backward compatibility\n  return {\n    // State values from useGameState\n    gameStatus: state.gameStatus,\n    teams: state.teams,\n    rounds: state.rounds,\n    currentRound: state.currentRound,\n    isLoading: state.isLoading,\n    error: state.error,\n    leaderboard: derived.leaderboard,\n\n    // Actions from useGameActions\n    startGame: gameActions.startGame,\n    endGame: gameActions.endGame,\n    enterEditMode: gameActions.enterEditMode,\n    updateGameSetup: gameActions.updateGameSetup,\n    updateTeamScore: gameActions.updateTeamScore,\n    setCurrentRound: gameActions.setCurrentRound,\n    clearAllData: gameActions.clearAllData,\n\n    // Additional actions from useGameState\n    clearError: stateActions.clearError,\n  };\n};\n","/**\n * Team Setup Form State Management Hook\n *\n * Manages all state logic for the TeamSetup component including team inputs,\n * validation, dialog states, and user interactions. Extracted from the\n * monolithic TeamSetup component to improve maintainability.\n *\n * Features:\n * - Team input management with auto-expansion\n * - Round count validation\n * - Edit mode vs fresh setup handling\n * - Validation error tracking\n * - Dialog state management\n * - Placeholder text generation\n *\n * @fileoverview State management hook for TeamSetup component\n * @version 1.0.0\n * @since December 2025\n */\n\nimport { useState, useEffect, useRef, useCallback, useMemo } from \"react\";\nimport type { Team } from \"../../../types\";\nimport { GAME_CONSTANTS, FUNNY_TEAM_NAMES } from \"../../../types\";\n\n/**\n * Team input interface for internal state management\n */\ninterface TeamInput {\n  id: number;\n  value: string;\n}\n\n/**\n * Team setup form state interface\n */\nexport interface TeamSetupFormState {\n  teams: TeamInput[];\n  nextId: number;\n  roundCountInput: string;\n  clearDialogOpen: boolean;\n  validationError: string | null;\n  inputRefs: React.MutableRefObject<Map<number, HTMLInputElement>>;\n}\n\n/**\n * Team setup form actions interface\n */\nexport interface TeamSetupFormActions {\n  handleInputChange: (id: number, value: string) => void;\n  handleKeyDown: (id: number, event: React.KeyboardEvent<HTMLElement>) => void;\n  handleRoundCountChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  removeTeam: (id: number) => void;\n  getPlaceholderText: (index: number) => string;\n  validateSetup: () => boolean;\n  setClearDialogOpen: (open: boolean) => void;\n  setValidationError: (error: string | null) => void;\n}\n\n/**\n * Hook return type\n */\nexport interface UseTeamSetupFormReturn {\n  state: TeamSetupFormState;\n  actions: TeamSetupFormActions;\n  derivedValues: {\n    roundCount: number;\n    isEditMode: boolean;\n    filledTeams: TeamInput[];\n  };\n}\n\n/**\n * Props for the hook\n */\ninterface UseTeamSetupFormProps {\n  gameStatus: \"ON\" | \"OFF\";\n  existingTeams?: Team[];\n  existingRounds?: number;\n}\n\n/**\n * Team Setup Form State Management Hook\n *\n * Manages all complex state for team setup including team inputs, validation,\n * dialog states, and user interactions.\n *\n * @param props - Hook configuration props\n * @returns State, actions, and derived values for team setup\n */\nexport const useTeamSetupForm = (\n  props: UseTeamSetupFormProps\n): UseTeamSetupFormReturn => {\n  const { gameStatus, existingTeams, existingRounds } = props;\n\n  // === PRIMARY STATE ===\n  const [teams, setTeams] = useState<TeamInput[]>([]);\n  const [nextId, setNextId] = useState(1);\n  const [roundCountInput, setRoundCountInput] = useState(\"\");\n  const [clearDialogOpen, setClearDialogOpen] = useState(false);\n  const [validationError, setValidationError] = useState<string | null>(null);\n  const inputRefs = useRef<Map<number, HTMLInputElement>>(new Map());\n\n  // Add ref to track when keyboard navigation is in progress\n  const isNavigatingRef = useRef(false);\n\n  // === DERIVED VALUES ===\n  const roundCount = parseInt(roundCountInput) || 0;\n  const isEditMode = gameStatus === \"ON\";\n  const filledTeams = teams.filter((t) => t.value.trim() !== \"\");\n\n  /**\n   * Gets placeholder text with memoized funny names\n   */\n  const getPlaceholderNames = useMemo(() => {\n    const shuffledNames = [...FUNNY_TEAM_NAMES].sort(() => Math.random() - 0.5);\n    return shuffledNames;\n  }, []);\n\n  /**\n   * Gets placeholder text for team input\n   */\n  const getPlaceholderText = useCallback(\n    (index: number): string => {\n      return getPlaceholderNames[index % getPlaceholderNames.length];\n    },\n    [getPlaceholderNames]\n  );\n\n  /**\n   * Initialize component state from props or defaults\n   */\n  useEffect(() => {\n    console.log(\"TeamSetup hook initializing:\", {\n      gameStatus,\n      existingTeams,\n      existingRounds,\n    });\n\n    if (isEditMode && existingTeams && existingTeams.length > 0) {\n      console.log(\"Loading edit mode with existing teams:\", existingTeams);\n      const teamInputs: TeamInput[] = existingTeams.map((team, index) => ({\n        id: index + 1,\n        value: team.name,\n      }));\n      // Add empty input at the end for adding new teams\n      teamInputs.push({ id: existingTeams.length + 1, value: \"\" });\n      setTeams(teamInputs);\n      setNextId(existingTeams.length + 2);\n    } else {\n      console.log(\"Creating fresh setup\");\n      // Start with just ONE empty input with placeholder hint\n      const singleTeam: TeamInput[] = [{ id: 1, value: \"\" }];\n      console.log(\"Setting single empty team:\", singleTeam);\n      setTeams(singleTeam);\n      setNextId(2);\n    }\n\n    if (isEditMode && existingRounds) {\n      setRoundCountInput(existingRounds.toString());\n    } else {\n      setRoundCountInput(\"\");\n    }\n\n    // Clear validation error when props change\n    setValidationError(null);\n  }, [isEditMode, existingTeams, existingRounds]);\n\n  /**\n   * Validates current setup\n   */\n  const validateSetup = useCallback((): boolean => {\n    const currentFilledTeams = teams.filter((t) => t.value.trim() !== \"\");\n\n    if (currentFilledTeams.length < 1) {\n      setValidationError(\"Fill minimum one Team and at least 1 Round\");\n      return false;\n    }\n\n    if (roundCount < 1) {\n      setValidationError(\"Fill minimum one Team and at least 1 Round\");\n      return false;\n    }\n\n    setValidationError(null);\n    return true;\n  }, [teams, roundCount]);\n\n  /**\n   * Handles team name input changes\n   */\n  const handleInputChange = useCallback(\n    (id: number, value: string) => {\n      console.log(\"handleInputChange called:\", { id, value });\n      // Clear validation error when user starts typing\n      setValidationError(null);\n\n      // Update team value\n      setTeams((prev) => {\n        const newTeams = prev.map((t) => (t.id === id ? { ...t, value } : t));\n        console.log(\"Setting teams after input change:\", newTeams);\n        return newTeams;\n      });\n\n      // Auto-create new input if typing in the last field and it's not empty\n      // BUT ONLY if we're not in the middle of keyboard navigation (Tab/Enter)\n      const isLastInput = teams[teams.length - 1]?.id === id;\n      if (\n        isLastInput &&\n        value.trim() &&\n        teams.length < GAME_CONSTANTS.MAX_TEAMS &&\n        !isNavigatingRef.current // Prevent auto-creation during keyboard navigation\n      ) {\n        console.log(\"Auto-adding new team input\");\n        setTeams((prev) => [...prev, { id: nextId, value: \"\" }]);\n        setNextId((prev) => prev + 1);\n      }\n    },\n    [teams, nextId]\n  );\n\n  /**\n   * Handles keyboard navigation and shortcuts\n   */\n  const handleKeyDown = useCallback(\n    (id: number, event: React.KeyboardEvent<HTMLElement>) => {\n      const currentIndex = teams.findIndex((t) => t.id === id);\n      const currentTeam = teams[currentIndex];\n\n      if (event.key === \"Enter\" || event.key === \"Tab\") {\n        event.preventDefault();\n\n        // Set flag to prevent auto-creation during navigation\n        isNavigatingRef.current = true;\n\n        // If field is empty, accept the placeholder text and move cursor to end\n        if (!currentTeam?.value.trim()) {\n          const placeholderText = getPlaceholderText(currentIndex);\n          handleInputChange(id, placeholderText);\n\n          // Create new empty field below immediately\n          setTimeout(() => {\n            if (teams.length < GAME_CONSTANTS.MAX_TEAMS) {\n              const newTeam = { id: nextId, value: \"\" };\n              setTeams((prev) => [...prev, newTeam]);\n              setNextId((prev) => prev + 1);\n            }\n\n            // Move cursor to end of current field (the filled placeholder text)\n            const currentInput = inputRefs.current.get(id);\n            if (currentInput) {\n              currentInput.focus();\n              // Move cursor to end of text\n              const textLength = placeholderText.length;\n              currentInput.setSelectionRange(textLength, textLength);\n            }\n\n            // Reset navigation flag after operation completes\n            setTimeout(() => {\n              isNavigatingRef.current = false;\n            }, 50);\n          }, 0);\n        } else {\n          // Field has content, just navigate to next field\n          const nextIndex = currentIndex + 1;\n          if (nextIndex < teams.length) {\n            // Move to existing next input\n            const nextTeam = teams[nextIndex];\n            const nextInput = inputRefs.current.get(nextTeam.id);\n            nextInput?.focus();\n          } else if (teams.length < GAME_CONSTANTS.MAX_TEAMS) {\n            // Create new input and focus it\n            const newTeam = { id: nextId, value: \"\" };\n            setTeams((prev) => [...prev, newTeam]);\n            setNextId((prev) => prev + 1);\n\n            // Focus the new input after it's created\n            setTimeout(() => {\n              const newInput = inputRefs.current.get(newTeam.id);\n              newInput?.focus();\n            }, 0);\n          }\n\n          // Reset navigation flag after operation completes\n          setTimeout(() => {\n            isNavigatingRef.current = false;\n          }, 50);\n        }\n      }\n    },\n    [teams, nextId, getPlaceholderText, handleInputChange]\n  );\n\n  /**\n   * Handles round count input changes\n   */\n  const handleRoundCountChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      // Clear validation error when user starts typing\n      setValidationError(null);\n      setRoundCountInput(event.target.value);\n    },\n    []\n  );\n\n  /**\n   * Removes a team input\n   */\n  const removeTeam = useCallback(\n    (id: number) => {\n      if (teams.length <= 1) return; // Prevent removing the last input\n\n      setTeams((prev) => prev.filter((t) => t.id !== id));\n      inputRefs.current.delete(id);\n    },\n    [teams.length]\n  );\n\n  // === RETURN HOOK INTERFACE ===\n  return {\n    state: {\n      teams,\n      nextId,\n      roundCountInput,\n      clearDialogOpen,\n      validationError,\n      inputRefs,\n    },\n    actions: {\n      handleInputChange,\n      handleKeyDown,\n      handleRoundCountChange,\n      removeTeam,\n      getPlaceholderText,\n      validateSetup,\n      setClearDialogOpen,\n      setValidationError,\n    },\n    derivedValues: {\n      roundCount,\n      isEditMode,\n      filledTeams,\n    },\n  };\n};\n","/**\n * Team Inputs Component\n *\n * Handles rendering and management of dynamic team name input fields.\n * Features auto-expansion, validation, and keyboard navigation.\n *\n * @fileoverview Team input fields component for TeamSetup\n * @version 1.0.0\n * @since December 2025\n */\n\nimport React from \"react\";\nimport { Box, TextField, IconButton } from \"@mui/material\";\nimport { Close as CloseIcon } from \"@mui/icons-material\";\nimport type { TeamSetupFormState, TeamSetupFormActions } from \"../hooks\";\n\n/**\n * Team Number Component\n * Displays a circular badge with the team number\n */\nconst TeamNumber: React.FC<{ number: number; show: boolean }> = ({\n  number,\n  show,\n}) => (\n  <Box\n    sx={{\n      minWidth: 24,\n      height: 24,\n      borderRadius: \"50%\",\n      bgcolor: show ? \"primary.main\" : \"transparent\",\n      color: show ? \"primary.contrastText\" : \"transparent\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      fontSize: \"0.75rem\",\n      fontWeight: 600,\n      flexShrink: 0,\n      transition: \"all 0.2s ease\",\n      minHeight: 24,\n    }}\n  >\n    {show ? number : \"\"}\n  </Box>\n);\n\n/**\n * Props for TeamInputs component\n */\ninterface TeamInputsProps {\n  state: TeamSetupFormState;\n  actions: TeamSetupFormActions;\n}\n\n/**\n * Team Inputs Component\n *\n * Renders dynamic team input fields with auto-expansion, validation,\n * and keyboard navigation. Handles the visual and interactive aspects\n * of team name collection.\n */\nexport const TeamInputs: React.FC<TeamInputsProps> = ({ state, actions }) => {\n  const { teams, inputRefs } = state;\n  const { handleInputChange, handleKeyDown, removeTeam, getPlaceholderText } =\n    actions;\n\n  return (\n    <Box\n      sx={{\n        flex: 1,\n        display: \"flex\",\n        flexDirection: \"column\",\n        gap: \"clamp(0.25rem, 1vw, 0.5rem)\", // RTG gap pattern\n        p: { xs: 1, sm: 2 }, // RTG padding pattern\n        pb: \"clamp(0.25rem, 1vw, 0.75rem)\", // RTG bottom padding\n        overflow: \"auto\",\n        minHeight: 0, // Allow flex shrinking\n      }}\n    >\n      {teams.map((team, index) => {\n        const hasContent = team.value.trim() !== \"\";\n        const displayNumber = index + 1;\n        const showNumber = hasContent || index === 0; // Always show first number as hint\n        const canDelete = teams.length > 1 && hasContent;\n\n        return (\n          <Box\n            key={team.id}\n            sx={{\n              display: \"flex\",\n              alignItems: \"center\",\n              gap: \"clamp(0.5rem, 1.5vw, 1rem)\", // RTG gap pattern\n              py: \"clamp(0.125rem, 0.5vw, 0.25rem)\", // RTG vertical padding\n            }}\n          >\n            {/* Team Number Badge */}\n            <TeamNumber number={displayNumber} show={showNumber} />\n\n            {/* Team Name Input */}\n            <TextField\n              inputRef={(input) => {\n                if (input) {\n                  inputRefs.current.set(team.id, input);\n                } else {\n                  inputRefs.current.delete(team.id);\n                }\n              }}\n              value={team.value}\n              onChange={(e) => handleInputChange(team.id, e.target.value)}\n              onKeyDown={(e) => handleKeyDown(team.id, e)}\n              placeholder={getPlaceholderText(index)}\n              variant=\"outlined\"\n              size=\"small\"\n              sx={{\n                flex: 1,\n                \"& .MuiOutlinedInput-root\": {\n                  \"& fieldset\": {\n                    border: \"none\",\n                  },\n                  \"&:hover fieldset\": {\n                    border: \"none\",\n                  },\n                  \"&.Mui-focused fieldset\": {\n                    border: \"none\",\n                  },\n                  bgcolor: \"background.default\",\n                  borderRadius: 1,\n                  fontSize: \"clamp(0.9rem, 2vw, 1rem)\",\n                },\n              }}\n              aria-label={`Team ${displayNumber} name input`}\n              autoComplete=\"off\"\n            />\n\n            {/* Delete Button */}\n            <IconButton\n              size=\"small\"\n              onClick={() => removeTeam(team.id)}\n              disabled={!canDelete}\n              sx={{\n                opacity: hasContent && canDelete ? 0.7 : 0,\n                transition: \"opacity 0.2s ease\",\n                color: \"error.main\",\n                flexShrink: 0,\n                \"&:hover\": {\n                  opacity: hasContent && canDelete ? 1 : 0,\n                  bgcolor: \"error.main\",\n                  color: \"error.contrastText\",\n                },\n                \"&.Mui-disabled\": {\n                  opacity: 0,\n                },\n              }}\n              aria-label={`Remove team ${displayNumber}`}\n              title={`Remove team ${displayNumber}`}\n            >\n              <CloseIcon fontSize=\"small\" />\n            </IconButton>\n          </Box>\n        );\n      })}\n    </Box>\n  );\n};\n","/**\n * Game Settings Component\n *\n * Handles game configuration settings including rounds count\n * with simplified error handling that doesn't disrupt layout.\n *\n * @fileoverview Game settings configuration component\n * @version 2.0.0 - Simplified Design\n * @since December 2025\n */\n\nimport React from \"react\";\nimport { Box, Typography, TextField } from \"@mui/material\";\nimport type { TeamSetupFormState, TeamSetupFormActions } from \"../hooks\";\n\n/**\n * Props for GameSettings component\n */\ninterface GameSettingsProps {\n  state: TeamSetupFormState;\n  actions: TeamSetupFormActions;\n  roundCount: number;\n  filledTeams: any[];\n  error?: string | null;\n  inputRef?: React.RefObject<HTMLInputElement>;\n}\n\n/**\n * Game Settings Component\n *\n * Handles rounds count input with clean, non-disruptive design.\n * No dynamic status messages to maintain consistent layout.\n */\nexport const GameSettings: React.FC<GameSettingsProps> = ({\n  state,\n  actions,\n  roundCount,\n  filledTeams,\n  error,\n  inputRef,\n}) => {\n  const { roundCountInput, validationError } = state;\n  const { handleRoundCountChange } = actions;\n\n  // Only show rounds-specific error\n  const showRoundsError = validationError && roundCount < 1;\n\n  return (\n    <Box\n      sx={{\n        flexShrink: 0,\n      }}\n    >\n      {/* Round Count Input */}\n      <Box\n        sx={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"flex-end\", // Align to right side of header\n        }}\n      >\n        <TextField\n          inputRef={inputRef}\n          type=\"number\"\n          value={roundCountInput}\n          onChange={handleRoundCountChange}\n          placeholder=\"0\"\n          variant=\"outlined\"\n          size=\"small\"\n          inputProps={{\n            min: 1,\n            max: 99,\n            \"aria-label\": \"Number of rounds\",\n          }}\n          sx={{\n            width: 80,\n            \"& .MuiOutlinedInput-root\": {\n              \"& fieldset\": {\n                border: \"none\",\n              },\n              \"&:hover fieldset\": {\n                border: \"none\",\n              },\n              \"&.Mui-focused fieldset\": {\n                border: \"none\",\n              },\n              bgcolor: \"background.default\",\n              borderRadius: 1,\n              fontSize: \"clamp(0.9rem, 2vw, 1rem)\",\n            },\n          }}\n        />\n\n        {/* Simple error message under rounds input only */}\n        {showRoundsError && (\n          <Typography\n            variant=\"caption\"\n            sx={{\n              color: \"error.main\",\n              fontSize: \"0.75rem\",\n              mt: 0.5,\n              whiteSpace: \"nowrap\",\n              textAlign: \"right\",\n            }}\n          >\n            Add rounds\n          </Typography>\n        )}\n      </Box>\n    </Box>\n  );\n};\n","/**\n * Action Buttons Component\n *\n * Handles the start/continue game button and clear all data button.\n * Provides proper loading states and visual feedback.\n *\n * @fileoverview Action buttons component for TeamSetup\n * @version 1.0.0\n * @since December 2025\n */\n\nimport React from \"react\";\nimport { Box, Button, IconButton, CircularProgress } from \"@mui/material\";\nimport {\n  PlayArrow as StartIcon,\n  DeleteForever as ClearIcon,\n} from \"@mui/icons-material\";\n\n/**\n * Props for ActionButtons component\n */\ninterface ActionButtonsProps {\n  onStartGame: () => void;\n  onClearClick: () => void;\n  isLoading: boolean;\n  isEditMode: boolean;\n}\n\n/**\n * Action Buttons Component\n *\n * Handles the main action buttons with proper loading states\n * and visual feedback. Uses RTG-style layout patterns.\n */\nexport const ActionButtons: React.FC<ActionButtonsProps> = ({\n  onStartGame,\n  onClearClick,\n  isLoading,\n  isEditMode,\n}) => {\n  const getButtonText = (): string => {\n    if (isLoading) return \"Processing...\";\n    return isEditMode ? \"Continue Game\" : \"Start Quiz Game\";\n  };\n\n  return (\n    <Box\n      sx={{\n        flexShrink: 0,\n        p: { xs: 1, sm: 2 }, // RTG padding pattern\n        pt: \"clamp(0.25rem, 1vw, 0.75rem)\", // RTG top padding\n      }}\n    >\n      {/* Action Buttons Row - RTG Pattern */}\n      <Box\n        sx={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          position: \"relative\", // For absolute positioning of clear button\n        }}\n      >\n        {/* Start Game Button - Center (RTG style) */}\n        <Button\n          variant=\"contained\"\n          startIcon={\n            isLoading ? (\n              <CircularProgress size={20} color=\"inherit\" />\n            ) : (\n              <StartIcon />\n            )\n          }\n          onClick={onStartGame}\n          disabled={isLoading}\n          sx={{\n            px: { xs: 4, sm: 6 },\n            py: { xs: 1.5, sm: 1.25 },\n            fontSize: \"clamp(0.8rem, 1.2vw, 0.875rem)\", // RTG button text sizing\n            borderRadius: 2,\n            boxShadow: (theme) => theme.shadows[2],\n            \"&:hover\": {\n              boxShadow: (theme) => theme.shadows[4],\n              transform: \"translateY(-1px)\",\n              transition: \"all 0.2s ease-in-out\",\n            },\n            \"&:active\": {\n              transform: \"translateY(0px)\",\n            },\n            \"&.Mui-disabled\": {\n              boxShadow: (theme) => theme.shadows[1],\n              transform: \"none\",\n            },\n          }}\n          aria-label={isLoading ? \"Processing, please wait\" : getButtonText()}\n          title={isLoading ? \"Processing...\" : getButtonText()}\n        >\n          {getButtonText()}\n        </Button>\n\n        {/* Clear All Button - Right (RTG style) */}\n        <IconButton\n          onClick={onClearClick}\n          sx={{\n            position: \"absolute\",\n            right: 0,\n            bgcolor: \"error.main\",\n            color: \"error.contrastText\",\n            \"&:hover\": {\n              bgcolor: \"error.dark\",\n              transform: \"scale(1.1)\",\n              transition: \"all 0.2s ease-in-out\",\n            },\n            \"&:active\": {\n              transform: \"scale(1)\",\n            },\n          }}\n          aria-label=\"Clear all data\"\n          title=\"Clear all Points Counter data\"\n        >\n          <ClearIcon />\n        </IconButton>\n      </Box>\n    </Box>\n  );\n};\n","/**\n * Clear Data Dialog Component\n *\n * Handles the confirmation dialog for clearing all Points Counter data.\n * Provides clear warning and confirmation actions.\n *\n * @fileoverview Clear data confirmation dialog for TeamSetup\n * @version 1.0.0\n * @since December 2025\n */\n\nimport React from \"react\";\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Typography,\n  Button,\n} from \"@mui/material\";\nimport { DeleteForever as ClearIcon } from \"@mui/icons-material\";\n\n/**\n * Props for ClearDataDialog component\n */\ninterface ClearDataDialogProps {\n  open: boolean;\n  onClose: () => void;\n  onConfirm: () => void;\n}\n\n/**\n * Clear Data Dialog Component\n *\n * Provides a confirmation dialog for destructive clear all action.\n * Clearly warns about data loss and provides cancel option.\n */\nexport const ClearDataDialog: React.FC<ClearDataDialogProps> = ({\n  open,\n  onClose,\n  onConfirm,\n}) => {\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      maxWidth=\"sm\"\n      PaperProps={{\n        sx: { borderRadius: 2 },\n      }}\n    >\n      <DialogTitle\n        sx={{\n          textAlign: \"center\",\n          fontWeight: 600,\n          color: \"error.main\",\n        }}\n      >\n        Clear All Data?\n      </DialogTitle>\n\n      <DialogContent>\n        <Typography\n          variant=\"body1\"\n          sx={{\n            textAlign: \"center\",\n            color: \"text.secondary\",\n            lineHeight: 1.6,\n          }}\n        >\n          This will permanently delete all Points Counter data including saved\n          teams, game states, and settings. This action cannot be undone.\n        </Typography>\n      </DialogContent>\n\n      <DialogActions\n        sx={{\n          justifyContent: \"center\",\n          gap: 2,\n          p: 2,\n        }}\n      >\n        <Button variant=\"outlined\" onClick={onClose}>\n          Cancel\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"error\"\n          onClick={onConfirm}\n          startIcon={<ClearIcon />}\n        >\n          Clear All Data\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n","/**\n * Team Setup Component for Points Counter\n *\n * Provides interface for setting up teams before starting the quiz game.\n * Features RTG-style dynamic team management with funny name placeholders.\n * Supports both initial setup (game OFF) and edit mode (game ON).\n *\n * Refactored from 768-line monolithic component into modular architecture:\n * - State management extracted to useTeamSetupForm hook\n * - UI components split into focused sub-components\n * - Clean separation of concerns maintained\n *\n * @fileoverview Team setup and configuration component\n * @version 3.0.0 - Refactored Architecture\n * @since December 2025\n */\n\nimport React from \"react\";\nimport { Box, Typography } from \"@mui/material\";\nimport {\n  KeyboardArrowDown as ArrowDownIcon,\n  KeyboardArrowRight as ArrowRightIcon,\n} from \"@mui/icons-material\";\nimport type { Team } from \"../../types\";\nimport { useTeamSetupForm } from \"./hooks\";\nimport {\n  TeamInputs,\n  GameSettings,\n  ActionButtons,\n  ClearDataDialog,\n} from \"./components\";\n\n/**\n * Props interface for TeamSetup component\n */\ninterface TeamSetupProps {\n  /** Current game status - 'ON' means active game with edit mode, 'OFF' means fresh setup */\n  gameStatus: \"ON\" | \"OFF\";\n  /** Callback when game should start or continue */\n  onStartGame: (teams: Team[], rounds: number) => void;\n  /** Callback when setup should be updated (edit mode) */\n  onUpdateSetup?: (teams: Team[], rounds: number) => void;\n  /** Callback when all data should be cleared */\n  onClearAllData: () => void;\n  /** Whether the setup is currently loading */\n  isLoading?: boolean;\n  /** Current error message */\n  error?: string | null;\n  /** Existing teams data for edit mode */\n  existingTeams?: Team[];\n  /** Existing rounds count for edit mode */\n  existingRounds?: number;\n}\n\n/**\n * Team Setup Component\n *\n * Main orchestrator component that coordinates the team setup flow.\n * Uses refactored sub-components for clean separation of concerns.\n */\nexport const TeamSetup: React.FC<TeamSetupProps> = ({\n  gameStatus,\n  onStartGame,\n  onUpdateSetup,\n  onClearAllData,\n  isLoading = false,\n  error,\n  existingTeams,\n  existingRounds,\n}) => {\n  // Use the extracted state management hook\n  const { state, actions, derivedValues } = useTeamSetupForm({\n    gameStatus,\n    existingTeams,\n    existingRounds,\n  });\n\n  const { clearDialogOpen, validationError } = state;\n  const { validateSetup, setClearDialogOpen } = actions;\n  const { roundCount, isEditMode, filledTeams } = derivedValues;\n\n  // Ref for rounds input to enable focus management\n  const roundsInputRef = React.useRef<HTMLInputElement>(null);\n\n  /**\n   * Handles starting/continuing the game with configured teams\n   */\n  const handleStartGame = React.useCallback(() => {\n    // Validate setup first\n    if (!validateSetup()) {\n      // If validation fails and rounds are empty, focus the rounds input\n      if (roundCount < 1) {\n        setTimeout(() => {\n          roundsInputRef.current?.focus();\n        }, 100);\n      }\n      return; // Validation error is already set by validateSetup\n    }\n\n    const gameTeams: Team[] = filledTeams.map((team, index) => ({\n      id: `team-${Date.now()}-${index}`,\n      name: team.value.trim(),\n      totalScore: 0,\n      roundScores: {},\n    }));\n\n    if (isEditMode && onUpdateSetup) {\n      onUpdateSetup(gameTeams, roundCount);\n    } else {\n      onStartGame(gameTeams, roundCount);\n    }\n  }, [\n    validateSetup,\n    filledTeams,\n    roundCount,\n    isEditMode,\n    onUpdateSetup,\n    onStartGame,\n  ]);\n\n  /**\n   * Handles clearing all data\n   */\n  const handleClearAll = React.useCallback(() => {\n    setClearDialogOpen(false);\n    onClearAllData();\n  }, [setClearDialogOpen, onClearAllData]);\n\n  /**\n   * Gets header text based on game status\n   */\n  const getHeaderText = (): string => {\n    return isEditMode ? \"Edit Teams\" : \"Teams Setup\";\n  };\n\n  return (\n    <Box\n      sx={{\n        // Account for browser chrome (address bar, tabs, etc.) - Same as RTG\n        height: \"calc(100vh - 100px)\", // Subtract space for browser UI elements\n        minHeight: \"480px\", // Safety minimum for very small screens\n        display: \"flex\",\n        flexDirection: \"column\",\n        bgcolor: \"background.default\",\n        overflow: \"hidden\", // Prevent page-level scrolling\n      }}\n    >\n      {/* Main Content Area - RTG Pattern */}\n      <Box\n        sx={{\n          flex: 1, // Fill available space\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          p: { xs: 1, sm: 2 }, // Padding for the card\n          overflow: \"hidden\", // Ensure no overflow\n        }}\n      >\n        <Box\n          sx={{\n            width: \"100%\",\n            height: \"100%\", // Take full available height\n            maxWidth: {\n              xs: \"calc(100vw - 16px)\",\n              sm: \"clamp(280px, 50vw, 600px)\", // Same as RTG max width constraint\n            },\n            display: \"flex\",\n            flexDirection: \"column\",\n          }}\n        >\n          {/* Single Card Container - Everything Inside */}\n          <Box\n            sx={{\n              flex: 1,\n              display: \"flex\",\n              flexDirection: \"column\",\n              bgcolor: \"background.paper\",\n              borderRadius: 3,\n              boxShadow: 4,\n              overflow: \"hidden\",\n            }}\n          >\n            {/* Header Section - Title and Game Settings */}\n            <Box\n              sx={{\n                flexShrink: 0,\n                px: { xs: 2, sm: 3 },\n                py: { xs: 2, sm: 2.5 },\n                display: \"flex\",\n                alignItems: \"baseline\",\n                justifyContent: \"space-between\",\n                gap: 2,\n              }}\n            >\n              {/* Game Setup Title - Left side */}\n              <Box\n                sx={{\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  gap: 0.5,\n                }}\n              >\n                <Typography\n                  variant=\"body1\"\n                  sx={{\n                    fontWeight: 500,\n                    color: \"text.primary\",\n                    fontSize: \"clamp(0.9rem, 2vw, 1rem)\",\n                  }}\n                >\n                  {getHeaderText()}\n                </Typography>\n                {/* Small downward arrow pointing to team inputs */}\n                <ArrowDownIcon\n                  sx={{\n                    fontSize: \"clamp(1rem, 2.2vw, 1.2rem)\",\n                    color: \"text.secondary\",\n                    opacity: 0.6,\n                    ml: 0.5,\n                  }}\n                />\n              </Box>\n\n              {/* Game Settings - Right side */}\n              <Box\n                sx={{\n                  display: \"flex\",\n                  alignItems: \"baseline\",\n                  gap: 1,\n                }}\n              >\n                <Box\n                  sx={{\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    gap: 0.25,\n                  }}\n                >\n                  <Typography\n                    variant=\"body1\"\n                    sx={{\n                      fontWeight: 500,\n                      color: \"text.primary\",\n                      fontSize: \"clamp(0.9rem, 2vw, 1rem)\",\n                      whiteSpace: \"nowrap\",\n                    }}\n                  >\n                    Rounds\n                  </Typography>\n                  {/* Small rightward arrow pointing to rounds input */}\n                  <ArrowRightIcon\n                    sx={{\n                      fontSize: \"clamp(0.9rem, 2vw, 1rem)\",\n                      color: \"text.secondary\",\n                      opacity: 0.6,\n                      ml: 0.25,\n                    }}\n                  />\n                </Box>\n                <GameSettings\n                  state={state}\n                  actions={actions}\n                  roundCount={roundCount}\n                  filledTeams={filledTeams}\n                  error={error}\n                  inputRef={roundsInputRef}\n                />\n              </Box>\n            </Box>\n\n            {/* Team Names Input Area - Expandable/Scrollable */}\n            <TeamInputs state={state} actions={actions} />\n\n            {/* Bottom Row - Action Buttons */}\n            <ActionButtons\n              isLoading={isLoading}\n              onStartGame={handleStartGame}\n              onClearClick={() => setClearDialogOpen(true)}\n              isEditMode={isEditMode}\n            />\n          </Box>\n        </Box>\n      </Box>\n\n      {/* Clear Confirmation Dialog */}\n      <ClearDataDialog\n        open={clearDialogOpen}\n        onClose={() => setClearDialogOpen(false)}\n        onConfirm={handleClearAll}\n      />\n    </Box>\n  );\n};\n","/**\n * Round Navigation Component for Points Counter\n * \n * Provides navigation between quiz rounds with intuitive tab-like interface.\n * Shows current round and allows switching between available rounds.\n * \n * @fileoverview Round navigation component for quiz game\n * @version 1.0.0\n * @since December 2025\n */\n\nimport React from 'react';\nimport {\n  Box,\n  Typography,\n  IconButton,\n} from '@mui/material';\nimport {\n  ChevronLeft as PrevIcon,\n  ChevronRight as NextIcon,\n} from '@mui/icons-material';\n\n/**\n * Props interface for RoundNavigation component\n */\ninterface RoundNavigationProps {\n  /** Current active round (1-based) */\n  currentRound: number;\n  /** Total number of rounds */\n  totalRounds: number;\n  /** Callback when round changes */\n  onRoundChange: (round: number) => void;\n}\n\n/**\n * Round Navigation Component\n * Provides intuitive navigation between quiz rounds\n */\nexport const RoundNavigation: React.FC<RoundNavigationProps> = ({\n  currentRound,\n  totalRounds,\n  onRoundChange,\n}) => {\n  /**\n   * Handles previous round navigation\n   */\n  const handlePrevious = () => {\n    if (currentRound > 1) {\n      onRoundChange(currentRound - 1);\n    }\n  };\n\n  /**\n   * Handles next round navigation\n   */\n  const handleNext = () => {\n    if (currentRound < totalRounds) {\n      onRoundChange(currentRound + 1);\n    }\n  };\n\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        gap: { xs: 1, sm: 2 },\n        py: { xs: 0.75, sm: 1 },\n        px: { xs: 1, sm: 2 },\n        // Removed: backgroundColor, borderRadius, boxShadow, border - no visual container\n      }}\n    >\n      {/* Previous Round Button */}\n      <IconButton\n        onClick={handlePrevious}\n        disabled={currentRound <= 1}\n        size=\"small\"\n        sx={{\n          color: currentRound <= 1 ? 'text.disabled' : 'primary.main',\n          transition: 'all 0.2s ease',\n          '&:hover': {\n            backgroundColor: 'action.hover',\n          },\n        }}\n      >\n        <PrevIcon />\n      </IconButton>\n\n      {/* Round Display */}\n      <Box\n        sx={{\n          display: 'flex',\n          alignItems: 'center',\n          gap: 1,\n          px: { xs: 2, sm: 3 },\n          py: { xs: 0.5, sm: 1 },\n          backgroundColor: 'primary.main',\n          color: 'primary.contrastText',\n          borderRadius: 1,\n          minWidth: { xs: 120, sm: 140 },\n          justifyContent: 'center',\n        }}\n      >\n        <Typography\n          variant=\"body1\"\n          sx={{\n            fontWeight: 600,\n            fontSize: 'clamp(0.9rem, 2vw, 1.1rem)',\n            textAlign: 'center',\n          }}\n        >\n          Round {currentRound} of {totalRounds}\n        </Typography>\n      </Box>\n\n      {/* Next Round Button */}\n      <IconButton\n        onClick={handleNext}\n        disabled={currentRound >= totalRounds}\n        size=\"small\"\n        sx={{\n          color: currentRound >= totalRounds ? 'text.disabled' : 'primary.main',\n          transition: 'all 0.2s ease',\n          '&:hover': {\n            backgroundColor: 'action.hover',\n          },\n        }}\n      >\n        <NextIcon />\n      </IconButton>\n    </Box>\n  );\n}; ","/**\n * Team Scoring Card Component - Modern Design with Marquee Animation\n *\n * Beautiful, responsive team card that displays:\n * - Team name with smart text overflow handling\n * - Marquee animation for long team names (only when card is focused/hovered)\n * - Current round score input with decimal precision support\n * - Total accumulated score display\n * - Modern hover effects and visual feedback\n *\n * Features:\n * - Marquee Animation: Scrolls long team names smoothly when card is active\n * - Decimal Scoring: Supports scores like 0.5, 1.25, 2.75 with validation\n * - Responsive Design: Adapts to mobile and desktop screen sizes\n * - Modern UI: Hover effects, focus states, gradient accents\n * - Auto-resize: Detects text overflow and enables marquee accordingly\n *\n * Animation Details:\n * - Duration: 10 seconds for comfortable reading\n * - Trigger: Only on hover/focus and only when text overflows\n * - Pattern: Start position → pause → scroll → long pause → reset\n * - Timing: 8% start pause, 42% scroll time, 35% end pause, 15% reset\n *\n * @fileoverview Modern team scoring card for Points Counter\n * @version 2.0.0\n * @since December 2025\n */\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Card, CardContent, Typography, TextField, Box } from \"@mui/material\";\nimport type { Team } from \"../../types\";\nimport { isValidScore, roundScore } from \"../../utils/gameUtils\";\n\n/**\n * Props Interface for TeamCard Component\n */\ninterface TeamCardProps {\n  /** Team data containing name, scores, and identification */\n  team: Team;\n  /** Current round number for score input (1-based) */\n  currentRound: number;\n  /** Callback when team score is updated - supports decimal values */\n  onScoreUpdate: (teamId: string, round: number, score: number) => void;\n  /** Whether the card is in edit mode (currently unused but available for future features) */\n  editMode?: boolean;\n}\n\n/**\n * Beautiful Team Scoring Card Component\n *\n * Renders individual team card with modern design, marquee text animation,\n * and decimal scoring input. Handles all user interactions and provides\n * visual feedback for scoring operations.\n *\n * Usage Example:\n * ```tsx\n * <TeamCard\n *   team={{\n *     id: 'team-1',\n *     name: 'The Amazing Quiz Champions',\n *     totalScore: 12.5,\n *     roundScores: { 1: 5, 2: 2.5, 3: 5 }\n *   }}\n *   currentRound={3}\n *   onScoreUpdate={(teamId, round, score) => updateScore(teamId, round, score)}\n * />\n * ```\n */\nexport const TeamCard: React.FC<TeamCardProps> = ({\n  team,\n  currentRound,\n  onScoreUpdate,\n}) => {\n  // === INPUT STATE ===\n  /** Current value in the score input field */\n  const [inputValue, setInputValue] = useState<string>(\"\");\n  /** Whether input has validation errors */\n  const [hasError, setHasError] = useState(false);\n\n  // === INTERACTION STATE ===\n  /** Whether user is hovering over the card */\n  const [isHovered, setIsHovered] = useState(false);\n  /** Whether any input in the card has focus */\n  const [isFocused, setIsFocused] = useState(false);\n\n  // === MARQUEE STATE ===\n  /** Whether team name overflows the container (enables marquee) */\n  const [textOverflows, setTextOverflows] = useState(false);\n\n  // === DOM REFERENCES ===\n  /** Reference to the typography element containing team name */\n  const textRef = useRef<HTMLElement>(null);\n  /** Reference to the container that constrains text width */\n  const containerRef = useRef<HTMLElement>(null);\n\n  // === DERIVED STATE ===\n  /** Get current round score for this team (default to 0 if not set) */\n  const currentRoundScore = team.roundScores[currentRound] || 0;\n\n  /**\n   * Text Overflow Detection\n   *\n   * Checks if the team name text width exceeds its container.\n   * This determines whether to enable the marquee animation.\n   * Uses scrollWidth vs clientWidth comparison for accuracy.\n   */\n  const checkTextOverflow = () => {\n    if (textRef.current && containerRef.current) {\n      const textWidth = textRef.current.scrollWidth;\n      const containerWidth = containerRef.current.clientWidth;\n      setTextOverflows(textWidth > containerWidth);\n    }\n  };\n\n  /**\n   * Initialize Input Value Effect\n   *\n   * Updates input field when round changes or team data updates.\n   * Shows empty input (placeholder visible) when score is 0,\n   * but maintains actual score values for calculations in background.\n   * Clears any validation errors when data changes.\n   */\n  useEffect(() => {\n    // Only show value in input if it's not 0 (let placeholder show for 0)\n    setInputValue(currentRoundScore === 0 ? \"\" : currentRoundScore.toString());\n    setHasError(false);\n  }, [currentRound, currentRoundScore]);\n\n  /**\n   * Text Overflow Detection Effect\n   *\n   * Checks text overflow on mount and when team name changes.\n   * Also listens for window resize events to handle dynamic layout changes.\n   * Properly cleans up event listener on unmount.\n   */\n  useEffect(() => {\n    checkTextOverflow();\n    const handleResize = () => checkTextOverflow();\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, [team.name]);\n\n  /**\n   * Score Input Change Handler\n   *\n   * Handles user input in the score field with real-time validation:\n   * 1. Allows empty input for easier editing\n   * 2. Validates numeric format and range\n   * 3. Updates team score immediately if valid\n   * 4. Shows error state for invalid input\n   *\n   * @param event - Input change event\n   */\n  const handleScoreChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const value = event.target.value;\n    setInputValue(value);\n\n    // Allow empty input for easier editing experience\n    if (value === \"\") {\n      setHasError(false);\n      return;\n    }\n\n    // Parse and validate numeric input\n    const numericValue = parseFloat(value);\n    if (isNaN(numericValue)) {\n      setHasError(true);\n      return;\n    }\n\n    // Validate against allowed score range\n    if (!isValidScore(numericValue)) {\n      setHasError(true);\n      return;\n    }\n\n    // Valid input: clear errors and update score\n    setHasError(false);\n    const roundedScore = roundScore(numericValue);\n    onScoreUpdate(team.id, currentRound, roundedScore);\n  };\n\n  /**\n   * Input Blur Handler\n   *\n   * Handles when user leaves the input field:\n   * - Empty input: Saves as 0 but keeps input empty (shows placeholder)\n   * - Invalid input: Resets to current value or empty if 0\n   * - Valid input: Maintains the entered value\n   * Provides consistent user experience and prevents invalid states.\n   */\n  const handleBlur = () => {\n    if (inputValue === \"\") {\n      // Empty input = 0 score, but keep input empty to show placeholder\n      onScoreUpdate(team.id, currentRound, 0);\n      setHasError(false);\n    } else if (hasError) {\n      // Reset to current round score if input has errors\n      setInputValue(\n        currentRoundScore === 0 ? \"\" : currentRoundScore.toString()\n      );\n      setHasError(false);\n    }\n  };\n\n  /**\n   * Score Display Formatter\n   *\n   * Formats score values for consistent display:\n   * - Whole numbers: \"5\" (no decimal places)\n   * - Decimal numbers: \"5.25\" (up to 2 decimal places)\n   *\n   * @param score - Numeric score value\n   * @returns Formatted string representation\n   */\n  const formatScore = (score: number): string => {\n    return score % 1 === 0 ? score.toString() : score.toFixed(2);\n  };\n\n  /**\n   * Marquee Animation Condition\n   *\n   * Determines when to show marquee animation:\n   * - Text must overflow the container\n   * - Card must be hovered OR any input focused\n   * This prevents distracting animation unless user is actively engaged\n   */\n  const shouldShowMarquee = textOverflows && (isHovered || isFocused);\n\n  return (\n    <Card\n      // === INTERACTION HANDLERS ===\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n      onFocus={() => setIsFocused(true)}\n      onBlur={() => setIsFocused(false)}\n      tabIndex={0} // Make card focusable for accessibility\n      sx={{\n        // === CARD SIZING ===\n        height: { xs: 145, sm: 165 }, // Responsive height for content\n        width: \"100%\",\n        maxWidth: { xs: \"100%\", sm: 240, md: 220, lg: 230 }, // Wider for longer names\n\n        // === BASE STYLING ===\n        backgroundColor: \"background.paper\",\n        boxShadow: \"0 2px 8px rgba(0,0,0,0.08)\", // Subtle default shadow\n        border: \"1px solid\",\n        borderColor:\n          isHovered || isFocused ? \"primary.main\" : \"rgba(0,0,0,0.06)\",\n        borderRadius: 3, // Modern rounded corners\n\n        // === INTERACTION STYLING ===\n        transition: \"all 0.3s cubic-bezier(0.4, 0, 0.2, 1)\", // Smooth easing curve\n        position: \"relative\",\n        overflow: \"hidden\",\n        cursor: \"pointer\",\n\n        // === HOVER STATE ===\n        \"&:hover\": {\n          boxShadow: \"0 8px 24px rgba(0,0,0,0.12)\", // Enhanced shadow on hover\n          borderColor: \"primary.main\",\n          transform: \"translateY(-2px)\", // Subtle lift effect\n        },\n\n        // === FOCUS STATE ===\n        \"&:focus\": {\n          outline: \"none\", // Remove default browser focus outline\n          boxShadow: \"0 8px 24px rgba(0,0,0,0.12)\",\n          borderColor: \"primary.main\",\n          transform: \"translateY(-2px)\",\n        },\n\n        // === ACCENT LINE (shows on hover/focus) ===\n        \"&:before\": {\n          content: '\"\"',\n          position: \"absolute\",\n          top: 0,\n          left: 0,\n          right: 0,\n          height: \"3px\",\n          background: \"linear-gradient(90deg, #1976d2, #42a5f5)\", // Primary gradient\n          opacity: isHovered || isFocused ? 1 : 0,\n          transition: \"opacity 0.3s ease\",\n        },\n      }}\n    >\n      <CardContent\n        sx={{\n          height: \"100%\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"space-between\", // Distribute content evenly\n          alignItems: \"center\",\n          p: { xs: 2, sm: 2.5 }, // Responsive padding\n          \"&:last-child\": {\n            pb: { xs: 2, sm: 2.5 }, // Override MUI default last-child padding\n          },\n        }}\n      >\n        {/* === TEAM NAME SECTION === */}\n        <Box\n          ref={containerRef}\n          sx={{\n            width: \"100%\",\n            overflow: \"hidden\", // Hide overflowing text\n            position: \"relative\",\n            mb: 1.5,\n            minHeight: \"clamp(1.2rem, 2.6vw, 1.44rem)\", // Reserve space for text\n          }}\n        >\n          <Typography\n            ref={textRef}\n            variant=\"h6\"\n            sx={{\n              fontSize: \"clamp(1rem, 2.2vw, 1.2rem)\", // Responsive font size\n              fontWeight: 600,\n              textAlign: \"center\",\n              color: \"text.primary\",\n              lineHeight: 1.2,\n              whiteSpace: \"nowrap\", // Prevent text wrapping\n\n              // === MARQUEE ANIMATION (conditional) ===\n              ...(shouldShowMarquee && {\n                animation: \"marqueeScroll 10s ease-in-out infinite\",\n                \"@keyframes marqueeScroll\": {\n                  \"0%\": {\n                    transform: \"translateX(0%)\", // Start at normal position\n                  },\n                  \"8%\": {\n                    transform: \"translateX(0%)\", // Short pause to read beginning (0.8s)\n                  },\n                  \"50%\": {\n                    transform: \"translateX(-100%)\", // Scroll to show end (4.2s movement)\n                  },\n                  \"85%\": {\n                    transform: \"translateX(-100%)\", // Long pause at end (3.5s pause)\n                  },\n                  \"100%\": {\n                    transform: \"translateX(0%)\", // Reset to start (1.5s transition)\n                  },\n                },\n              }),\n\n              // === STATIC TEXT OVERFLOW (when not animating) ===\n              ...(!shouldShowMarquee && {\n                overflow: \"hidden\",\n                textOverflow: \"ellipsis\", // Show \"...\" for overflowing text\n              }),\n            }}\n          >\n            {team.name}\n          </Typography>\n        </Box>\n\n        {/* === SCORE INPUT SECTION === */}\n        <Box\n          sx={{\n            width: \"100%\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            mb: 1.5,\n          }}\n        >\n          <TextField\n            size=\"small\"\n            type=\"text\"\n            inputMode=\"decimal\" // Mobile keyboard optimization\n            value={inputValue}\n            onChange={handleScoreChange}\n            onBlur={handleBlur}\n            onFocus={() => setIsFocused(true)}\n            error={hasError}\n            placeholder=\"0\" // Hint text instead of actual value\n            variant=\"outlined\"\n            sx={{\n              width: { xs: 80, sm: 90 }, // Compact input field\n              \"& .MuiOutlinedInput-root\": {\n                fontSize: \"clamp(1.1rem, 2.8vw, 1.4rem)\",\n                fontWeight: 600,\n                borderRadius: 2,\n                backgroundColor: hasError\n                  ? \"rgba(244, 67, 54, 0.04)\" // Light red for errors\n                  : \"rgba(25, 118, 210, 0.04)\", // Light blue for normal\n                transition: \"all 0.2s ease\",\n\n                \"& input\": {\n                  textAlign: \"center\", // Center-align score input\n                  py: { xs: 0.75, sm: 1 },\n                  px: { xs: 0.5, sm: 0.75 },\n                  color: hasError ? \"error.main\" : \"primary.main\",\n                  fontWeight: 600,\n                },\n\n                // === INPUT BORDER STYLING ===\n                \"& fieldset\": {\n                  borderColor: hasError\n                    ? \"error.main\"\n                    : \"rgba(25, 118, 210, 0.2)\",\n                  borderWidth: 1.5,\n                },\n                \"&:hover fieldset\": {\n                  borderColor: hasError ? \"error.main\" : \"primary.main\",\n                },\n                \"&.Mui-focused fieldset\": {\n                  borderColor: hasError ? \"error.main\" : \"primary.main\",\n                  borderWidth: 2, // Thicker border when focused\n                },\n              },\n            }}\n          />\n        </Box>\n\n        {/* === TOTAL SCORE SECTION === */}\n        <Typography\n          variant=\"body2\"\n          sx={{\n            fontSize: \"clamp(0.85rem, 1.8vw, 0.95rem)\",\n            fontWeight: 500,\n            color: \"text.secondary\",\n            textAlign: \"center\",\n            letterSpacing: \"0.5px\", // Slight letter spacing for readability\n          }}\n        >\n          Total:{\" \"}\n          <Box\n            component=\"span\"\n            sx={{\n              color: \"primary.main\", // Highlight the score value\n              fontWeight: 700,\n              fontSize: \"clamp(0.9rem, 2vw, 1.05rem)\",\n            }}\n          >\n            {formatScore(team.totalScore)}\n          </Box>\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n};\n","/**\n * Points Counter - Game Action Buttons Component\n *\n * Responsive action buttons for game management including leaderboard viewing,\n * copying results, editing teams, and ending games. Provides different layouts\n * for mobile and desktop with proper touch targets and accessibility.\n *\n * @fileoverview Game action buttons with responsive design patterns\n * @version 2.0.0\n * @since December 2025\n */\n\nimport React from \"react\";\nimport {\n  Box,\n  Button,\n  IconButton,\n  Tooltip,\n  useTheme,\n  useMediaQuery,\n} from \"@mui/material\";\nimport {\n  LeaderboardRounded as LeaderboardIcon,\n  ContentCopyRounded as CopyIcon,\n  EditRounded as EditIcon,\n  StopCircleRounded as EndGameIcon,\n} from \"@mui/icons-material\";\n\n/**\n * Props interface for GameActionButtons component\n */\ninterface GameActionButtonsProps {\n  /** Callback to show leaderboard modal */\n  onShowLeaderboard: () => void;\n  /** Callback to copy leaderboard to clipboard */\n  onCopyLeaderboard: () => void;\n  /** Callback to enter edit mode */\n  onEditTeams: () => void;\n  /** Callback to show end game confirmation */\n  onShowEndGameDialog: () => void;\n}\n\n/**\n * Game Action Buttons Component\n *\n * Provides responsive action buttons for game management with mobile-first design.\n * Uses different layouts and button types based on screen size for optimal UX.\n *\n * Mobile: Icon-only buttons with tooltips for space efficiency\n * Desktop: Full buttons with icons and text for clarity\n *\n * @param props - Component props with action callbacks\n * @returns Responsive action buttons layout\n */\nexport const GameActionButtons: React.FC<GameActionButtonsProps> = ({\n  onShowLeaderboard,\n  onCopyLeaderboard,\n  onEditTeams,\n  onShowEndGameDialog,\n}) => {\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down(\"sm\"));\n\n  // Mobile layout with icon buttons\n  if (isMobile) {\n    return (\n      <Box\n        sx={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          gap: 1,\n          width: \"100%\",\n        }}\n      >\n        {/* Leaderboard Button - Primary Action */}\n        <Tooltip title=\"View Leaderboard\" arrow>\n          <IconButton\n            onClick={onShowLeaderboard}\n            color=\"primary\"\n            sx={{\n              width: 48,\n              height: 48,\n              fontSize: 28,\n              p: 0,\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}\n            aria-label=\"View leaderboard\"\n          >\n            <LeaderboardIcon\n              fontSize=\"inherit\"\n              sx={{ lineHeight: 1, verticalAlign: \"middle\" }}\n            />\n          </IconButton>\n        </Tooltip>\n\n        {/* Copy Button - Secondary Action */}\n        <Tooltip title=\"Copy Results\" arrow>\n          <IconButton\n            onClick={onCopyLeaderboard}\n            color=\"info\"\n            sx={{\n              width: 48,\n              height: 48,\n              fontSize: 28,\n              p: 0,\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}\n            aria-label=\"Copy leaderboard to clipboard\"\n          >\n            <CopyIcon\n              fontSize=\"inherit\"\n              sx={{ lineHeight: 1, verticalAlign: \"middle\" }}\n            />\n          </IconButton>\n        </Tooltip>\n\n        {/* Edit Button - Secondary Action */}\n        <Tooltip title=\"Edit Teams\" arrow>\n          <IconButton\n            onClick={onEditTeams}\n            color=\"info\"\n            sx={{\n              width: 48,\n              height: 48,\n              fontSize: 28,\n              p: 0,\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}\n            aria-label=\"Edit teams and rounds\"\n          >\n            <EditIcon\n              fontSize=\"inherit\"\n              sx={{ lineHeight: 1, verticalAlign: \"middle\" }}\n            />\n          </IconButton>\n        </Tooltip>\n\n        {/* End Game Button - Destructive Action */}\n        <Tooltip title=\"End Game\" arrow>\n          <IconButton\n            onClick={onShowEndGameDialog}\n            color=\"error\"\n            sx={{\n              width: 48,\n              height: 48,\n              fontSize: 28,\n              p: 0,\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}\n            aria-label=\"End current game\"\n          >\n            <EndGameIcon\n              fontSize=\"inherit\"\n              sx={{ lineHeight: 1, verticalAlign: \"middle\" }}\n            />\n          </IconButton>\n        </Tooltip>\n      </Box>\n    );\n  }\n\n  // Desktop layout with full buttons\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        gap: { sm: 1.5, md: 2 },\n        flexWrap: \"wrap\",\n        width: \"100%\",\n      }}\n    >\n      {/* Leaderboard Button - Primary Action */}\n      <Button\n        variant=\"contained\"\n        startIcon={<LeaderboardIcon />}\n        onClick={onShowLeaderboard}\n        sx={{\n          fontSize: \"clamp(0.8rem, 1.5vw, 0.875rem)\",\n          px: { sm: 2, md: 3 },\n          py: 1,\n          borderRadius: 2,\n          textTransform: \"none\",\n          fontWeight: 600,\n        }}\n      >\n        Leaderboard\n      </Button>\n\n      {/* Copy Button - Secondary Action */}\n      <Button\n        variant=\"outlined\"\n        startIcon={<CopyIcon />}\n        onClick={onCopyLeaderboard}\n        color=\"info\"\n        sx={{\n          fontSize: \"clamp(0.8rem, 1.5vw, 0.875rem)\",\n          px: { sm: 2, md: 3 },\n          py: 1,\n          borderRadius: 2,\n          textTransform: \"none\",\n          fontWeight: 500,\n        }}\n      >\n        Copy\n      </Button>\n\n      {/* Edit Button - Secondary Action */}\n      <Button\n        variant=\"outlined\"\n        startIcon={<EditIcon />}\n        onClick={onEditTeams}\n        color=\"info\"\n        sx={{\n          fontSize: \"clamp(0.8rem, 1.5vw, 0.875rem)\",\n          px: { sm: 2, md: 3 },\n          py: 1,\n          borderRadius: 2,\n          textTransform: \"none\",\n          fontWeight: 500,\n        }}\n      >\n        Edit\n      </Button>\n\n      {/* End Game Button - Destructive Action */}\n      <Button\n        variant=\"outlined\"\n        startIcon={<EndGameIcon />}\n        onClick={onShowEndGameDialog}\n        color=\"error\"\n        sx={{\n          fontSize: \"clamp(0.8rem, 1.5vw, 0.875rem)\",\n          px: { sm: 2, md: 3 },\n          py: 1,\n          borderRadius: 2,\n          textTransform: \"none\",\n          fontWeight: 500,\n        }}\n      >\n        End Game\n      </Button>\n    </Box>\n  );\n};\n","/**\n * Leaderboard Component - v3.0.0\n *\n * Displays team rankings with beautiful card-based design\n * Features modern styling, position indicators, and responsive layout\n * Optimized for full-screen modal display with proper space utilization\n *\n * @fileoverview Modern leaderboard with enhanced visual design\n * @version 3.0.0 - Complete redesign for beauty and space efficiency\n * @since December 2025\n */\n\nimport React from \"react\";\nimport {\n  Box,\n  Typography,\n  List,\n  ListItem,\n  Card,\n  CardContent,\n  Avatar,\n  Chip,\n  Divider,\n} from \"@mui/material\";\nimport {\n  EmojiEvents as TrophyIcon,\n  Star as StarIcon,\n  TrendingUp as TrendingUpIcon,\n} from \"@mui/icons-material\";\nimport type { Team } from \"../../types\";\nimport { formatScore } from \"../../utils/gameUtils\";\n\n/**\n * Props for Leaderboard component\n */\ninterface LeaderboardProps {\n  teams: Team[];\n  currentRound: number;\n  totalRounds?: number; // Optional for backward compatibility\n  showDetails?: boolean;\n}\n\n/**\n * Leaderboard entry interface\n */\ninterface LeaderboardEntry {\n  position: number;\n  team: Team;\n  pointsFromFirst: number;\n  isLeader: boolean;\n}\n\n/**\n * Get position styling based on rank\n */\nconst getPositionStyling = (position: number) => {\n  switch (position) {\n    case 1:\n      return {\n        bgcolor: \"linear-gradient(135deg, #FFD700 0%, #FFA500 100%)\",\n        color: \"#000\",\n        icon: \"🥇\",\n        chipColor: \"warning\" as const,\n      };\n    case 2:\n      return {\n        bgcolor: \"linear-gradient(135deg, #C0C0C0 0%, #A9A9A9 100%)\",\n        color: \"#000\",\n        icon: \"🥈\",\n        chipColor: \"default\" as const,\n      };\n    case 3:\n      return {\n        bgcolor: \"linear-gradient(135deg, #CD7F32 0%, #A0522D 100%)\",\n        color: \"#fff\",\n        icon: \"🥉\",\n        chipColor: \"default\" as const,\n      };\n    default:\n      return {\n        bgcolor: \"background.paper\",\n        color: \"text.primary\",\n        icon: null,\n        chipColor: \"default\" as const,\n      };\n  }\n};\n\n/**\n * Leaderboard Component\n */\nexport const Leaderboard: React.FC<LeaderboardProps> = ({\n  teams,\n  currentRound,\n  totalRounds,\n  showDetails = false,\n}) => {\n  // Calculate leaderboard entries with rankings\n  const leaderboardEntries: LeaderboardEntry[] = React.useMemo(() => {\n    const sortedTeams = [...teams].sort((a, b) => b.totalScore - a.totalScore);\n    const topScore = sortedTeams[0]?.totalScore || 0;\n\n    return sortedTeams.map((team, index) => ({\n      position: index + 1,\n      team,\n      pointsFromFirst: topScore - team.totalScore,\n      isLeader: index === 0,\n    }));\n  }, [teams]);\n\n  // Determine round display text\n  const getRoundDisplayText = (): string => {\n    if (totalRounds && currentRound === totalRounds) {\n      return \"Final Round\";\n    }\n    return `Round ${currentRound}`;\n  };\n\n  if (teams.length === 0) {\n    return (\n      <Box\n        sx={{\n          textAlign: \"center\",\n          py: 8,\n          color: \"text.secondary\",\n        }}\n      >\n        <TrophyIcon sx={{ fontSize: 64, mb: 2, opacity: 0.5 }} />\n        <Typography variant=\"h6\">No teams to display</Typography>\n        <Typography variant=\"body2\">\n          Start adding teams to see the leaderboard\n        </Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <Box sx={{ width: \"100%\" }}>\n      {/* Stats Header */}\n      {showDetails && (\n        <Box\n          sx={{\n            display: \"flex\",\n            justifyContent: \"space-around\",\n            mb: 3,\n            p: 2,\n            bgcolor: \"rgba(25, 118, 210, 0.1)\",\n            borderRadius: 2,\n            border: \"1px solid rgba(25, 118, 210, 0.2)\",\n          }}\n        >\n          <Box sx={{ textAlign: \"center\" }}>\n            <Typography variant=\"h4\" color=\"primary\" fontWeight={700}>\n              {teams.length}\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Teams\n            </Typography>\n          </Box>\n          <Box sx={{ textAlign: \"center\" }}>\n            <Typography variant=\"h4\" color=\"primary\" fontWeight={700}>\n              {getRoundDisplayText()}\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Current Round\n            </Typography>\n          </Box>\n          <Box sx={{ textAlign: \"center\" }}>\n            <Typography variant=\"h4\" color=\"primary\" fontWeight={700}>\n              {formatScore(Math.max(...teams.map((t) => t.totalScore)))}\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Top Score\n            </Typography>\n          </Box>\n        </Box>\n      )}\n\n      {/* Teams List */}\n      <List sx={{ p: 0, gap: 2, display: \"flex\", flexDirection: \"column\" }}>\n        {leaderboardEntries.map((entry, index) => {\n          const styling = getPositionStyling(entry.position);\n\n          return (\n            <Card\n              key={entry.team.id}\n              sx={{\n                background:\n                  entry.position <= 3 ? styling.bgcolor : \"background.paper\",\n                border: entry.isLeader\n                  ? \"2px solid #1976d2\"\n                  : \"1px solid rgba(0,0,0,0.12)\",\n                borderRadius: 3,\n                overflow: \"visible\",\n                position: \"relative\",\n                transition: \"all 0.3s ease\",\n                \"&:hover\": {\n                  transform: \"translateY(-2px)\",\n                  boxShadow: \"0 8px 32px rgba(0,0,0,0.12)\",\n                },\n              }}\n            >\n              <CardContent sx={{ p: { xs: 2, sm: 3 } }}>\n                <Box\n                  sx={{\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    gap: { xs: 2, sm: 3 },\n                  }}\n                >\n                  {/* Position Avatar */}\n                  <Avatar\n                    sx={{\n                      width: { xs: 50, sm: 60 },\n                      height: { xs: 50, sm: 60 },\n                      bgcolor:\n                        entry.position <= 3\n                          ? \"rgba(255,255,255,0.9)\"\n                          : \"primary.main\",\n                      color: entry.position <= 3 ? \"#000\" : \"#fff\",\n                      fontSize: \"clamp(1.2rem, 3vw, 1.8rem)\",\n                      fontWeight: 700,\n                      border: entry.isLeader ? \"3px solid #1976d2\" : \"none\",\n                    }}\n                  >\n                    {styling.icon || entry.position}\n                  </Avatar>\n\n                  {/* Team Info */}\n                  <Box sx={{ flex: 1, minWidth: 0 }}>\n                    <Box\n                      sx={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        gap: 1,\n                        mb: 0.5,\n                      }}\n                    >\n                      <Typography\n                        variant=\"h6\"\n                        sx={{\n                          fontSize: \"clamp(1rem, 2.5vw, 1.3rem)\",\n                          fontWeight: entry.isLeader ? 700 : 600,\n                          color: styling.color,\n                          overflow: \"hidden\",\n                          textOverflow: \"ellipsis\",\n                          whiteSpace: \"nowrap\",\n                          flex: 1,\n                        }}\n                      >\n                        {entry.team.name}\n                      </Typography>\n\n                      {entry.isLeader && (\n                        <StarIcon\n                          sx={{\n                            color: \"#FFD700\",\n                            fontSize: \"clamp(1rem, 2.5vw, 1.2rem)\",\n                          }}\n                        />\n                      )}\n                    </Box>\n\n                    {/* Progress Info */}\n                    {showDetails && entry.pointsFromFirst > 0 && (\n                      <Typography\n                        variant=\"body2\"\n                        sx={{\n                          color: styling.color,\n                          opacity: 0.8,\n                          fontSize: \"clamp(0.75rem, 1.8vw, 0.85rem)\",\n                        }}\n                      >\n                        {formatScore(entry.pointsFromFirst)} behind leader\n                      </Typography>\n                    )}\n                  </Box>\n\n                  {/* Score Display */}\n                  <Box\n                    sx={{\n                      display: \"flex\",\n                      flexDirection: \"column\",\n                      alignItems: \"flex-end\",\n                      gap: 1,\n                    }}\n                  >\n                    <Chip\n                      label={formatScore(entry.team.totalScore)}\n                      color={entry.isLeader ? \"primary\" : styling.chipColor}\n                      variant={entry.isLeader ? \"filled\" : \"outlined\"}\n                      sx={{\n                        fontSize: \"clamp(0.9rem, 2vw, 1.1rem)\",\n                        fontWeight: 700,\n                        minWidth: { xs: 70, sm: 85 },\n                        height: { xs: 32, sm: 36 },\n                      }}\n                    />\n\n                    {showDetails && entry.team.totalScore > 0 && (\n                      <Box\n                        sx={{\n                          display: \"flex\",\n                          alignItems: \"center\",\n                          gap: 0.5,\n                          color: styling.color,\n                          opacity: 0.7,\n                        }}\n                      >\n                        <TrendingUpIcon sx={{ fontSize: 16 }} />\n                        <Typography variant=\"caption\">\n                          {Object.keys(entry.team.roundScores).length} rounds\n                        </Typography>\n                      </Box>\n                    )}\n                  </Box>\n                </Box>\n              </CardContent>\n\n              {/* Leader Badge */}\n              {entry.isLeader && (\n                <Box\n                  sx={{\n                    position: \"absolute\",\n                    top: -8,\n                    right: 16,\n                    bgcolor: \"#1976d2\",\n                    color: \"white\",\n                    px: 1.5,\n                    py: 0.5,\n                    borderRadius: 2,\n                    fontSize: \"0.75rem\",\n                    fontWeight: 600,\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    gap: 0.5,\n                    zIndex: 1,\n                  }}\n                >\n                  <TrophyIcon sx={{ fontSize: 14 }} />\n                  LEADER\n                </Box>\n              )}\n            </Card>\n          );\n        })}\n      </List>\n\n      {/* Footer Statistics */}\n      {showDetails && teams.length > 3 && (\n        <>\n          <Divider sx={{ my: 3 }} />\n          <Box\n            sx={{\n              textAlign: \"center\",\n              py: 2,\n              bgcolor: \"rgba(0,0,0,0.02)\",\n              borderRadius: 2,\n            }}\n          >\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              {teams.length} teams competing • {getRoundDisplayText()} • Total\n              points:{\" \"}\n              {formatScore(\n                teams.reduce((sum, team) => sum + team.totalScore, 0)\n              )}\n            </Typography>\n          </Box>\n        </>\n      )}\n    </Box>\n  );\n};\n","/**\n * Leaderboard Modal Component\n *\n * Full-screen modal for displaying the game leaderboard with responsive design\n * and copy-to-clipboard functionality.\n *\n * Extracted from GameScreen.tsx to improve maintainability and follow\n * the Single Responsibility Principle from development standards.\n *\n * Features:\n * - Responsive modal with full-screen on mobile, centered on desktop\n * - Beautiful gradient header with trophy emoji\n * - Round display with \"Final Round\" logic\n * - Scrollable content area for large leaderboards\n * - Copy to clipboard functionality\n * - Clean modern design with proper spacing\n *\n * @fileoverview Leaderboard modal component\n * @version 1.0.0\n * @since December 2025\n */\n\nimport React from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  Typography,\n  Button,\n  Box,\n  Chip,\n} from \"@mui/material\";\nimport { ContentCopy as CopyIcon } from \"@mui/icons-material\";\nimport { Leaderboard } from \"../Leaderboard/Leaderboard\";\n\n/**\n * Props for the LeaderboardModal component\n */\ninterface LeaderboardModalProps {\n  /** Whether the modal is open */\n  open: boolean;\n  /** Callback to close the modal */\n  onClose: () => void;\n  /** Array of teams with scores and round data */\n  teams: any[];\n  /** Currently active round number (1-based) */\n  currentRound: number;\n  /** Total number of rounds configured for this game */\n  totalRounds: number;\n  /** Callback to copy leaderboard to clipboard */\n  onCopyLeaderboard: () => void;\n}\n\n/**\n * Leaderboard Modal Component\n *\n * Displays the game leaderboard in a responsive modal dialog with\n * beautiful styling and copy functionality.\n */\nexport const LeaderboardModal: React.FC<LeaderboardModalProps> = ({\n  open,\n  onClose,\n  teams,\n  currentRound,\n  totalRounds,\n  onCopyLeaderboard,\n}) => {\n  /**\n   * Determine round display text for consistency with game screen\n   */\n  const getRoundDisplayText = (): string => {\n    if (currentRound === totalRounds) {\n      return \"Final Round\";\n    }\n    return `Round ${currentRound}`;\n  };\n\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      maxWidth={false} // Remove maxWidth constraint\n      fullWidth\n      PaperProps={{\n        sx: {\n          borderRadius: { xs: 0, sm: 3 }, // Full screen on mobile, rounded on desktop\n          maxHeight: { xs: \"100vh\", sm: \"90vh\" }, // Nearly full height\n          width: { xs: \"100vw\", sm: \"90vw\" }, // Nearly full width\n          maxWidth: { xs: \"100vw\", sm: \"800px\" }, // Cap maximum width on large screens\n          m: { xs: 0, sm: 2 }, // No margin on mobile, some on desktop\n          display: \"flex\",\n          flexDirection: \"column\",\n        },\n      }}\n    >\n      {/* Header Section */}\n      <Box\n        sx={{\n          background: \"linear-gradient(135deg, #1976d2 0%, #42a5f5 100%)\",\n          color: \"white\",\n          p: { xs: 2, sm: 3 },\n          borderRadius: { xs: 0, sm: \"12px 12px 0 0\" },\n          textAlign: \"center\",\n          flexShrink: 0, // Don't shrink header\n        }}\n      >\n        <Typography\n          variant=\"h4\"\n          sx={{\n            fontSize: \"clamp(1.5rem, 4vw, 2.2rem)\",\n            fontWeight: 700,\n            mb: 1,\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            gap: 1,\n          }}\n        >\n          🏆 Leaderboard\n        </Typography>\n\n        <Chip\n          label={getRoundDisplayText()}\n          sx={{\n            bgcolor: \"rgba(255,255,255,0.2)\",\n            color: \"white\",\n            fontWeight: 600,\n            fontSize: \"clamp(0.85rem, 1.8vw, 1rem)\",\n            border: \"1px solid rgba(255,255,255,0.3)\",\n          }}\n        />\n      </Box>\n\n      {/* Content Section - Scrollable */}\n      <DialogContent\n        sx={{\n          flex: 1, // Take remaining space\n          p: 0,\n          overflow: \"auto\", // Enable scrolling\n          \"&::-webkit-scrollbar\": {\n            width: \"8px\",\n          },\n          \"&::-webkit-scrollbar-track\": {\n            background: \"rgba(0,0,0,0.1)\",\n          },\n          \"&::-webkit-scrollbar-thumb\": {\n            background: \"rgba(0,0,0,0.3)\",\n            borderRadius: \"4px\",\n          },\n        }}\n      >\n        <Box sx={{ p: { xs: 2, sm: 3 } }}>\n          <Leaderboard\n            teams={teams}\n            currentRound={currentRound}\n            totalRounds={totalRounds}\n            showDetails={true}\n          />\n        </Box>\n      </DialogContent>\n\n      {/* Footer Actions */}\n      <Box\n        sx={{\n          flexShrink: 0, // Don't shrink footer\n          borderTop: \"1px solid\",\n          borderColor: \"divider\",\n          bgcolor: \"background.paper\",\n          p: { xs: 2, sm: 3 },\n          borderRadius: { xs: 0, sm: \"0 0 12px 12px\" },\n        }}\n      >\n        <Box\n          sx={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            gap: 2,\n            flexWrap: \"wrap\",\n          }}\n        >\n          <Button\n            variant=\"outlined\"\n            startIcon={<CopyIcon />}\n            onClick={onCopyLeaderboard}\n            sx={{\n              minWidth: { xs: \"120px\", sm: \"140px\" },\n              fontSize: \"clamp(0.85rem, 1.8vw, 0.95rem)\",\n            }}\n          >\n            Copy to Clipboard\n          </Button>\n          <Button\n            variant=\"contained\"\n            onClick={onClose}\n            sx={{\n              minWidth: { xs: \"120px\", sm: \"140px\" },\n              fontSize: \"clamp(0.85rem, 1.8vw, 0.95rem)\",\n            }}\n          >\n            Close\n          </Button>\n        </Box>\n      </Box>\n    </Dialog>\n  );\n};\n","/**\n * End Game Confirmation Dialog Component\n *\n * Modal dialog for confirming game termination with clear warning and actions.\n *\n * Extracted from GameScreen.tsx to improve maintainability and follow\n * the Single Responsibility Principle from development standards.\n *\n * Features:\n * - Clean confirmation interface with warning styling\n * - Centered layout and clear action buttons\n * - Error color theme for destructive action\n * - Accessible dialog with proper labeling\n *\n * @fileoverview End game confirmation dialog component\n * @version 1.0.0\n * @since December 2025\n */\n\nimport React from \"react\";\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Typography,\n  Button,\n} from \"@mui/material\";\n\n/**\n * Props for the EndGameConfirmDialog component\n */\ninterface EndGameConfirmDialogProps {\n  /** Whether the dialog is open */\n  open: boolean;\n  /** Callback to close the dialog */\n  onClose: () => void;\n  /** Callback to confirm game termination */\n  onConfirm: () => void;\n}\n\n/**\n * End Game Confirmation Dialog Component\n *\n * Displays a confirmation modal when user attempts to end the game,\n * providing clear warning about data loss and action buttons.\n */\nexport const EndGameConfirmDialog: React.FC<EndGameConfirmDialogProps> = ({\n  open,\n  onClose,\n  onConfirm,\n}) => {\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      maxWidth=\"sm\"\n      PaperProps={{\n        sx: { borderRadius: 2 },\n      }}\n    >\n      <DialogTitle\n        sx={{\n          textAlign: \"center\",\n          fontWeight: 600,\n          color: \"error.main\",\n        }}\n      >\n        End Game?\n      </DialogTitle>\n\n      <DialogContent>\n        <Typography\n          variant=\"body1\"\n          sx={{\n            textAlign: \"center\",\n            color: \"text.secondary\",\n            lineHeight: 1.6,\n          }}\n        >\n          Are you sure you want to end the current game? All progress will be\n          lost.\n        </Typography>\n      </DialogContent>\n\n      <DialogActions\n        sx={{\n          justifyContent: \"center\",\n          gap: 2,\n          p: 2,\n        }}\n      >\n        <Button variant=\"outlined\" onClick={onClose} sx={{ border: \"none\" }}>\n          Cancel\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"error\"\n          onClick={onConfirm}\n          sx={{ border: \"none\" }}\n        >\n          End Game\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n","/**\n * Game Screen Component - Active Quiz Game Interface\n *\n * Main interface for the active quiz game experience providing:\n * - Round navigation at the top for switching between quiz rounds\n * - Responsive team cards grid for score input and display\n * - Action buttons for game management (Leaderboard, Copy, Edit, End Game)\n * - Modal dialogs for leaderboard display and confirmation actions\n * - Error handling and user feedback\n *\n * Layout Structure:\n * - Fixed height container using calc(100vh - 100px) for browser compatibility\n * - Single card container following TeamSetup styling pattern\n * - Three-section layout: Navigation top, Team grid center, Actions bottom\n * - Mobile-responsive design with single-column on small screens\n *\n * Features:\n * - Decimal scoring support through team cards\n * - Real-time leaderboard calculations\n * - Copy-to-clipboard functionality for leaderboard sharing\n * - Edit mode for live game modifications\n * - Confirmation dialogs for destructive actions\n * - No borders/dividers anywhere for clean modern design\n *\n * @fileoverview Main game interface component for Points Counter\n * @version 2.0.0\n * @since December 2025\n */\n\nimport React, { useState } from \"react\";\nimport { Box, Typography, Alert } from \"@mui/material\";\nimport { RoundNavigation } from \"../RoundNavigation/RoundNavigation\";\nimport { TeamCard } from \"../TeamCard/TeamCard\";\nimport { GameActionButtons } from \"./GameActionButtons\";\nimport { LeaderboardModal } from \"./LeaderboardModal\";\nimport { EndGameConfirmDialog } from \"./EndGameConfirmDialog\";\n\n/**\n * Props Interface for GameScreen Component\n */\ninterface GameScreenProps {\n  /** Current game state ('ON' for active game) */\n  gameState: \"ON\" | \"OFF\";\n  /** Array of teams with scores and round data */\n  teams: any[];\n  /** Total number of rounds configured for this game */\n  rounds: number;\n  /** Currently active round number (1-based) */\n  currentRound: number;\n  /** Current error message if any */\n  error: string | null;\n  /** Calculated leaderboard with positions and rankings */\n  leaderboard: any[];\n  /** Callback for updating team scores with decimal support */\n  onScoreUpdate: (teamId: string, round: number, score: number) => void;\n  /** Callback for navigating between rounds */\n  onRoundChange: (round: number) => void;\n  /** Callback for entering edit mode */\n  onEditTeams: () => void;\n  /** Callback for ending the game */\n  onEndGame: () => void;\n  /** Callback for clearing error messages */\n  onClearError: () => void;\n}\n\n/**\n * Game Screen Component\n *\n * Renders the main game interface with responsive layout and modern design.\n * Handles all game interactions including scoring, navigation, and game management.\n *\n * Usage Example:\n * ```tsx\n * <GameScreen\n *   gameState=\"ON\"\n *   teams={teams}\n *   rounds={5}\n *   currentRound={2}\n *   leaderboard={leaderboard}\n *   onScoreUpdate={(teamId, round, score) => updateScore(teamId, round, score)}\n *   onRoundChange={setCurrentRound}\n *   onEditTeams={enterEditMode}\n *   onEndGame={endGame}\n *   error={null}\n *   onClearError={clearError}\n * />\n * ```\n */\nexport const GameScreen: React.FC<GameScreenProps> = ({\n  teams,\n  rounds,\n  currentRound,\n  error,\n  leaderboard,\n  onScoreUpdate,\n  onRoundChange,\n  onEditTeams,\n  onEndGame,\n  onClearError,\n}) => {\n  // === MODAL STATE ===\n  /** Controls leaderboard modal visibility */\n  const [showLeaderboard, setShowLeaderboard] = useState(false);\n  /** Controls end game confirmation dialog visibility */\n  const [showEndGameDialog, setShowEndGameDialog] = useState(false);\n\n  /**\n   * Copy Leaderboard to Clipboard\n   *\n   * Formats current leaderboard as plain text and copies to clipboard.\n   * Provides user feedback through console logging.\n   * Falls back gracefully if clipboard API is not available.\n   */\n  const handleCopyLeaderboard = async () => {\n    try {\n      // Format leaderboard as plain text\n      const leaderboardText = leaderboard\n        .map(\n          (entry, index) =>\n            `${index + 1}. ${entry.team.name} - ${entry.team.totalScore} points`\n        )\n        .join(\"\\n\");\n\n      // Attempt to copy to clipboard\n      await navigator.clipboard.writeText(leaderboardText);\n      console.log(\"Leaderboard copied to clipboard\");\n    } catch (error) {\n      console.warn(\"Failed to copy leaderboard to clipboard:\", error);\n    }\n  };\n\n  /**\n   * Handle End Game Action\n   *\n   * Closes confirmation dialog and triggers game end callback.\n   * Provides clean separation between UI state and business logic.\n   */\n  const handleEndGame = () => {\n    setShowEndGameDialog(false);\n    onEndGame();\n  };\n\n  return (\n    <Box\n      sx={{\n        // === PAGE LAYOUT ===\n        // Account for browser chrome - Same height pattern as TeamSetup\n        height: \"calc(100vh - 100px)\",\n        minHeight: \"480px\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"flex-start\",\n        bgcolor: \"background.default\",\n        px: { xs: 1, sm: 2 },\n        py: { xs: 1, sm: 2 },\n      }}\n    >\n      {/* === MAIN CARD CONTAINER === */}\n      <Box\n        sx={{\n          width: \"100%\",\n          maxWidth: \"clamp(280px, 90vw, 1200px)\", // Same maxWidth pattern as TeamSetup\n          height: \"100%\",\n          display: \"flex\",\n          flexDirection: \"column\",\n        }}\n      >\n        <Box\n          sx={{\n            flex: 1,\n            display: \"flex\",\n            flexDirection: \"column\",\n            bgcolor: \"background.paper\",\n            borderRadius: 3,\n            boxShadow: 3,\n            overflow: \"hidden\",\n          }}\n        >\n          {/* === ERROR ALERT SECTION === */}\n          {error && (\n            <Box sx={{ px: { xs: 2, sm: 3 }, pt: { xs: 1.5, sm: 2 }, pb: 0.5 }}>\n              <Alert\n                severity=\"error\"\n                onClose={onClearError}\n                sx={{\n                  fontSize: \"clamp(0.8rem, 1.5vw, 0.875rem)\",\n                  borderRadius: 2,\n                  \"& .MuiAlert-message\": {\n                    display: \"flex\",\n                    alignItems: \"center\",\n                  },\n                }}\n              >\n                {error}\n              </Alert>\n            </Box>\n          )}\n\n          {/* === ROUND NAVIGATION SECTION === */}\n          {/* Direct in main card - no wrapper Box for clean design */}\n          <Box\n            sx={{\n              flexShrink: 0,\n              p: { xs: 1, sm: 2 }, // TeamSetup padding pattern\n              pb: \"clamp(0.25rem, 1vw, 0.75rem)\", // TeamSetup bottom padding\n            }}\n          >\n            <RoundNavigation\n              currentRound={currentRound}\n              totalRounds={rounds}\n              onRoundChange={onRoundChange}\n            />\n          </Box>\n\n          {/* === TEAMS GRID SECTION === */}\n          <Box\n            sx={{\n              flex: 1,\n              px: { xs: 1, sm: 2 },\n              pb: { xs: 1, sm: 2 },\n              display: \"flex\",\n              flexDirection: \"column\",\n              alignItems: \"center\",\n              overflow: \"auto\",\n            }}\n          >\n            {teams.length > 0 ? (\n              <Box\n                sx={{\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                  alignItems: \"center\",\n                  gap: { xs: 2, sm: 3 },\n                  width: \"100%\",\n                  // === RESPONSIVE GRID LAYOUT ===\n                  // Mobile: Single column, centered cards\n                  // Desktop: Multi-column grid layout\n                  \"@media (min-width: 600px)\": {\n                    display: \"grid\",\n                    gridTemplateColumns: {\n                      sm: \"repeat(2, 1fr)\", // 2 columns on small screens\n                      md: \"repeat(3, 1fr)\", // 3 columns on medium screens\n                      lg: \"repeat(4, 1fr)\", // 4 columns on large screens\n                    },\n                    justifyItems: \"center\",\n                    alignItems: \"stretch\",\n                  },\n                }}\n              >\n                {teams.map((team) => (\n                  <TeamCard\n                    key={team.id}\n                    team={team}\n                    currentRound={currentRound}\n                    onScoreUpdate={onScoreUpdate}\n                  />\n                ))}\n              </Box>\n            ) : (\n              <Box\n                sx={{\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                  alignItems: \"center\",\n                  height: \"100%\",\n                }}\n              >\n                <Typography\n                  variant=\"body1\"\n                  color=\"text.secondary\"\n                  sx={{ fontStyle: \"italic\" }}\n                >\n                  No teams configured\n                </Typography>\n              </Box>\n            )}\n          </Box>\n\n          {/* === ACTION BUTTONS SECTION === */}\n          <GameActionButtons\n            onShowLeaderboard={() => setShowLeaderboard(true)}\n            onCopyLeaderboard={handleCopyLeaderboard}\n            onEditTeams={onEditTeams}\n            onShowEndGameDialog={() => setShowEndGameDialog(true)}\n          />\n        </Box>\n      </Box>\n\n      {/* === MODALS === */}\n      <LeaderboardModal\n        open={showLeaderboard}\n        onClose={() => setShowLeaderboard(false)}\n        teams={teams}\n        currentRound={currentRound}\n        totalRounds={rounds}\n        onCopyLeaderboard={handleCopyLeaderboard}\n      />\n\n      <EndGameConfirmDialog\n        open={showEndGameDialog}\n        onClose={() => setShowEndGameDialog(false)}\n        onConfirm={handleEndGame}\n      />\n    </Box>\n  );\n};\n","/**\n * Points Counter Main Page\n * \n * Main page component that orchestrates the complete Points Counter experience.\n * Manages game flow between team setup and active game screens with ON/OFF state logic.\n * \n * @fileoverview Main Points Counter page component\n * @version 2.0.0\n * @since December 2025\n */\n\n// React imported via JSX transformation\nimport { Box, CircularProgress, Alert } from '@mui/material';\nimport { usePointsCounter } from '../hooks/usePointsCounter';\nimport { TeamSetup } from '../components/TeamSetup/TeamSetup';\nimport { GameScreen } from '../components/GameScreen/GameScreen';\nimport type { Team } from '../types';\nimport { useCallback, useState } from 'react';\n\n/**\n * Points Counter Main Page Component\n * Orchestrates the complete quiz scoring experience with ON/OFF state management\n */\nexport default function PointsCounter() {\n  const {\n    gameStatus,\n    isLoading,\n    error,\n    updateTeamScore,\n    setCurrentRound,\n    clearError,\n    startGame,\n    endGame,\n    enterEditMode,\n    updateGameSetup,\n    clearAllData,\n    teams,\n    rounds,\n    currentRound,\n    leaderboard,\n  } = usePointsCounter();\n\n  const [showSetup, setShowSetup] = useState(false);\n\n  /**\n   * Handles starting a new game with configured teams\n   */\n  const handleStartGame = useCallback((teams: Team[], rounds: number) => {\n    startGame(teams, rounds);\n    setShowSetup(false); // Hide setup after starting\n  }, [startGame]);\n\n  /**\n   * Handles updating game setup in edit mode\n   */\n  const handleUpdateGameSetup = useCallback((teams: Team[], rounds: number) => {\n    updateGameSetup(teams, rounds);\n    setShowSetup(false); // Return to game screen after update\n  }, [updateGameSetup]);\n\n  /**\n   * Handles entering edit mode\n   */\n  const handleEditTeams = useCallback(() => {\n    enterEditMode();\n    setShowSetup(true); // Show setup screen for editing\n  }, [enterEditMode]);\n\n  /**\n   * Handles ending the game and clearing all data\n   */\n  const handleEndGame = useCallback(() => {\n    endGame();\n    setShowSetup(false); // Return to fresh setup\n  }, [endGame]);\n\n  /**\n   * Handles clearing all data\n   */\n  const handleClearAllData = useCallback(() => {\n    clearAllData();\n    setShowSetup(false); // Return to fresh setup\n  }, [clearAllData]);\n\n  // Loading state\n  if (isLoading) {\n    return (\n      <Box\n        sx={{\n          // Account for browser chrome - Same as RTG\n          height: 'calc(100vh - 100px)',\n          minHeight: '480px',\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          flexDirection: 'column',\n          gap: 2,\n          bgcolor: 'background.default',\n        }}\n      >\n        <CircularProgress size={40} />\n        <Box sx={{ textAlign: 'center', color: 'text.secondary' }}>\n          Loading Points Counter...\n        </Box>\n      </Box>\n    );\n  }\n\n  // Error state - only show if no specific screen is handling the error\n  if (error && !showSetup && gameStatus === 'OFF') {\n    return (\n      <Box\n        sx={{\n          // Account for browser chrome - Same as RTG\n          height: 'calc(100vh - 100px)',\n          minHeight: '480px',\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          px: 2,\n          bgcolor: 'background.default',\n        }}\n      >\n        <Alert\n          severity=\"error\"\n          onClose={clearError}\n          sx={{\n            maxWidth: 400,\n            '& .MuiAlert-message': {\n              fontSize: 'clamp(0.9rem, 2vw, 1rem)',\n            },\n          }}\n        >\n          {error}\n        </Alert>\n      </Box>\n    );\n  }\n\n  // Determine what to show based on game status and user navigation\n  const shouldShowSetup = gameStatus === 'OFF' || showSetup;\n\n  // Show setup screen for new games (OFF) or when editing (ON + showSetup)\n  if (shouldShowSetup) {\n    return (\n      <TeamSetup\n        gameStatus={gameStatus}\n        onStartGame={handleStartGame}\n        onUpdateSetup={gameStatus === 'ON' ? handleUpdateGameSetup : undefined}\n        onClearAllData={handleClearAllData}\n        isLoading={isLoading}\n        error={error}\n        existingTeams={gameStatus === 'ON' ? teams : undefined}\n        existingRounds={gameStatus === 'ON' ? rounds : undefined}\n      />\n    );\n  }\n\n  // Show active game screen when game is ON and not in edit mode\n  if (gameStatus === 'ON') {\n    return (\n      <GameScreen\n        gameState={gameStatus} // Pass gameStatus as gameState for compatibility\n        teams={teams}\n        rounds={rounds}\n        currentRound={currentRound}\n        error={error}\n        leaderboard={leaderboard}\n        onScoreUpdate={updateTeamScore}\n        onRoundChange={setCurrentRound}\n        onEditTeams={handleEditTeams}\n        onEndGame={handleEndGame}\n        onClearError={clearError}\n      />\n    );\n  }\n\n  // Fallback - should not reach here, but show setup as safe default\n  return (\n    <TeamSetup\n      gameStatus=\"OFF\"\n      onStartGame={handleStartGame}\n      onClearAllData={handleClearAllData}\n      isLoading={isLoading}\n      error={error}\n    />\n  );\n}\n"],"names":["FUNNY_TEAM_NAMES","GAME_CONSTANTS","calculateTeamTotalScore","team","total","score","roundScore","sortTeamsByScore","teams","a","b","createLeaderboard","sortedTeams","topScore","_a","index","isValidScore","formatScore","useGameState","gameStatus","setGameStatus","useState","setTeams","rounds","setRounds","currentRound","setCurrentRound","isLoading","setIsLoading","error","setError","clearError","useCallback","resetToInitialState","initializeState","leaderboard","useMemo","useGamePersistence","state","actions","loadPersistedState","storedData","STORAGE_KEYS","gameData","saveGameState","existingData","existing","useEffect","timeoutId","useGameActions","setStateCurrentRound","startGame","newTeams","newRounds","initializedTeams","roundScores","i","endGame","enterEditMode","updateGameSetup","updatedTeams","newTeam","existingTeam","t","updatedRoundScores","updateTeamScore","teamId","round","roundedScore","prevTeams","newTotalScore","clearAllData","usePointsCounter","stateActions","derived","gameActions","useTeamSetupForm","props","existingTeams","existingRounds","nextId","setNextId","roundCountInput","setRoundCountInput","clearDialogOpen","setClearDialogOpen","validationError","setValidationError","inputRefs","useRef","isNavigatingRef","roundCount","isEditMode","filledTeams","getPlaceholderNames","getPlaceholderText","teamInputs","singleTeam","validateSetup","handleInputChange","id","value","prev","handleKeyDown","event","currentIndex","currentTeam","nextIndex","nextTeam","nextInput","newInput","placeholderText","currentInput","textLength","handleRoundCountChange","removeTeam","TeamNumber","number","show","jsx","Box","TeamInputs","hasContent","displayNumber","showNumber","canDelete","jsxs","TextField","input","e","IconButton","CloseIcon","GameSettings","inputRef","showRoundsError","Typography","ActionButtons","onStartGame","onClearClick","getButtonText","Button","CircularProgress","StartIcon","theme","ClearIcon","ClearDataDialog","open","onClose","onConfirm","Dialog","DialogTitle","DialogContent","DialogActions","TeamSetup","onUpdateSetup","onClearAllData","derivedValues","roundsInputRef","React","handleStartGame","gameTeams","handleClearAll","getHeaderText","ArrowDownIcon","ArrowRightIcon","RoundNavigation","totalRounds","onRoundChange","handlePrevious","handleNext","PrevIcon","NextIcon","TeamCard","onScoreUpdate","inputValue","setInputValue","hasError","setHasError","isHovered","setIsHovered","isFocused","setIsFocused","textOverflows","setTextOverflows","textRef","containerRef","currentRoundScore","checkTextOverflow","textWidth","containerWidth","handleResize","handleScoreChange","numericValue","handleBlur","shouldShowMarquee","Card","CardContent","GameActionButtons","onShowLeaderboard","onCopyLeaderboard","onEditTeams","onShowEndGameDialog","useTheme","useMediaQuery","Tooltip","LeaderboardIcon","CopyIcon","EditIcon","EndGameIcon","getPositionStyling","position","Leaderboard","showDetails","leaderboardEntries","getRoundDisplayText","TrophyIcon","List","entry","styling","Avatar","StarIcon","Chip","TrendingUpIcon","Fragment","Divider","sum","LeaderboardModal","EndGameConfirmDialog","GameScreen","onEndGame","onClearError","showLeaderboard","setShowLeaderboard","showEndGameDialog","setShowEndGameDialog","handleCopyLeaderboard","leaderboardText","handleEndGame","Alert","PointsCounter","showSetup","setShowSetup","handleUpdateGameSetup","handleEditTeams","handleClearAllData"],"mappings":"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"}