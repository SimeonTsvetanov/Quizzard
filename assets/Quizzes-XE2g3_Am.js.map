{"version":3,"mappings":"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","names":["EXPORT_OPTIONS","PowerPointIcon","GoogleSlidesIcon","JSONIcon","ExportFormatDialog","open","quiz","onClose","onExport","handleExport","format","jsxs","Dialog","DialogTitle","DialogContent","jsx","Typography","List","option","ListItemButton","ListItemIcon","ListItemText","DialogActions","Button","QuizCard","onMenuOpen","onPreview","onEdit","exportDialogOpen","setExportDialogOpen","React","handlePreview","handleExportClick","handleExportFormat","handleEdit","handleMenuOpen","event","totalQuestions","_a","r","Grid","Zoom","Card","Box","CardContent","IconButton","MoreVertIcon","ScheduleIcon","CategoryIcon","QuizIcon","CardActions","Stack","PlayIcon","EditIcon","DownloadIcon","LoadingSkeleton","Fragment","item","Skeleton","EmptyState","onCreateQuiz","SchoolIcon","AddIcon","QuizGrid","quizzes","isLoading","renderQuizCards","WIZARD_STEPS","useWizardNavigation","validateCurrentStep","currentStep","setCurrentStep","useState","steps","useMemo","step","index","isCompleted","isCurrentAndValid","canProceed","nextStep","useCallback","previousStep","goToStep","stepIndex","resetNavigation","QUIZ_CONSTANTS","useWizardValidation","context","draftQuiz","validateBasicInfo","errors","warnings","_b","validateQuestions","round","rIdx","roundNum","question","qIdx","questionNum","questionRef","answer","possibleAnswersLength","_c","opt","validateReview","sum","validateStep","validateSpecificStep","validateAllSteps","allErrors","allWarnings","stepValidation","isCurrentStepValid","isWizardComplete","useWizardCompletion","clearDraft","calculateEstimatedDuration","rounds","baseDuration","complexityFactor","factor","avgQuestionLength","q","generateQuizId","timestamp","randomPart","createCompleteQuiz","now","isEditMode","settings","estimatedDuration","canComplete","getCompletionStatus","completeWizard","completedQuiz","error","isReady","DB_CONFIG","STORAGE_LIMITS","AUTO_SAVE_CONFIG","IndexedDBService","__publicField","resolve","reject","request","db","quizzesStore","mediaStore","storeNames","mode","operation","transaction","data","usage","quizSize","draft","draftWithTimestamp","store","id","quizzesResult","draftsResult","mediaResult","totalSize","remainingSpace","percentageUsed","cutoffDate","range","deletedCount","cursor","storeName","key","size","total","metadata","existingIndex","drafts","d","filteredQuizzes","filteredDrafts","quizzesData","draftsData","quizzesSize","draftsSize","localStorageLimit","indexedDBService","useQuizStorage","showSnackbar","useSnackbar","state","setState","autoSaveTimeoutRef","useRef","currentDraftRef","retryCountRef","initializeStorage","prev","initialized","saveQuiz","result","loadQuizzes","loadDrafts","refreshStorageUsage","deleteQuiz","saveDraft","deleteDraft","performAutoSave","enableAutoSave","disableAutoSave","cleanupOldDrafts","useEffect","DEFAULT_QUIZ_SETTINGS","DEFAULT_DRAFT_QUIZ","useWizardPersistenceWithStorage","initialQuiz","saveToStorage","deleteDraftFromStorage","autoSaveStatus","storageError","clearError","setDraftQuiz","isInitialized","setIsInitialized","lastSaved","setLastSaved","autoSaveTimerRef","draftIdRef","editDraft","existingDraft","newDraft","fallbackDraft","scheduleAutoSave","updateDraft","updates","resetDraft","initializeFromQuiz","recoverDraft","latestDraft","a","b","useQuizWizardWithStorage","persistenceActions","validationHook","navigationActions","updatedValidation","completionHook","resetWizard","ErrorBoundaryContext","createContext","initialState","ErrorBoundary","Component","props","_this$props$onReset","_this$props","_len","args","_key","info","_this$props$onError","_this$props2","prevProps","prevState","didCatch","resetKeys","hasArrayChanged","_this$props$onReset2","_this$props3","children","fallbackRender","FallbackComponent","fallback","childToRender","createElement","ROUND_TYPE_CONFIG","QUIZ_CATEGORIES","DIFFICULTY_LEVELS","BasicInfoStep","validation","onDeleteQuiz","onContinue","getFieldError","fieldName","timeValue","displayTime","timeForValidation","isTimeValid","timeError","TextField","e","FormControl","InputLabel","Select","category","MenuItem","FormHelperText","DifficultyIcon","level","Chip","val","InputAdornment","DeleteIcon","useQuestionsStepState","currentRoundIdx","setCurrentRoundIdx","roundModalOpen","setRoundModalOpen","roundModalMode","setRoundModalMode","editingRound","setEditingRound","roundForm","setRoundForm","manualDialogOpen","setManualDialogOpen","manualQuestion","setManualQuestion","editingQuestionId","setEditingQuestionId","aiDialogOpen","setAiDialogOpen","aiGenerating","setAiGenerating","aiStatus","setAiStatus","aiError","setAiError","aiErrorDismissed","setAiErrorDismissed","aiSettings","setAiSettings","deleteRoundConfirmOpen","setDeleteRoundConfirmOpen","deleteQuestionConfirmOpen","setDeleteQuestionConfirmOpen","pendingDeleteQuestionId","setPendingDeleteQuestionId","currentRound","isRoundFormValid","actions","field","value","questionId","RoundNavigation","onPreviousRound","onNextRound","onAddRound","onEditRound","onDeleteRound","hasRounds","canGoBack","canGoForward","Fab","ChevronLeftIcon","ChevronRightIcon","isQuestionComplete","roundType","QuestionsList","onEditQuestion","onDeleteQuestion","onAddQuestion","isComplete","CheckCircleIcon","WarningIcon","QuestionIcon","QuestionActionsBar","showActions","onOpenAIDialog","onOpenManualDialog","showAIButton","AIIcon","QuestionEditor","onUpdate","roundConfig","handleMediaUpload","file","validTypes","fileExtension","validExtensions","questionTypeKey","isValidMimeType","isValidExtension","_d","_e","sizeLimits","limitMB","reader","ev","mediaFile","updateOption","newOptions","addOption","removeOption","minOptions","_","i","newCorrectAnswers","answerIndex","toggleCorrectAnswer","currentCorrect","isCorrect","renderMediaUpload","isMediaQuestion","isMediaRound","mediaType","newType","type","FormControlLabel","Checkbox","lastRequestTime","requestCount","RATE_LIMIT_WINDOW","MAX_REQUESTS_PER_MINUTE","MIN_REQUEST_INTERVAL","checkRateLimit","timeUntilReset","timeSinceLastRequest","waitTime","wait","seconds","generateQuestionWithGemini","params","onStatusUpdate","rateLimitCheck","apiKey","requestBody","createEnhancedGeminiPrompt","response","errorData","generatedText","questionData","parseGeminiResponse","difficulty","language","previousQuestions","languageInstruction","categoryInstruction","difficultyInstruction","getEnhancedDifficultyInstruction","previousQuestionsContext","factCheckingInstruction","getFactCheckingInstruction","lowerCategory","text","jsonMatch","parsed","isGeminiAvailable","getRateLimitStatus","requestsRemaining","isNearLimit","generateAIQuizQuestion","createEmptyQuestion","geminiParams","mapQuizCategoryToGemini","convertQuizQuestionsToSession","finalQuestion","questionType","convertToQuizQuestion","errorMessage","optionsCount","baseQuestion","generateQuestionId","calculatePointsForDifficulty","distractors","generateDistractorOptions","allOptions","shuffledOptions","shuffleArray","correctAnswerIndex","correctAnswer","count","prompt","createDistractorPrompt","generateFallbackDistractors","parseDistractorsFromResponse","fallbackDistractors","expectedCount","line","num","questions","array","shuffled","j","_difficulty","isAIQuestionGenerationAvailable","getAIQuestionRateLimit","RoundsQuestionsStep","showValidation","derived","ROUND_TYPES","REVEAL_MODES","handleRoundSave","roundIndex","goldenPyramidQuestions","handleSaveRound","renderAIDialog","BrainIcon","Alert","CircularProgress","CloseIcon","ShortTextIcon","FormatListBulletedIcon","newQuestion","updatedRound","idx","openManualDialog","defaultQuestionType","questionDefaults","manualQuestionValid","handleAddRound","handleEditRound","getAvailableRoundTypes","self","t","requestDeleteRound","handleConfirmDeleteRound","newRounds","handleCancelDeleteRound","requestDeleteQuestion","handleConfirmDeleteQuestion","updatedQuestions","handleCancelDeleteQuestion","label","rt","rm","DialogContentText","QuizWizardModal","onQuizCreated","onCancel","editQuiz","onQuizDeleted","handleThemeChange","useTheme","showBasicInfo","setShowBasicInfo","showSaveDialog","setShowSaveDialog","showDeleteDialog","setShowDeleteDialog","isSubmitting","setIsSubmitting","isDeleting","setIsDeleting","isOpen","setIsOpen","totalRounds","canSave","handleClose","handleEditQuiz","content","handleSaveQuiz","handleConfirmSave","handleCancelSave","handleDeleteQuiz","handleConfirmDelete","__vitePreload","indexedDBService$1","handleCancelDelete","Fade","Header","SaveIcon","CheckIcon","TimerIcon","Divider","_f","_g","QuizActions","selectedQuiz","menuAnchorEl","editingQuiz","isWizardOpen","deleteConfirmOpen","pendingDeleteQuiz","onMenuClose","onEditQuiz","onExportQuiz","onRequestDeleteQuiz","onConfirmDeleteQuiz","onCancelDeleteQuiz","onWizardCancel","handleEditClick","handlePowerPointExport","handleSlidesExport","handleJSONExport","handleDeleteClick","Menu","StorageModal","storageUsage","draftsCount","onCleanupStorage","onRefreshStorage","theme","isMobile","useMediaQuery","showDeleteConfirm","setShowDeleteConfirm","formatSize","bytes","k","sizes","quizzesWithSizes","questionSize","titleSize","descSize","estimatedSize","handleCleanupClick","handleConfirmCleanup","handleCancelCleanup","usagePercentage","StorageIcon","ChartIcon","LinearProgress","ListItem","DraftIcon","CleanIcon","DEFAULT_EXPORT_SETTINGS","validateQuizForExport","useQuizExport","isExporting","setIsExporting","exportError","setExportError","exportToPowerPoint","validationError","PptxGenJS","__vite_default__","pptx","titleSlide","roundSlide","questionIndex","slide","questionNumber","optionLetter","correctAnswers","notes","mediaError","answerSlide","answerText","filename","err","exportToJSON","jsonData","blob","url","link","clearExportError","useQuizzesPageStateWithStorage","errorDismissed","setErrorDismissed","setIsWizardOpen","setEditingQuiz","setMenuAnchorEl","setSelectedQuiz","setDeleteConfirmOpen","setPendingDeleteQuiz","storageWarningDismissed","setStorageWarningDismissed","localError","setLocalError","dismissError","dismissStorageWarning","handleCreateQuiz","handleQuizCreated","message","handleWizardCancel","handleExportQuiz","handleMenuClose","handleRequestDeleteQuiz","handleConfirmDeleteQuiz","handleCancelDeleteQuiz","handleCleanupDrafts","handleRefreshStorage","Quizzes","storageModalOpen","setStorageModalOpen","refreshKey","setRefreshKey","forceRefresh","getFullQuizObject","quizId","handleExportWrapper","fullQuiz","handleEditWrapper","handleMenuOpenWrapper","allQuizzes","validCategories","sanitizeCategory","cat","sanitizeDifficulty","diff","sanitizeDuration","duration","sanitizeDate","date","sanitizeSettings","defaultSettings","settingsObj","sanitizeRounds","sanitizeTags","tags","tag","draftQuizzes","totalQuizCount","Container"],"ignoreList":[11],"sources":["../../src/features/quizzes/exporting/components/ExportFormatDialog/ExportFormatDialog.tsx","../../src/features/quizzes/management/components/QuizCard/QuizCard.tsx","../../src/features/quizzes/management/components/QuizGrid/QuizGrid.tsx","../../src/features/quizzes/creation-editing/hooks/useWizardNavigation.ts","../../src/features/quizzes/creation-editing/types/index.ts","../../src/features/quizzes/creation-editing/hooks/useWizardValidation.ts","../../src/features/quizzes/creation-editing/hooks/useWizardCompletion.ts","../../src/features/quizzes/management/services/indexedDBService.ts","../../src/features/quizzes/management/hooks/useQuizStorage.ts","../../src/features/quizzes/creation-editing/hooks/useWizardPersistenceWithStorage.ts","../../src/features/quizzes/creation-editing/hooks/useQuizWizardWithStorage.ts","../../node_modules/react-error-boundary/dist/react-error-boundary.js","../../src/features/quizzes/types/index.ts","../../src/features/quizzes/creation-editing/steps/BasicInfoStep.tsx","../../src/features/quizzes/creation-editing/steps/hooks/useQuestionsStepState.ts","../../src/features/quizzes/creation-editing/steps/components/RoundNavigation.tsx","../../src/features/quizzes/creation-editing/steps/components/QuestionsList.tsx","../../src/features/quizzes/creation-editing/steps/components/QuestionActionsBar.tsx","../../src/features/quizzes/creation-editing/steps/components/QuestionEditor.tsx","../../src/features/final-question/services/geminiService.ts","../../src/features/quizzes/services/aiQuestionService.ts","../../src/features/quizzes/creation-editing/steps/QuestionsStep.tsx","../../src/features/quizzes/creation-editing/components/QuizWizardModal/QuizWizardModal.tsx","../../src/features/quizzes/management/components/QuizActions/QuizActions.tsx","../../src/features/quizzes/management/components/StorageStatus/StorageModal.tsx","../../src/features/quizzes/exporting/hooks/useQuizExport.ts","../../src/features/quizzes/management/hooks/useQuizzesPageStateWithStorage.ts","../../src/features/quizzes/pages/Quizzes.tsx"],"sourcesContent":["/**\n * Export Format Dialog Component\n *\n * Provides a modal dialog for selecting the quiz export format.\n * Currently supports PowerPoint export with placeholder options for\n * Google Slides and JSON exports (to be implemented).\n *\n * Features:\n * - Format selection with icons\n * - Disabled state for unimplemented formats\n * - System native file save dialog integration\n * - Responsive design\n *\n * @fileoverview Quiz export format selection dialog\n * @version 1.0.0\n * @since December 2025\n */\n\nimport React from \"react\";\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  List,\n  ListItemButton,\n  ListItemIcon,\n  ListItemText,\n  Typography,\n} from \"@mui/material\";\nimport {\n  PowerSettingsNew as PowerPointIcon,\n  Slideshow as GoogleSlidesIcon,\n  Code as JSONIcon,\n} from \"@mui/icons-material\";\nimport type { Quiz } from \"../../../types\";\n\n/**\n * Props for the ExportFormatDialog component\n */\nexport interface ExportFormatDialogProps {\n  /** Whether the dialog is open */\n  open: boolean;\n  /** Quiz to be exported */\n  quiz: Quiz;\n  /** Callback when dialog should close */\n  onClose: () => void;\n  /** Callback when export format is selected */\n  onExport: (format: \"powerpoint\" | \"slides\" | \"json\") => void;\n}\n\n/**\n * Export format options configuration\n */\nconst EXPORT_OPTIONS = [\n  {\n    id: \"powerpoint\",\n    label: \"Export to PowerPoint\",\n    icon: PowerPointIcon,\n    disabled: false,\n    description: \"Export quiz as a PowerPoint presentation\",\n  },\n  {\n    id: \"slides\",\n    label: \"Export to Google Slides\",\n    icon: GoogleSlidesIcon,\n    disabled: true,\n    description: \"Export quiz as a Google Slides presentation (Coming Soon)\",\n  },\n  {\n    id: \"json\",\n    label: \"Export as JSON\",\n    icon: JSONIcon,\n    disabled: true,\n    description: \"Export quiz data in JSON format (Coming Soon)\",\n  },\n] as const;\n\n/**\n * ExportFormatDialog Component\n *\n * Renders a dialog for selecting the quiz export format with\n * visual feedback and disabled states for unavailable options.\n *\n * @param props - Component props\n * @returns JSX element representing the export format dialog\n */\nexport const ExportFormatDialog: React.FC<ExportFormatDialogProps> = ({\n  open,\n  quiz,\n  onClose,\n  onExport,\n}) => {\n  const handleExport = (format: \"powerpoint\" | \"slides\" | \"json\") => {\n    onExport(format);\n    onClose();\n  };\n\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      aria-labelledby=\"export-format-dialog-title\"\n      maxWidth=\"sm\"\n      fullWidth\n    >\n      <DialogTitle id=\"export-format-dialog-title\">\n        Export Quiz: {quiz.title}\n      </DialogTitle>\n      <DialogContent>\n        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n          Choose an export format below. Currently, only PowerPoint export is\n          available.\n        </Typography>\n        <List>\n          {EXPORT_OPTIONS.map((option) => (\n            <ListItemButton\n              key={option.id}\n              onClick={() => handleExport(option.id)}\n              disabled={option.disabled}\n            >\n              <ListItemIcon>\n                <option.icon />\n              </ListItemIcon>\n              <ListItemText\n                primary={option.label}\n                secondary={\n                  option.disabled ? \"(Coming Soon)\" : option.description\n                }\n              />\n            </ListItemButton>\n          ))}\n        </List>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Cancel</Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default ExportFormatDialog;\n","/**\n * Quiz Card Component\n *\n * Displays individual quiz information in a card format with metadata,\n * actions, and hover effects. Extracted from the monolithic Quizzes.tsx\n * to improve maintainability and follow Single Responsibility Principle.\n *\n * Features:\n * - Quiz metadata display (title, description, category, difficulty)\n * - Action buttons (Preview, Export)\n * - Menu actions (Edit, Export, Delete)\n * - Hover animations and responsive design\n * - Quiz statistics and duration\n *\n * @fileoverview Individual quiz card component\n * @version 1.0.0\n * @since December 2025\n */\n\nimport React from \"react\";\nimport {\n  Grid,\n  Card,\n  CardContent,\n  CardActions,\n  Typography,\n  Button,\n  IconButton,\n  Box,\n  Zoom,\n  Stack,\n} from \"@mui/material\";\nimport {\n  Quiz as QuizIcon,\n  PlayArrow as PlayIcon,\n  Download as DownloadIcon,\n  MoreVert as MoreVertIcon,\n  Schedule as ScheduleIcon,\n  Category as CategoryIcon,\n  Edit as EditIcon,\n} from \"@mui/icons-material\";\nimport { ExportFormatDialog } from \"../../../exporting/components\";\nimport type { Quiz } from \"../../types\";\n\n/**\n * Props for the QuizCard component\n */\nexport interface QuizCardProps {\n  /** Quiz data to display */\n  quiz: Quiz;\n  /** Callback when quiz menu is opened */\n  onMenuOpen: (event: React.MouseEvent<HTMLElement>, quiz: Quiz) => void;\n  /** Callback when quiz export is requested */\n  onExport: (quiz: Quiz, format: \"powerpoint\" | \"slides\" | \"json\") => void;\n  /** Callback when quiz preview is requested */\n  onPreview?: (quiz: Quiz) => void;\n  /** Callback when quiz edit is requested */\n  onEdit: (quiz: Quiz) => void;\n}\n\n/**\n * QuizCard Component\n *\n * Renders an individual quiz as a card with all relevant information\n * and action buttons. Includes hover effects and responsive design.\n *\n * @param props - Component props\n * @returns JSX element representing a quiz card\n */\nexport const QuizCard: React.FC<QuizCardProps> = ({\n  quiz,\n  onMenuOpen,\n  onExport,\n  onPreview,\n  onEdit,\n}) => {\n  const [exportDialogOpen, setExportDialogOpen] = React.useState(false);\n\n  /**\n   * Handles preview action with optional callback\n   */\n  const handlePreview = React.useCallback(() => {\n    if (onPreview) {\n      onPreview(quiz);\n    } else {\n      console.log(\"Preview quiz:\", quiz.id);\n    }\n  }, [quiz, onPreview]);\n\n  /**\n   * Handles export button click\n   */\n  const handleExportClick = React.useCallback(() => {\n    setExportDialogOpen(true);\n  }, []);\n\n  /**\n   * Handles export format selection\n   */\n  const handleExportFormat = React.useCallback(\n    (format: \"powerpoint\" | \"slides\" | \"json\") => {\n      onExport(quiz, format);\n    },\n    [quiz, onExport]\n  );\n\n  /**\n   * Handles edit action\n   */\n  const handleEdit = React.useCallback(() => {\n    onEdit(quiz);\n  }, [quiz, onEdit]);\n\n  /**\n   * Handles menu opening\n   */\n  const handleMenuOpen = React.useCallback(\n    (event: React.MouseEvent<HTMLElement>) => {\n      onMenuOpen(event, quiz);\n    },\n    [quiz, onMenuOpen]\n  );\n\n  const totalQuestions = React.useMemo(() => {\n    return quiz.rounds?.flatMap((r) => r?.questions || []).length || 0;\n  }, [quiz.rounds]);\n\n  return (\n    <Grid size={{ xs: 12, sm: 6, md: 4 }} key={quiz.id}>\n      <Zoom in timeout={300}>\n        <Card\n          elevation={2}\n          sx={{\n            height: \"100%\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"space-between\",\n            transition: \"all 0.3s ease\",\n            \"&:hover\": {\n              elevation: 4,\n              transform: \"translateY(-2px)\",\n            },\n          }}\n        >\n          <Box>\n            <CardContent sx={{ pb: 1 }}>\n              <Box\n                display=\"flex\"\n                justifyContent=\"space-between\"\n                alignItems=\"center\"\n                mb={1}\n              >\n                <Typography\n                  variant=\"h5\"\n                  component=\"h3\"\n                  fontWeight=\"bold\"\n                  noWrap\n                >\n                  {quiz.title || \"Untitled Quiz\"}\n                </Typography>\n                <IconButton\n                  size=\"small\"\n                  onClick={handleMenuOpen}\n                  aria-label=\"More options\"\n                >\n                  <MoreVertIcon />\n                </IconButton>\n              </Box>\n\n              <Typography\n                variant=\"body2\"\n                color=\"text.secondary\"\n                sx={{\n                  mb: 2,\n                  height: \"40px\",\n                  display: \"-webkit-box\",\n                  WebkitLineClamp: 2,\n                  WebkitBoxOrient: \"vertical\",\n                  overflow: \"hidden\",\n                  textOverflow: \"ellipsis\",\n                }}\n              >\n                {quiz.description || \"No description provided.\"}\n              </Typography>\n\n              <Box\n                display=\"flex\"\n                alignItems=\"center\"\n                gap={2}\n                color=\"text.secondary\"\n              >\n                <Box display=\"flex\" alignItems=\"center\" gap={0.5}>\n                  <ScheduleIcon fontSize=\"small\" />\n                  <Typography variant=\"caption\">\n                    {quiz.estimatedDuration || \"10\"} min\n                  </Typography>\n                </Box>\n                <Box display=\"flex\" alignItems=\"center\" gap={0.5}>\n                  <CategoryIcon fontSize=\"small\" />\n                  <Typography variant=\"caption\">\n                    {quiz.rounds?.length || 0} Rounds\n                  </Typography>\n                </Box>\n                <Box display=\"flex\" alignItems=\"center\" gap={0.5}>\n                  <QuizIcon fontSize=\"small\" />\n                  <Typography variant=\"caption\">\n                    {totalQuestions} Questions\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Box>\n\n          <CardActions sx={{ p: 2, pt: 1 }}>\n            <Stack direction=\"row\" spacing={1} width=\"100%\">\n              <Button\n                variant=\"contained\"\n                size=\"medium\"\n                startIcon={<PlayIcon />}\n                onClick={handlePreview}\n                sx={{ flex: 1 }}\n              >\n                Play\n              </Button>\n              <Button\n                variant=\"outlined\"\n                size=\"medium\"\n                startIcon={<EditIcon />}\n                onClick={handleEdit}\n                sx={{ flex: 1 }}\n              >\n                Edit\n              </Button>\n              <Button\n                variant=\"outlined\"\n                size=\"medium\"\n                startIcon={<DownloadIcon />}\n                onClick={handleExportClick}\n                sx={{ flex: 1 }}\n              >\n                Export\n              </Button>\n            </Stack>\n          </CardActions>\n        </Card>\n      </Zoom>\n\n      {/* Export Format Dialog */}\n      <ExportFormatDialog\n        open={exportDialogOpen}\n        quiz={quiz}\n        onClose={() => setExportDialogOpen(false)}\n        onExport={handleExportFormat}\n      />\n    </Grid>\n  );\n};\n\nexport default QuizCard;\n","/**\n * Quiz Grid Component\n *\n * Handles the display of quizzes in a responsive grid layout with loading\n * and empty states. Extracted from the monolithic Quizzes.tsx to improve\n * maintainability and follow Single Responsibility Principle.\n *\n * Features:\n * - Responsive grid layout\n * - Loading skeleton animation\n * - Empty state with call-to-action\n * - Quiz card integration\n *\n * @fileoverview Quiz grid layout and state management\n * @version 1.0.0\n * @since December 2025\n */\n\nimport React from \"react\";\nimport {\n  Grid,\n  Card,\n  CardContent,\n  Typography,\n  Button,\n  Skeleton,\n  Box,\n} from \"@mui/material\";\nimport { Add as AddIcon, School as SchoolIcon } from \"@mui/icons-material\";\nimport { QuizCard } from \"../QuizCard\";\nimport type { Quiz } from \"../../types\";\nimport type { QuizCardProps } from \"../QuizCard\";\n\n/**\n * Props for the QuizGrid component\n */\nexport interface QuizGridProps {\n  /** Array of quizzes to display */\n  quizzes: Quiz[];\n  /** Loading state indicator */\n  isLoading: boolean;\n  /** Callback when create quiz is requested */\n  onCreateQuiz: () => void;\n  /** Callback when quiz menu is opened */\n  onMenuOpen: QuizCardProps[\"onMenuOpen\"];\n  /** Callback when quiz export is requested */\n  onExport: QuizCardProps[\"onExport\"];\n  /** Callback when quiz preview is requested */\n  onPreview?: QuizCardProps[\"onPreview\"];\n  /** Callback when quiz edit is requested */\n  onEdit: QuizCardProps[\"onEdit\"];\n}\n\n/**\n * Renders loading skeleton for quiz cards\n *\n * @returns JSX elements representing loading skeleton cards\n */\nconst LoadingSkeleton: React.FC = () => (\n  <>\n    {[1, 2, 3].map((item) => (\n      <Grid size={{ xs: 12, sm: 6, md: 4 }} key={item}>\n        <Card elevation={1}>\n          <CardContent>\n            <Box\n              display=\"flex\"\n              justifyContent=\"space-between\"\n              alignItems=\"flex-start\"\n              mb={2}\n            >\n              <Skeleton variant=\"circular\" width={48} height={48} />\n              <Skeleton variant=\"circular\" width={24} height={24} />\n            </Box>\n            <Skeleton variant=\"text\" sx={{ fontSize: \"1.2rem\", mb: 1 }} />\n            <Skeleton variant=\"text\" height={40} sx={{ mb: 2 }} />\n            <Box display=\"flex\" gap={1} mb={2}>\n              <Skeleton variant=\"rounded\" width={60} height={24} />\n              <Skeleton variant=\"rounded\" width={80} height={24} />\n              <Skeleton variant=\"rounded\" width={40} height={24} />\n            </Box>\n            <Box display=\"flex\" justifyContent=\"space-between\">\n              <Skeleton variant=\"text\" width={100} />\n              <Skeleton variant=\"text\" width={60} />\n            </Box>\n          </CardContent>\n        </Card>\n      </Grid>\n    ))}\n  </>\n);\n\n/**\n * Renders empty state when no quizzes exist\n *\n * @param onCreateQuiz - Callback when create quiz button is clicked\n * @returns JSX element representing empty state\n */\nconst EmptyState: React.FC<{ onCreateQuiz: () => void }> = ({\n  onCreateQuiz,\n}) => (\n  <Grid size={{ xs: 12 }}>\n    <Card\n      elevation={0}\n      sx={{\n        textAlign: \"center\",\n        py: 8,\n        bgcolor: \"background.default\",\n        border: \"2px dashed\",\n        borderColor: \"divider\",\n      }}\n    >\n      <CardContent>\n        <SchoolIcon sx={{ fontSize: 64, color: \"text.secondary\", mb: 2 }} />\n        <Typography variant=\"h5\" gutterBottom>\n          Create Your First Quiz\n        </Typography>\n        <Typography variant=\"body1\" color=\"text.secondary\" paragraph>\n          Get started by creating an interactive quiz with questions, answers,\n          and media. Export to PowerPoint when you're ready to present!\n        </Typography>\n        <Button\n          variant=\"contained\"\n          size=\"large\"\n          startIcon={<AddIcon />}\n          onClick={onCreateQuiz}\n          sx={{ mt: 2 }}\n        >\n          Create Quiz\n        </Button>\n      </CardContent>\n    </Card>\n  </Grid>\n);\n\n/**\n * QuizGrid Component\n *\n * Renders quizzes in a responsive grid layout with appropriate loading\n * and empty states. Manages the display logic for different states.\n *\n * @param props - Component props\n * @returns JSX element representing the quiz grid\n */\nexport const QuizGrid: React.FC<QuizGridProps> = ({\n  quizzes,\n  isLoading,\n  onCreateQuiz,\n  onMenuOpen,\n  onExport,\n  onPreview,\n  onEdit,\n}) => {\n  /**\n   * Renders individual quiz cards\n   */\n  const renderQuizCards = React.useCallback(() => {\n    return quizzes.map((quiz) => (\n      <QuizCard\n        key={quiz.id}\n        quiz={quiz}\n        onMenuOpen={onMenuOpen}\n        onExport={onExport}\n        onPreview={onPreview}\n        onEdit={onEdit}\n      />\n    ));\n  }, [quizzes, onMenuOpen, onExport, onPreview, onEdit]);\n\n  return (\n    <Grid container spacing={3}>\n      {isLoading ? (\n        <LoadingSkeleton />\n      ) : quizzes.length === 0 ? (\n        <EmptyState onCreateQuiz={onCreateQuiz} />\n      ) : (\n        renderQuizCards()\n      )}\n    </Grid>\n  );\n};\n\nexport default QuizGrid;\n","/**\n * Wizard Navigation Hook\n *\n * Focused hook for managing step-by-step navigation through the quiz creation wizard.\n * Handles step progression, validation-based transitions, and step accessibility logic.\n *\n * Extracted from useQuizWizard.ts to follow Single Responsibility Principle.\n * Manages only navigation concerns, leaving validation and data to other hooks.\n *\n * Features:\n * - Current step state management\n * - Step progression with validation checks\n * - Direct step navigation with accessibility controls\n * - Step completion and enablement logic\n * - Integration with validation system\n *\n * @fileoverview Navigation hook for quiz creation wizard\n * @version 1.0.0\n * @since December 2025\n */\n\nimport { useState, useCallback, useMemo } from \"react\";\nimport type { WizardStep, QuizValidation } from \"../types\";\n\n/**\n * Wizard step configuration defining the complete creation flow\n */\nconst WIZARD_STEPS: Omit<WizardStep, \"completed\" | \"active\" | \"enabled\">[] = [\n  {\n    id: \"basic-info\",\n    title: \"Quiz Information\",\n    description:\n      \"Set up basic quiz details like title, description, and category\",\n  },\n  {\n    id: \"questions\",\n    title: \"Add Questions\",\n    description: \"Create and manage your quiz questions with answers\",\n  },\n  {\n    id: \"review-create\",\n    title: \"Review & Create\",\n    description: \"Review your quiz and finalize creation.\",\n  },\n];\n\n/**\n * Navigation state interface\n */\nexport interface NavigationState {\n  /** Current step index (0-based) */\n  currentStep: number;\n  /** Array of wizard steps with completion states */\n  steps: WizardStep[];\n  /** Whether user can proceed to next step */\n  canProceed: boolean;\n}\n\n/**\n * Navigation actions interface\n */\nexport interface NavigationActions {\n  /** Move to next step (if valid) */\n  nextStep: () => void;\n  /** Move to previous step */\n  previousStep: () => void;\n  /** Jump to specific step (if enabled) */\n  goToStep: (stepIndex: number) => void;\n  /** Reset to first step */\n  resetNavigation: () => void;\n}\n\n/**\n * Hook return interface\n */\nexport interface UseWizardNavigationReturn {\n  /** Navigation state */\n  navigation: NavigationState;\n  /** Navigation actions */\n  actions: NavigationActions;\n}\n\n/**\n * Wizard Navigation Hook\n *\n * Manages the step-by-step navigation through the quiz creation wizard.\n * Provides validation-aware navigation that prevents users from advancing\n * without completing required fields in each step.\n *\n * @param validateCurrentStep - Function to validate the current step\n * @returns Navigation state and control functions\n */\nexport const useWizardNavigation = (\n  validateCurrentStep: () => QuizValidation\n): UseWizardNavigationReturn => {\n  // Current wizard step (0-based index)\n  const [currentStep, setCurrentStep] = useState(0);\n\n  /**\n   * Creates wizard steps with current completion and active states\n   * Determines which steps are accessible based on previous completions\n   */\n  const steps = useMemo((): WizardStep[] => {\n    return WIZARD_STEPS.map((step, index) => {\n      // Check if this step is completed by validating it\n      const isCompleted = index < currentStep;\n      const isCurrentAndValid =\n        index === currentStep && validateCurrentStep().isValid;\n\n      return {\n        ...step,\n        completed: isCompleted || isCurrentAndValid,\n        active: index === currentStep,\n        enabled: index <= currentStep || isCompleted,\n      };\n    });\n  }, [currentStep, validateCurrentStep]);\n\n  /**\n   * Determines if wizard can proceed to next step\n   * Based on current step validation\n   */\n  const canProceed = useMemo(() => {\n    const validation = validateCurrentStep();\n    return validation.isValid && currentStep < WIZARD_STEPS.length - 1;\n  }, [validateCurrentStep, currentStep]);\n\n  /**\n   * Moves to the next step in the wizard\n   * Only allowed if current step is valid\n   */\n  const nextStep = useCallback(() => {\n    const validation = validateCurrentStep();\n    if (validation.isValid && currentStep < WIZARD_STEPS.length - 1) {\n      setCurrentStep(currentStep + 1);\n    }\n  }, [currentStep, validateCurrentStep]);\n\n  /**\n   * Moves to the previous step in the wizard\n   * Always allowed unless on first step\n   */\n  const previousStep = useCallback(() => {\n    if (currentStep > 0) {\n      setCurrentStep(currentStep - 1);\n    }\n  }, [currentStep]);\n\n  /**\n   * Jumps directly to a specific step\n   * Only allowed if step is enabled (completed or accessible)\n   *\n   * @param stepIndex - Target step index (0-based)\n   */\n  const goToStep = useCallback(\n    (stepIndex: number) => {\n      if (stepIndex >= 0 && stepIndex < WIZARD_STEPS.length) {\n        const targetStep = steps[stepIndex];\n        if (targetStep.enabled) {\n          setCurrentStep(stepIndex);\n        }\n      }\n    },\n    [steps]\n  );\n\n  /**\n   * Resets navigation to the first step\n   * Used when starting a new wizard session\n   */\n  const resetNavigation = useCallback(() => {\n    setCurrentStep(0);\n  }, []);\n\n  // Build navigation state\n  const navigation: NavigationState = {\n    currentStep,\n    steps,\n    canProceed,\n  };\n\n  // Build navigation actions\n  const actions: NavigationActions = {\n    nextStep,\n    previousStep,\n    goToStep,\n    resetNavigation,\n  };\n\n  return {\n    navigation,\n    actions,\n  };\n};\n\n/**\n * Navigation constants for external use\n */\nexport const NAVIGATION_CONSTANTS = {\n  TOTAL_STEPS: WIZARD_STEPS.length,\n  STEP_IDS: WIZARD_STEPS.map((step) => step.id),\n  FIRST_STEP: 0,\n  LAST_STEP: WIZARD_STEPS.length - 1,\n} as const;\n","/**\n * Quizzes Feature Type Definitions\n *\n * This file contains all TypeScript interfaces and types used throughout\n * the Quizzes feature. Centralized type definitions ensure consistency\n * and maintainability across all components, hooks, and services.\n *\n * Updated for new round-based quiz system with media file support:\n * - IndexedDB storage for large files\n * - Round types determine question types\n * - Media file uploads (pictures, audio, video)\n * - Golden Pyramid special format\n * - Time/points as number inputs with decimal support\n * - Breaking time settings for rounds\n *\n * @fileoverview Type definitions for Quizzes feature\n * @version 2.0.0\n * @since December 2025\n */\n\n/**\n * Supported media types for quiz questions\n */\nexport type MediaType = \"image\" | \"audio\" | \"video\";\n\n/**\n * Quiz question type\n * - single-answer: Single correct answer (renamed from text-answer)\n * - multiple-choice: Multiple choice question with 1-20 possible answers\n * - picture: Picture-based question with file upload\n * - audio: Audio-based question with file upload\n * - video: Video-based question with file upload\n */\nexport type QuestionType =\n  | \"single-answer\"\n  | \"multiple-choice\"\n  | \"picture\"\n  | \"audio\"\n  | \"video\";\n\n/**\n * Supported round types for quiz creation\n * Round type determines available question types and UI behavior\n */\nexport type RoundType =\n  | \"mixed\" // Mixed question types (user can select any type)\n  | \"single-answer-only\" // Only single answer questions (renamed from text-only)\n  | \"multiple-choice\" // Only multiple choice questions\n  | \"picture\" // Only picture questions with image uploads\n  | \"audio\" // Only audio questions with audio uploads\n  | \"video\" // Only video questions with video uploads\n  | \"golden-pyramid\"; // Special 4-question format\n\n/**\n * Round answer reveal mode\n */\nexport type AnswerRevealMode = \"after-each\" | \"after-all\";\n\n/**\n * Quiz difficulty levels for organization and filtering\n */\nexport type QuizDifficulty = \"easy\" | \"medium\" | \"hard\";\n\n/**\n * Quiz categories for organization\n */\nexport type QuizCategory =\n  | \"general\"\n  | \"sports\"\n  | \"history\"\n  | \"science\"\n  | \"geography\"\n  | \"entertainment\"\n  | \"literature\"\n  | \"art\"\n  | \"music\"\n  | \"technology\"\n  | \"custom\";\n\n/**\n * Supported media file types for PowerPoint compatibility\n */\nexport interface SupportedMediaTypes {\n  images: string[]; // ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'tiff', 'svg']\n  audio: string[]; // ['mp3', 'wav', 'wma', 'm4a']\n  video: string[]; // ['mp4', 'mov', 'wmv', 'avi']\n}\n\n/**\n * File size limits for different media types (in bytes)\n */\nexport interface FileSizeLimits {\n  image: number; // 10MB max per image\n  audio: number; // 20MB max per audio file\n  video: number; // 100MB max per video file\n  total: number; // 500MB max total quiz size\n}\n\n/**\n * Media file metadata for storage and display\n */\nexport interface MediaFile {\n  /** Unique identifier for the media file */\n  id: string;\n  /** Original filename with extension */\n  filename: string;\n  /** File type (image/audio/video) */\n  type: \"image\" | \"audio\" | \"video\";\n  /** File size in bytes */\n  size: number;\n  /** Base64 encoded file data for storage */\n  data: string;\n  /** MIME type for proper handling */\n  mimeType: string;\n  /** Thumbnail for images/videos (base64) */\n  thumbnail?: string;\n  /** Duration for audio/video files in seconds */\n  duration?: number;\n  /** Upload timestamp */\n  createdAt: Date;\n}\n\n/**\n * Quiz question interface (updated for new system)\n */\nexport interface QuizQuestion {\n  /** Unique identifier for the question */\n  id: string;\n  /** Question type determines UI and behavior */\n  type: QuestionType;\n  /** The main question text */\n  question: string;\n  /** Possible answers for multiple choice (1-20 answers), empty for single-answer */\n  possibleAnswers: string[];\n  /** Array of correct answer indices for Golden Pyramid (1,2,3,4 correct answers per question) */\n  correctAnswers: number[];\n  /** Single correct answer text for single-answer questions */\n  correctAnswerText?: string;\n  /** Optional explanation shown after answer */\n  explanation?: string;\n  /** Associated media file if any */\n  mediaFile?: MediaFile;\n  /** Question difficulty for organization */\n  difficulty: QuizDifficulty;\n  /** Points awarded for correct answer (decimal support) */\n  points: number;\n  /** Time limit in minutes (decimal support, e.g., 0.5 = 30 seconds) */\n  timeLimit: number;\n  /** Creation timestamp */\n  createdAt: Date;\n  /** Last modified timestamp */\n  updatedAt: Date;\n}\n\n/**\n * Round structure containing questions and round-level settings\n */\nexport interface Round {\n  /** Unique identifier for the round */\n  id: string;\n  /** Display name for the round (e.g., \"Round 1\") */\n  name: string;\n  /** Optional round description */\n  description?: string;\n  /** Round type (determines question types allowed) */\n  type: RoundType;\n  /** Optional round level/difficulty label */\n  level?: string;\n  /** Answer reveal mode for this round */\n  answerRevealMode: AnswerRevealMode;\n  /** Default time per question in this round (in minutes, decimal support) */\n  defaultTimePerQuestion: number;\n  /** Breaking time between rounds in minutes (default 1) */\n  breakingTime: number;\n  /** For Golden Pyramid: time for entire round instead of per question */\n  roundTimeLimit?: number;\n  /** For Golden Pyramid: points for entire round instead of per question */\n  roundPoints?: number;\n  /** List of questions in this round */\n  questions: QuizQuestion[];\n  /** Creation timestamp */\n  createdAt: Date;\n  /** Last modified timestamp */\n  updatedAt: Date;\n}\n\n/**\n * Complete quiz structure containing all quiz data (updated for new system)\n */\nexport interface Quiz {\n  /** Unique identifier for the quiz */\n  id: string;\n  /** Quiz title displayed to users */\n  title: string;\n  /** Optional quiz description */\n  description?: string;\n  /** Quiz category for organization */\n  category: QuizCategory;\n  /** Overall quiz difficulty */\n  difficulty: QuizDifficulty;\n  /** Quiz status for workflow management */\n  status: \"draft\" | \"completed\";\n  /** Array of all rounds in the quiz */\n  rounds: Round[];\n  /** Total estimated duration in minutes (calculated from questions + breaks) */\n  estimatedDuration: number;\n  /** Quiz creation timestamp */\n  createdAt: Date;\n  /** Last modified timestamp */\n  updatedAt: Date;\n  /** Quiz settings */\n  settings: QuizSettings;\n  /** Export metadata */\n  exportData?: QuizExportData;\n}\n\n/**\n * Quiz settings\n */\nexport interface QuizSettings {\n  /** Default time limit per question in minutes (decimal support) */\n  defaultTimeLimit: number;\n  /** Default points per question (decimal support) */\n  defaultPoints: number;\n  /** Default breaking time between rounds in minutes */\n  defaultBreakingTime: number;\n}\n\n/**\n * Quiz export metadata\n */\nexport interface QuizExportData {\n  /** Last export timestamp */\n  lastExported: Date;\n  /** Export format used */\n  format: \"powerpoint\";\n  /** Export settings used */\n  settings: ExportSettings;\n  /** File size of last export in bytes */\n  fileSize: number;\n  /** Whether presenter notes were included */\n  includePresenterNotes: boolean;\n}\n\n/**\n * Export settings for PowerPoint generation\n */\nexport interface ExportSettings {\n  /** Include presenter notes with questions/answers */\n  includePresenterNotes: boolean;\n  /** Slide layout template to use */\n  slideTemplate: \"standard\" | \"modern\" | \"minimal\";\n  /** Font size for questions */\n  questionFontSize: number;\n  /** Font size for options */\n  optionFontSize: number;\n  /** Include quiz metadata slide */\n  includeMetadata: boolean;\n  /** Include answer key at the end */\n  includeAnswerKey: boolean;\n  /** Compress images for smaller file size */\n  compressImages: boolean;\n  /** Image quality (1-100) when compressing */\n  imageQuality: number;\n}\n\n/**\n * Wizard step definition\n */\nexport interface WizardStep {\n  /** Step identifier */\n  id: string;\n  /** Display title for the step */\n  title: string;\n  /** Step description */\n  description: string;\n  /** Whether this step is completed */\n  completed: boolean;\n  /** Whether this step is currently active */\n  active: boolean;\n  /** Whether this step is accessible */\n  enabled: boolean;\n}\n\n/**\n * Quiz validation result\n */\nexport interface QuizValidation {\n  /** Whether the quiz is valid for export/save */\n  isValid: boolean;\n  /** Array of validation error messages */\n  errors: string[];\n  /** Array of validation warning messages */\n  warnings: string[];\n  /** Validation timestamp */\n  validatedAt: Date;\n}\n\n/**\n * Quizzes page component props\n */\nexport interface QuizzesPageProps {\n  /** Optional initial quiz to load */\n  initialQuiz?: Quiz;\n}\n\n/**\n * Quiz wizard component props\n */\nexport interface QuizWizardProps {\n  /** Callback when quiz is successfully created */\n  onQuizCreated: (quiz: Quiz) => void;\n  /** Callback when wizard is cancelled */\n  onCancel: () => void;\n  /** Optional quiz to edit (for edit mode) */\n  editQuiz?: Quiz;\n}\n\n/**\n * Question editor component props\n */\nexport interface QuestionEditorProps {\n  /** Current question being edited */\n  question: QuizQuestion;\n  /** Callback when question is updated */\n  onQuestionUpdate: (question: QuizQuestion) => void;\n  /** Callback when question is deleted */\n  onQuestionDelete: (questionId: string) => void;\n  /** Index of question in the round */\n  questionIndex: number;\n  /** Total number of questions in round */\n  totalQuestions: number;\n  /** Round type to determine UI behavior */\n  roundType: RoundType;\n}\n\n/**\n * Media upload component props\n */\nexport interface MediaUploadProps {\n  /** Accepted file types */\n  acceptedTypes: string[];\n  /** Maximum file size in bytes */\n  maxFileSize: number;\n  /** Callback when file is uploaded */\n  onFileUpload: (file: MediaFile) => void;\n  /** Callback when upload fails */\n  onUploadError: (error: string) => void;\n  /** Current uploaded file (if any) */\n  currentFile?: MediaFile;\n  /** File type being uploaded */\n  fileType: \"image\" | \"audio\" | \"video\";\n}\n\n/**\n * Export options component props\n */\nexport interface ExportOptionsProps {\n  /** Quiz to export */\n  quiz: Quiz;\n  /** Export settings */\n  settings: ExportSettings;\n  /** Callback when settings change */\n  onSettingsChange: (settings: ExportSettings) => void;\n  /** Callback to start export */\n  onStartExport: () => void;\n  /** Whether export is in progress */\n  isExporting: boolean;\n}\n\n/**\n * Quiz management hook return type\n */\nexport interface UseQuizManagementReturn {\n  /** Array of all saved quizzes */\n  quizzes: Quiz[];\n  /** Currently selected/active quiz */\n  currentQuiz: Quiz | null;\n  /** Whether quizzes are being loaded */\n  isLoading: boolean;\n  /** Any error that occurred */\n  error: string | null;\n  /** Create a new quiz */\n  createQuiz: (\n    quizData: Omit<Quiz, \"id\" | \"createdAt\" | \"updatedAt\">\n  ) => Promise<Quiz>;\n  /** Update an existing quiz */\n  updateQuiz: (id: string, updates: Partial<Quiz>) => Promise<Quiz>;\n  /** Delete a quiz */\n  deleteQuiz: (id: string) => Promise<void>;\n  /** Load a specific quiz */\n  loadQuiz: (id: string) => Promise<Quiz | null>;\n  /** Clear current quiz */\n  clearCurrentQuiz: () => void;\n  /** Export quiz to PowerPoint */\n  exportToPowerPoint: (\n    quizId: string,\n    settings?: ExportSettings\n  ) => Promise<void>;\n  /** Set quizzes */\n  setQuizzes: React.Dispatch<React.SetStateAction<Quiz[]>>;\n}\n\n/**\n * Quiz wizard hook return type\n */\nexport interface UseQuizWizardReturn {\n  /** Current wizard step */\n  currentStep: number;\n  /** Array of all wizard steps */\n  steps: WizardStep[];\n  /** Draft quiz being created */\n  draftQuiz: Partial<Quiz>;\n  /** Whether wizard can proceed to next step */\n  canProceed: boolean;\n  /** Move to next step */\n  nextStep: () => void;\n  /** Move to previous step */\n  previousStep: () => void;\n  /** Jump to specific step */\n  goToStep: (stepIndex: number) => void;\n  /** Update draft quiz data */\n  updateDraft: (updates: Partial<Quiz>) => void;\n  /** Validate current step */\n  validateStep: () => QuizValidation;\n  /** Save draft quiz */\n  saveDraft: () => Promise<void>;\n  /** Complete wizard and create quiz */\n  completeWizard: () => Promise<Quiz>;\n  /** Reset wizard to beginning */\n  resetWizard: () => void;\n}\n\n/**\n * File size limits constants\n */\nexport const FILE_SIZE_LIMITS: FileSizeLimits = {\n  image: 10 * 1024 * 1024, // 10MB\n  audio: 20 * 1024 * 1024, // 20MB\n  video: 100 * 1024 * 1024, // 100MB\n  total: 500 * 1024 * 1024, // 500MB\n};\n\n/**\n * Quiz validation constants\n */\nexport const QUIZ_CONSTANTS = {\n  MAX_TITLE_LENGTH: 100,\n  MIN_ROUNDS: 1,\n  MIN_QUESTIONS: 1,\n  MAX_QUESTIONS: 100,\n  MIN_OPTIONS: 2,\n  MAX_OPTIONS: 20,\n  FILE_SIZE_LIMITS: FILE_SIZE_LIMITS,\n} as const;\n\n/**\n * Supported file formats for PowerPoint compatibility\n */\nexport const SUPPORTED_MEDIA_TYPES: SupportedMediaTypes = {\n  images: [\"jpg\", \"jpeg\", \"png\", \"gif\", \"bmp\", \"tiff\", \"svg\"],\n  audio: [\"mp3\", \"wav\", \"wma\", \"m4a\"],\n  video: [\"mp4\", \"mov\", \"wmv\", \"avi\"],\n};\n\n/**\n * Round type configurations\n */\nexport const ROUND_TYPE_CONFIG = {\n  mixed: {\n    label: \"Any Type of Question\",\n    description: \"Questions of any type\",\n    allowedQuestionTypes: [\n      \"single-answer\",\n      \"multiple-choice\",\n      \"picture\",\n      \"audio\",\n      \"video\",\n    ] as QuestionType[],\n    canSelectQuestionType: true,\n  },\n  \"single-answer-only\": {\n    label: \"Question-Answer\",\n    description: \"Only single answer questions\",\n    allowedQuestionTypes: [\"single-answer\"] as QuestionType[],\n    canSelectQuestionType: false,\n  },\n  \"multiple-choice\": {\n    label: \"Multiple Choice Question\",\n    description: \"Only multiple choice questions\",\n    allowedQuestionTypes: [\"multiple-choice\"] as QuestionType[],\n    canSelectQuestionType: false,\n  },\n  picture: {\n    label: \"Picture Question\",\n    description: \"Questions with picture uploads\",\n    allowedQuestionTypes: [\"picture\"] as QuestionType[],\n    canSelectQuestionType: false,\n  },\n  audio: {\n    label: \"Audio Question\",\n    description: \"Questions with audio uploads\",\n    allowedQuestionTypes: [\"audio\"] as QuestionType[],\n    canSelectQuestionType: false,\n  },\n  video: {\n    label: \"Video Question\",\n    description: \"Questions with video uploads\",\n    allowedQuestionTypes: [\"video\"] as QuestionType[],\n    canSelectQuestionType: false,\n  },\n  \"golden-pyramid\": {\n    label: \"Golden Pyramid Question\",\n    description: \"Special 4-question format\",\n    allowedQuestionTypes: [\"multiple-choice\"] as QuestionType[],\n    canSelectQuestionType: false,\n    specialFormat: true,\n    prePopulatedQuestions: 4,\n  },\n} as const;\n","/**\n * Wizard Validation Hook\n *\n * Focused hook for validating quiz data across all wizard steps.\n * Provides step-specific validation logic with comprehensive error checking\n * and user-friendly validation messages.\n *\n * Extracted from useQuizWizard.ts to follow Single Responsibility Principle.\n * Handles all validation concerns, from basic info to complex question validation.\n *\n * Features:\n * - Step-specific validation rules\n * - Comprehensive error and warning collection\n * - Progressive validation (from basic to complex)\n * - Type-safe validation with detailed error messages\n * - Real-time validation feedback\n *\n * @fileoverview Validation hook for quiz creation wizard\n * @version 1.0.0\n * @since December 2025\n */\n\nimport { useCallback } from \"react\";\nimport type { Quiz, QuizValidation } from \"../types\";\nimport { QUIZ_CONSTANTS } from \"../types\";\n\n/**\n * Validation context interface\n */\nexport interface ValidationContext {\n  /** Current step being validated (0-based) */\n  currentStep: number;\n  /** Quiz data to validate */\n  draftQuiz: Partial<Quiz>;\n}\n\n/**\n * Validation actions interface\n */\nexport interface ValidationActions {\n  /** Validates the current step */\n  validateStep: () => QuizValidation;\n  /** Validates a specific step by index */\n  validateSpecificStep: (stepIndex: number) => QuizValidation;\n  /** Validates all steps for final review */\n  validateAllSteps: () => QuizValidation;\n}\n\n/**\n * Hook return interface\n */\nexport interface UseWizardValidationReturn extends ValidationActions {\n  /** Check if current step is valid */\n  isCurrentStepValid: boolean;\n  /** Check if all steps are valid */\n  isWizardComplete: boolean;\n}\n\n/**\n * Wizard Validation Hook\n *\n * Provides comprehensive validation for all steps of the quiz creation wizard.\n * Each step has specific validation requirements that must be met before\n * the user can proceed to the next step.\n *\n * @param context - Validation context with current step and quiz data\n * @returns Validation functions and state\n */\nexport const useWizardValidation = (\n  context: ValidationContext\n): UseWizardValidationReturn => {\n  const { currentStep, draftQuiz } = context;\n\n  /**\n   * Validates basic information step (step 0)\n   * Checks required fields: title, category, difficulty\n   * Provides warnings for optional but recommended fields\n   */\n  const validateBasicInfo = useCallback((): QuizValidation => {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // Title validation\n    if (!draftQuiz.title?.trim()) {\n      errors.push(\"Quiz title is required\");\n    } else if (draftQuiz.title.length > QUIZ_CONSTANTS.MAX_TITLE_LENGTH) {\n      errors.push(\n        `Title must be ${QUIZ_CONSTANTS.MAX_TITLE_LENGTH} characters or less`\n      );\n    }\n\n    // Category validation\n    if (!draftQuiz.category) {\n      errors.push(\"Quiz category must be selected\");\n    }\n\n    // Difficulty validation\n    if (!draftQuiz.difficulty) {\n      errors.push(\"Quiz difficulty must be selected\");\n    }\n\n    // Description warning (optional but recommended)\n    if (!draftQuiz.description?.trim()) {\n      warnings.push(\n        \"Consider adding a description to help users understand the quiz content\"\n      );\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings,\n      validatedAt: new Date(),\n    };\n  }, [draftQuiz]);\n\n  /**\n   * Validates questions step (step 1)\n   * Comprehensive validation of rounds and questions\n   * Checks question text, answer options, and correct answers\n   */\n  const validateQuestions = useCallback((): QuizValidation => {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // Check if any rounds exist\n    if (!draftQuiz.rounds || draftQuiz.rounds.length < 1) {\n      errors.push(\"Quiz must have at least one round\");\n      return {\n        isValid: false,\n        errors,\n        warnings,\n        validatedAt: new Date(),\n      };\n    }\n\n    // Validate each round and its questions\n    draftQuiz.rounds.forEach((round, rIdx) => {\n      const roundNum = rIdx + 1;\n\n      // Check if round has questions\n      if (!round.questions || round.questions.length < 1) {\n        errors.push(`Round ${roundNum} must have at least one question`);\n        return;\n      }\n\n      // Validate each question in the round\n      round.questions.forEach((question, qIdx) => {\n        // Skip validation if question is undefined or incomplete\n        if (!question || typeof question !== \"object\") {\n          return;\n        }\n\n        const questionNum = qIdx + 1;\n        const questionRef = `Round ${roundNum}, Question ${questionNum}`;\n\n        // Question text validation\n        if (!question.question?.trim()) {\n          errors.push(`${questionRef}: Question text is required`);\n        }\n\n        // Type-specific validation\n        if (question.type === \"single-answer\") {\n          // Single answer validation\n          if (!question.correctAnswerText?.trim()) {\n            warnings.push(`${questionRef}: Consider adding an answer`);\n          }\n        } else if (\n          [\"multiple-choice\", \"picture\", \"audio\", \"video\"].includes(\n            question.type\n          )\n        ) {\n          // Multiple choice and media type validation\n          if (round.type === \"golden-pyramid\") {\n            // Special handling for Golden Pyramid questions - allow partial completion\n            // Users can work on questions gradually and save incomplete ones\n            if (\n              !question.possibleAnswers ||\n              !Array.isArray(question.possibleAnswers) ||\n              question.possibleAnswers.length === 0 ||\n              question.possibleAnswers.every((answer) => !answer?.trim())\n            ) {\n              warnings.push(\n                `${questionRef}: Consider adding at least one answer option`\n              );\n            }\n          } else {\n            // Regular multiple choice validation (including media types)\n            // Allow users to save incomplete questions and work on them gradually\n\n            // Check minimum options\n            if (\n              !question.possibleAnswers ||\n              !Array.isArray(question.possibleAnswers) ||\n              question.possibleAnswers.length < QUIZ_CONSTANTS.MIN_OPTIONS\n            ) {\n              warnings.push(\n                `${questionRef}: Consider adding at least ${QUIZ_CONSTANTS.MIN_OPTIONS} answer options`\n              );\n            }\n\n            // Check correct answer selection - add safety checks\n            if (\n              !question.correctAnswers ||\n              !Array.isArray(question.correctAnswers) ||\n              question.correctAnswers.length === 0\n            ) {\n              warnings.push(\n                `${questionRef}: Consider selecting at least one correct answer`\n              );\n            } else if (\n              question.possibleAnswers &&\n              Array.isArray(question.possibleAnswers)\n            ) {\n              // Validate correct answer indices are within range\n              const possibleAnswersLength =\n                question.possibleAnswers?.length || 0;\n              const invalidIndices = question.correctAnswers.filter(\n                (index) =>\n                  typeof index !== \"number\" ||\n                  index < 0 ||\n                  index >= possibleAnswersLength\n              );\n              if (invalidIndices.length > 0) {\n                warnings.push(\n                  `${questionRef}: Some correct answer selections may be invalid`\n                );\n              }\n            }\n\n            // Check for empty options - convert to warning for gradual completion\n            if (\n              question.possibleAnswers &&\n              Array.isArray(question.possibleAnswers)\n            ) {\n              const emptyOptions = question.possibleAnswers.filter(\n                (opt) => !opt?.trim()\n              );\n              if (emptyOptions.length > 0) {\n                warnings.push(\n                  `${questionRef}: Consider filling in all answer options`\n                );\n              }\n            }\n\n            // Warning for too many options (usability) - add safety checks\n            if (\n              question.possibleAnswers &&\n              Array.isArray(question.possibleAnswers) &&\n              question.possibleAnswers.length > QUIZ_CONSTANTS.MAX_OPTIONS\n            ) {\n              warnings.push(\n                `${questionRef}: Consider limiting to ${QUIZ_CONSTANTS.MAX_OPTIONS} options for better usability`\n              );\n            }\n          }\n        }\n\n        // Question length warnings\n        if (question.question && question.question.length > 200) {\n          warnings.push(`${questionRef}: Long questions may be harder to read`);\n        }\n      });\n\n      // Round-level warnings\n      if (round.questions.length > 10) {\n        warnings.push(\n          `Round ${roundNum}: Many questions in one round may overwhelm users`\n        );\n      }\n    });\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings,\n      validatedAt: new Date(),\n    };\n  }, [draftQuiz.rounds]);\n\n  /**\n   * Validates review step (step 2)\n   * Final comprehensive validation before quiz creation\n   * Ensures all previous steps are complete and valid\n   */\n  const validateReview = useCallback((): QuizValidation => {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // Validate basic info completeness\n    const basicInfoValid = !!draftQuiz.title?.trim();\n    if (!basicInfoValid) {\n      errors.push(\"Basic quiz information is incomplete\");\n    }\n\n    // Validate rounds and questions completeness\n    const roundsValid =\n      draftQuiz.rounds &&\n      draftQuiz.rounds.length > 0 &&\n      draftQuiz.rounds.every((r) => r.questions && r.questions.length > 0);\n    if (!roundsValid) {\n      errors.push(\"Quiz must have at least one round with questions\");\n    }\n\n    // Validate settings completeness\n    const settingsValid = !!draftQuiz.settings;\n    if (!settingsValid) {\n      errors.push(\"Quiz settings are required\");\n    }\n\n    // Calculate total questions for duration estimate\n    const totalQuestions =\n      draftQuiz.rounds?.reduce(\n        (sum, round) => sum + (round.questions?.length || 0),\n        0\n      ) || 0;\n\n    // Warnings for quiz structure\n    if (totalQuestions < 5) {\n      warnings.push(\"Quiz has fewer than 5 questions - consider adding more\");\n    }\n    if (totalQuestions > 50) {\n      warnings.push(\n        \"Quiz has many questions - consider splitting into multiple quizzes\"\n      );\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings,\n      validatedAt: new Date(),\n    };\n  }, [draftQuiz]);\n\n  /**\n   * Validates the current step based on step index\n   * Routes to appropriate step-specific validation function\n   */\n  const validateStep = useCallback((): QuizValidation => {\n    switch (currentStep) {\n      case 0: // Basic Info Step\n        return validateBasicInfo();\n      case 1: // Questions Step\n        return validateQuestions();\n      case 2: // Review Step\n        return validateReview();\n      default:\n        return {\n          isValid: false,\n          errors: [\"Invalid step\"],\n          warnings: [],\n          validatedAt: new Date(),\n        };\n    }\n  }, [currentStep, validateBasicInfo, validateQuestions, validateReview]);\n\n  /**\n   * Validates a specific step by index\n   * Useful for checking completion of previous steps\n   */\n  const validateSpecificStep = useCallback(\n    (stepIndex: number): QuizValidation => {\n      switch (stepIndex) {\n        case 0:\n          return validateBasicInfo();\n        case 1:\n          return validateQuestions();\n        case 2:\n          return validateReview();\n        default:\n          return {\n            isValid: false,\n            errors: [\"Invalid step index\"],\n            warnings: [],\n            validatedAt: new Date(),\n          };\n      }\n    },\n    [validateBasicInfo, validateQuestions, validateReview]\n  );\n\n  /**\n   * Validates all steps for final quiz creation\n   * Ensures entire wizard is complete and valid\n   */\n  const validateAllSteps = useCallback((): QuizValidation => {\n    const allErrors: string[] = [];\n    const allWarnings: string[] = [];\n\n    // Validate each step\n    [0, 1, 2].forEach((stepIndex) => {\n      const stepValidation = validateSpecificStep(stepIndex);\n      allErrors.push(...stepValidation.errors);\n      allWarnings.push(...stepValidation.warnings);\n    });\n\n    return {\n      isValid: allErrors.length === 0,\n      errors: allErrors,\n      warnings: allWarnings,\n      validatedAt: new Date(),\n    };\n  }, [validateSpecificStep]);\n\n  // Compute derived state\n  const currentStepValidation = validateStep();\n  const isCurrentStepValid = currentStepValidation.isValid;\n  const allStepsValidation = validateAllSteps();\n  const isWizardComplete = allStepsValidation.isValid;\n\n  return {\n    validateStep,\n    validateSpecificStep,\n    validateAllSteps,\n    isCurrentStepValid,\n    isWizardComplete,\n  };\n};\n","/**\n * Wizard Completion Hook\n *\n * Focused hook for managing quiz creation completion and finalization.\n * Handles the final quiz object creation, validation, and data transformation\n * from draft to production-ready quiz.\n *\n * Extracted from useQuizWizard.ts to follow Single Responsibility Principle.\n * Manages only completion concerns, leaving navigation and persistence to other hooks.\n *\n * Features:\n * - Final quiz validation and creation\n * - Data transformation from draft to final format\n * - Automatic timestamp and ID generation\n * - Duration calculation based on question count\n * - Error handling for incomplete data\n *\n * @fileoverview Completion hook for quiz creation wizard\n * @version 1.0.0\n * @since December 2025\n */\n\nimport { useCallback } from \"react\";\nimport type { Quiz, QuizValidation } from \"../types\";\n\n/**\n * Completion context interface\n */\nexport interface CompletionContext {\n  /** Current draft quiz data */\n  draftQuiz: Partial<Quiz>;\n  /** Function to validate all wizard steps */\n  validateAllSteps: () => QuizValidation;\n  /** Function to clear draft after completion */\n  clearDraft: () => void;\n  /** Function to reset draft to defaults */\n  resetDraft: () => void;\n}\n\n/**\n * Completion actions interface\n */\nexport interface CompletionActions {\n  /** Complete wizard and create final quiz */\n  completeWizard: () => Promise<Quiz>;\n  /** Check if wizard can be completed */\n  canComplete: () => boolean;\n  /** Get completion readiness status */\n  getCompletionStatus: () => {\n    ready: boolean;\n    errors: string[];\n    warnings: string[];\n  };\n}\n\n/**\n * Hook return interface\n */\nexport interface UseWizardCompletionReturn extends CompletionActions {\n  /** Whether wizard is ready for completion */\n  isReady: boolean;\n}\n\n/**\n * Wizard Completion Hook\n *\n * Manages the final step of quiz creation - transforming the draft quiz\n * into a complete, production-ready quiz object with all required metadata.\n *\n * @param context - Completion context with draft data and validation\n * @returns Completion functions and status\n */\nexport const useWizardCompletion = (\n  context: CompletionContext\n): UseWizardCompletionReturn => {\n  const { draftQuiz, clearDraft } = context;\n\n  /**\n   * Calculates estimated quiz duration based on content\n   * Uses question count and complexity to estimate time needed\n   *\n   * @param rounds - Quiz rounds to analyze\n   * @returns Estimated duration in minutes\n   */\n  const calculateEstimatedDuration = useCallback(\n    (rounds: Quiz[\"rounds\"]): number => {\n      const totalQuestions = rounds.reduce(\n        (sum, round) => sum + (round.questions?.length || 0),\n        0\n      );\n\n      // Base calculation: 1.5 minutes per question\n      const baseDuration = Math.ceil(totalQuestions * 1.5);\n\n      // Factor in question complexity (longer questions need more time)\n      const complexityFactor = rounds.reduce((factor, round) => {\n        const avgQuestionLength =\n          round.questions.reduce(\n            (sum, q) => sum + (q.question?.length || 0),\n            0\n          ) / round.questions.length;\n\n        // Add time for longer questions\n        return factor + (avgQuestionLength > 100 ? 0.5 : 0);\n      }, 0);\n\n      // Minimum 5 minutes, add complexity time\n      return Math.max(5, baseDuration + Math.ceil(complexityFactor));\n    },\n    []\n  );\n\n  /**\n   * Generates a unique quiz ID or preserves existing one for edits\n   * Combines timestamp and random string for uniqueness for new quizzes\n   * Preserves original ID for quiz edits to prevent duplicates\n   *\n   * @returns Quiz identifier (new for create, existing for edit)\n   */\n  const generateQuizId = useCallback((): string => {\n    // If we have an existing quiz ID (from edit mode), preserve it\n    if (draftQuiz.id && !draftQuiz.id.startsWith(\"draft_\")) {\n      return draftQuiz.id;\n    }\n\n    // For new quizzes, generate unique ID\n    const timestamp = Date.now();\n    const randomPart = Math.random().toString(36).substr(2, 9);\n    return `quiz_${timestamp}_${randomPart}`;\n  }, [draftQuiz.id]);\n\n  /**\n   * Transforms draft quiz into complete quiz object\n   * Adds all required metadata and validates data integrity\n   * Now much more lenient - only requires title\n   * Preserves original quiz ID for edits to prevent duplicates\n   *\n   * @returns Complete quiz object ready for storage\n   */\n  const createCompleteQuiz = useCallback((): Quiz => {\n    // Only require title - everything else gets defaults\n    if (!draftQuiz.title?.trim()) {\n      throw new Error(\"Quiz title is required\");\n    }\n\n    const now = new Date();\n    const isEditMode = draftQuiz.id && !draftQuiz.id.startsWith(\"draft_\");\n\n    // Provide defaults for missing fields\n    const rounds = draftQuiz.rounds || [];\n    const settings = draftQuiz.settings || {\n      allowHints: false,\n      showCorrectAnswers: true,\n      timeLimit: null,\n      randomizeQuestions: false,\n      randomizeAnswers: false,\n    };\n\n    const estimatedDuration = Math.max(\n      rounds.length > 0 ? calculateEstimatedDuration(rounds) : 5,\n      draftQuiz.estimatedDuration || 5\n    );\n\n    // Create complete quiz object with all metadata\n    const completedQuiz: Quiz = {\n      id: generateQuizId(), // This now preserves original ID for edits\n      title: draftQuiz.title.trim(),\n      description: draftQuiz.description?.trim() || \"\",\n      category: draftQuiz.category || \"general\",\n      difficulty: draftQuiz.difficulty || \"medium\",\n      estimatedDuration,\n      // Preserve original creation date for edits, set new for creates\n      createdAt: isEditMode ? draftQuiz.createdAt || now : now,\n      updatedAt: now, // Always update the modification time\n      settings,\n      rounds: rounds.map((round) => ({\n        ...round,\n        // Ensure round metadata\n        id:\n          round.id ||\n          `round_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`,\n        createdAt: round.createdAt || now,\n        updatedAt: round.updatedAt || now,\n        // Process questions with metadata (allow empty questions)\n        questions: (round.questions || []).map((question) => ({\n          ...question,\n          id:\n            question.id ||\n            `q_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`,\n          createdAt: question.createdAt || now,\n          updatedAt: question.updatedAt || now,\n        })),\n      })),\n    };\n\n    return completedQuiz;\n  }, [draftQuiz, calculateEstimatedDuration, generateQuizId]);\n\n  /**\n   * Checks if wizard can be completed\n   * Now much more lenient - only requires title\n   *\n   * @returns True if wizard can be completed\n   */\n  const canComplete = useCallback((): boolean => {\n    // Only require title for completion\n    return !!draftQuiz.title?.trim();\n  }, [draftQuiz.title]);\n\n  /**\n   * Gets detailed completion readiness status\n   * Provides errors and warnings for UI feedback\n   *\n   * @returns Completion status with detailed feedback\n   */\n  const getCompletionStatus = useCallback(() => {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // Only check for title\n    if (!draftQuiz.title?.trim()) {\n      errors.push(\"Quiz title is required\");\n    }\n\n    // Add warnings for missing optional fields\n    if (!draftQuiz.category) {\n      warnings.push(\"Consider adding a category\");\n    }\n    if (!draftQuiz.difficulty) {\n      warnings.push(\"Consider setting a difficulty level\");\n    }\n    if (!draftQuiz.rounds || draftQuiz.rounds.length === 0) {\n      warnings.push(\"Consider adding some questions\");\n    }\n\n    return {\n      ready: errors.length === 0,\n      errors,\n      warnings,\n    };\n  }, [draftQuiz]);\n\n  /**\n   * Completes the wizard and creates the final quiz\n   * Now bypasses strict validation and only requires title\n   * Clears draft data upon successful completion\n   *\n   * @returns Promise resolving to the completed quiz\n   * @throws Error if title is missing\n   */\n  const completeWizard = useCallback(async (): Promise<Quiz> => {\n    // Only check for title\n    if (!draftQuiz.title?.trim()) {\n      throw new Error(\"Quiz title is required\");\n    }\n\n    try {\n      // Create the complete quiz object\n      const completedQuiz = createCompleteQuiz();\n\n      // Debug log for development troubleshooting\n      if (process.env.NODE_ENV !== \"production\") {\n        // eslint-disable-next-line no-console\n        console.log(\"[WizardCompletion] Quiz created successfully:\", {\n          id: completedQuiz.id,\n          title: completedQuiz.title,\n          rounds: completedQuiz.rounds.length,\n          totalQuestions: completedQuiz.rounds.reduce(\n            (sum, r) => sum + r.questions.length,\n            0\n          ),\n          estimatedDuration: completedQuiz.estimatedDuration,\n        });\n      }\n\n      // Clear draft data after successful creation\n      clearDraft();\n\n      return completedQuiz;\n    } catch (error) {\n      // Log error for debugging\n      console.error(\"[WizardCompletion] Failed to create quiz:\", error);\n\n      // Re-throw with more context\n      if (error instanceof Error) {\n        throw new Error(`Quiz creation failed: ${error.message}`);\n      } else {\n        throw new Error(\"Quiz creation failed due to unknown error\");\n      }\n    }\n  }, [draftQuiz.title, createCompleteQuiz, clearDraft]);\n\n  // Compute derived state\n  const isReady = canComplete();\n\n  return {\n    completeWizard,\n    canComplete,\n    getCompletionStatus,\n    isReady,\n  };\n};\n","/**\n * IndexedDB Service for Quiz Data Persistence\n *\n * Provides a robust IndexedDB-based storage solution for quiz data with\n * support for large media files, auto-save functionality, and fallback\n * to localStorage when IndexedDB is unavailable.\n *\n * Features:\n * - Large file storage (up to 500MB total)\n * - Auto-save with draft management\n * - Data migration from localStorage\n * - Error handling and fallback strategies\n * - Performance monitoring\n *\n * @fileoverview IndexedDB service for quiz data persistence\n * @version 1.0.0\n * @since December 2025\n */\n\nimport type { Quiz, MediaFile } from \"../types\";\n\n/**\n * Database configuration constants\n */\nconst DB_CONFIG = {\n  name: \"QuizzardDB\",\n  version: 1,\n  stores: {\n    quizzes: \"quizzes\",\n    drafts: \"drafts\",\n    mediaFiles: \"mediaFiles\",\n    metadata: \"metadata\",\n  },\n} as const;\n\n/**\n * Storage limits and thresholds\n */\nexport const STORAGE_LIMITS = {\n  TOTAL_QUIZ_SIZE: 500 * 1024 * 1024, // 500MB total\n  SINGLE_IMAGE: 10 * 1024 * 1024, // 10MB per image\n  SINGLE_AUDIO: 20 * 1024 * 1024, // 20MB per audio\n  SINGLE_VIDEO: 100 * 1024 * 1024, // 100MB per video\n  WARNING_THRESHOLD: 400 * 1024 * 1024, // Warn at 400MB\n} as const;\n\n/**\n * Auto-save configuration\n */\nexport const AUTO_SAVE_CONFIG = {\n  DEBOUNCE_DELAY: 30000, // 30 seconds\n  MAX_RETRIES: 3, // Retry failed saves\n  RETRY_DELAY: 5000, // 5 seconds between retries\n  DRAFT_CLEANUP_DAYS: 30, // Remove drafts older than 30 days\n} as const;\n\n/**\n * Database metadata interface\n */\ninterface DatabaseMetadata {\n  version: string;\n  lastSync?: Date;\n  totalSize: number;\n  createdAt: Date;\n  lastCleanup?: Date;\n}\n\n/**\n * Storage operation result\n */\ninterface StorageResult<T = any> {\n  success: boolean;\n  data?: T;\n  error?: string;\n  usedFallback?: boolean;\n}\n\n/**\n * Storage usage information\n */\nexport interface StorageUsage {\n  totalSize: number;\n  quizzesSize: number;\n  draftsSize: number;\n  mediaFilesSize: number;\n  remainingSpace: number;\n  percentageUsed: number;\n  isNearLimit: boolean;\n}\n\n/**\n * IndexedDB Service Class\n */\nclass IndexedDBService {\n  private db: IDBDatabase | null = null;\n  private isInitialized = false;\n  private initPromise: Promise<boolean> | null = null;\n\n  /**\n   * Initialize the IndexedDB database\n   */\n  async initialize(): Promise<boolean> {\n    if (this.initPromise) {\n      return this.initPromise;\n    }\n\n    this.initPromise = this._initializeDB();\n    return this.initPromise;\n  }\n\n  /**\n   * Internal database initialization\n   */\n  private async _initializeDB(): Promise<boolean> {\n    try {\n      // Check if IndexedDB is available\n      if (!window.indexedDB) {\n        console.warn(\"IndexedDB not available, will use localStorage fallback\");\n        return false;\n      }\n\n      return new Promise((resolve, reject) => {\n        const request = indexedDB.open(DB_CONFIG.name, DB_CONFIG.version);\n\n        request.onerror = () => {\n          console.error(\"Failed to open IndexedDB:\", request.error);\n          reject(false);\n        };\n\n        request.onsuccess = () => {\n          this.db = request.result;\n          this.isInitialized = true;\n          console.log(\"IndexedDB initialized successfully\");\n          resolve(true);\n        };\n\n        request.onupgradeneeded = (event) => {\n          const db = (event.target as IDBOpenDBRequest).result;\n\n          // Create object stores\n          if (!db.objectStoreNames.contains(DB_CONFIG.stores.quizzes)) {\n            const quizzesStore = db.createObjectStore(\n              DB_CONFIG.stores.quizzes,\n              {\n                keyPath: \"id\",\n              }\n            );\n            quizzesStore.createIndex(\"status\", \"status\", { unique: false });\n            quizzesStore.createIndex(\"createdAt\", \"createdAt\", {\n              unique: false,\n            });\n            quizzesStore.createIndex(\"category\", \"category\", { unique: false });\n          }\n\n          if (!db.objectStoreNames.contains(DB_CONFIG.stores.drafts)) {\n            const draftsStore = db.createObjectStore(DB_CONFIG.stores.drafts, {\n              keyPath: \"id\",\n            });\n            draftsStore.createIndex(\"lastSaved\", \"lastSaved\", {\n              unique: false,\n            });\n          }\n\n          if (!db.objectStoreNames.contains(DB_CONFIG.stores.mediaFiles)) {\n            const mediaStore = db.createObjectStore(\n              DB_CONFIG.stores.mediaFiles,\n              {\n                keyPath: \"id\",\n              }\n            );\n            mediaStore.createIndex(\"type\", \"type\", { unique: false });\n            mediaStore.createIndex(\"size\", \"size\", { unique: false });\n          }\n\n          if (!db.objectStoreNames.contains(DB_CONFIG.stores.metadata)) {\n            db.createObjectStore(DB_CONFIG.stores.metadata, {\n              keyPath: \"key\",\n            });\n          }\n        };\n      });\n    } catch (error) {\n      console.error(\"IndexedDB initialization failed:\", error);\n      return false;\n    }\n  }\n\n  /**\n   * Execute a transaction with error handling\n   */\n  private async executeTransaction<T>(\n    storeNames: string | string[],\n    mode: IDBTransactionMode,\n    operation: (transaction: IDBTransaction) => Promise<T>\n  ): Promise<StorageResult<T>> {\n    try {\n      if (!this.db) {\n        throw new Error(\"Database not initialized\");\n      }\n\n      const transaction = this.db.transaction(storeNames, mode);\n\n      return new Promise((resolve) => {\n        transaction.oncomplete = () => {\n          // Transaction completed successfully\n        };\n\n        transaction.onerror = () => {\n          resolve({\n            success: false,\n            error: `Transaction failed: ${transaction.error?.message}`,\n          });\n        };\n\n        operation(transaction)\n          .then((data) => {\n            resolve({ success: true, data });\n          })\n          .catch((error) => {\n            resolve({\n              success: false,\n              error: error.message || \"Operation failed\",\n            });\n          });\n      });\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      };\n    }\n  }\n\n  /**\n   * Save a quiz (completed quiz)\n   */\n  async saveQuiz(quiz: Quiz): Promise<StorageResult<Quiz>> {\n    await this.initialize();\n\n    if (!this.isInitialized) {\n      return this.saveQuizFallback(quiz);\n    }\n\n    // Check storage limits before saving\n    const usage = await this.getStorageUsage();\n    const quizSize = this.calculateQuizSize(quiz);\n\n    if (usage.totalSize + quizSize > STORAGE_LIMITS.TOTAL_QUIZ_SIZE) {\n      return {\n        success: false,\n        error:\n          \"Storage limit exceeded. Please delete some quizzes or media files.\",\n      };\n    }\n\n    return this.executeTransaction(\n      [DB_CONFIG.stores.quizzes, DB_CONFIG.stores.mediaFiles],\n      \"readwrite\",\n      async (transaction) => {\n        const quizzesStore = transaction.objectStore(DB_CONFIG.stores.quizzes);\n        const mediaStore = transaction.objectStore(DB_CONFIG.stores.mediaFiles);\n\n        // Save media files first\n        for (const round of quiz.rounds) {\n          for (const question of round.questions) {\n            if (question.mediaFile) {\n              await this.putInStore(mediaStore, question.mediaFile);\n            }\n          }\n        }\n\n        // Save the quiz\n        await this.putInStore(quizzesStore, quiz);\n\n        // Update metadata\n        await this.updateMetadata();\n\n        return quiz;\n      }\n    );\n  }\n\n  /**\n   * Save a draft quiz (auto-save)\n   */\n  async saveDraft(\n    draft: Partial<Quiz> & { id: string }\n  ): Promise<StorageResult<Partial<Quiz>>> {\n    await this.initialize();\n\n    if (!this.isInitialized) {\n      return this.saveDraftFallback(draft);\n    }\n\n    const draftWithTimestamp = {\n      ...draft,\n      lastSaved: new Date(),\n      isDraft: true,\n    };\n\n    return this.executeTransaction(\n      DB_CONFIG.stores.drafts,\n      \"readwrite\",\n      async (transaction) => {\n        const store = transaction.objectStore(DB_CONFIG.stores.drafts);\n        await this.putInStore(store, draftWithTimestamp);\n        return draftWithTimestamp;\n      }\n    );\n  }\n\n  /**\n   * Load all quizzes\n   */\n  async loadQuizzes(): Promise<StorageResult<Quiz[]>> {\n    await this.initialize();\n\n    if (!this.isInitialized) {\n      return this.loadQuizzesFallback();\n    }\n\n    return this.executeTransaction(\n      DB_CONFIG.stores.quizzes,\n      \"readonly\",\n      async (transaction) => {\n        const store = transaction.objectStore(DB_CONFIG.stores.quizzes);\n        const request = store.getAll();\n\n        return new Promise<Quiz[]>((resolve, reject) => {\n          request.onsuccess = () => resolve(request.result || []);\n          request.onerror = () => reject(request.error);\n        });\n      }\n    );\n  }\n\n  /**\n   * Load a specific quiz by ID\n   */\n  async loadQuiz(id: string): Promise<StorageResult<Quiz | null>> {\n    await this.initialize();\n\n    if (!this.isInitialized) {\n      return this.loadQuizFallback(id);\n    }\n\n    return this.executeTransaction(\n      DB_CONFIG.stores.quizzes,\n      \"readonly\",\n      async (transaction) => {\n        const store = transaction.objectStore(DB_CONFIG.stores.quizzes);\n        const request = store.get(id);\n\n        return new Promise<Quiz | null>((resolve, reject) => {\n          request.onsuccess = () => resolve(request.result || null);\n          request.onerror = () => reject(request.error);\n        });\n      }\n    );\n  }\n\n  /**\n   * Load all drafts\n   */\n  async loadDrafts(): Promise<StorageResult<Partial<Quiz>[]>> {\n    await this.initialize();\n\n    if (!this.isInitialized) {\n      return this.loadDraftsFallback();\n    }\n\n    return this.executeTransaction(\n      DB_CONFIG.stores.drafts,\n      \"readonly\",\n      async (transaction) => {\n        const store = transaction.objectStore(DB_CONFIG.stores.drafts);\n        const request = store.getAll();\n\n        return new Promise<Partial<Quiz>[]>((resolve, reject) => {\n          request.onsuccess = () => resolve(request.result || []);\n          request.onerror = () => reject(request.error);\n        });\n      }\n    );\n  }\n\n  /**\n   * Delete a quiz\n   */\n  async deleteQuiz(id: string): Promise<StorageResult<boolean>> {\n    await this.initialize();\n\n    if (!this.isInitialized) {\n      return this.deleteQuizFallback(id);\n    }\n\n    return this.executeTransaction(\n      [DB_CONFIG.stores.quizzes, DB_CONFIG.stores.mediaFiles],\n      \"readwrite\",\n      async (transaction) => {\n        const quizzesStore = transaction.objectStore(DB_CONFIG.stores.quizzes);\n        const mediaStore = transaction.objectStore(DB_CONFIG.stores.mediaFiles);\n\n        // Get quiz to find associated media files\n        const quiz = await this.getFromStore<Quiz>(quizzesStore, id);\n\n        if (quiz) {\n          // Delete associated media files\n          for (const round of quiz.rounds) {\n            for (const question of round.questions) {\n              if (question.mediaFile) {\n                await this.deleteFromStore(mediaStore, question.mediaFile.id);\n              }\n            }\n          }\n        }\n\n        // Delete the quiz\n        await this.deleteFromStore(quizzesStore, id);\n\n        // Update metadata\n        await this.updateMetadata();\n\n        return true;\n      }\n    );\n  }\n\n  /**\n   * Delete a draft\n   */\n  async deleteDraft(id: string): Promise<StorageResult<boolean>> {\n    await this.initialize();\n\n    if (!this.isInitialized) {\n      return this.deleteDraftFallback(id);\n    }\n\n    return this.executeTransaction(\n      DB_CONFIG.stores.drafts,\n      \"readwrite\",\n      async (transaction) => {\n        const store = transaction.objectStore(DB_CONFIG.stores.drafts);\n        await this.deleteFromStore(store, id);\n        return true;\n      }\n    );\n  }\n\n  /**\n   * Get current storage usage\n   */\n  async getStorageUsage(): Promise<StorageUsage> {\n    await this.initialize();\n\n    if (!this.isInitialized) {\n      return this.getStorageUsageFallback();\n    }\n\n    try {\n      const [quizzesResult, draftsResult, mediaResult] = await Promise.all([\n        this.calculateStoreSize(DB_CONFIG.stores.quizzes),\n        this.calculateStoreSize(DB_CONFIG.stores.drafts),\n        this.calculateStoreSize(DB_CONFIG.stores.mediaFiles),\n      ]);\n\n      const totalSize = quizzesResult + draftsResult + mediaResult;\n      const remainingSpace = STORAGE_LIMITS.TOTAL_QUIZ_SIZE - totalSize;\n      const percentageUsed = (totalSize / STORAGE_LIMITS.TOTAL_QUIZ_SIZE) * 100;\n\n      return {\n        totalSize,\n        quizzesSize: quizzesResult,\n        draftsSize: draftsResult,\n        mediaFilesSize: mediaResult,\n        remainingSpace: Math.max(0, remainingSpace),\n        percentageUsed: Math.min(100, percentageUsed),\n        isNearLimit: percentageUsed > 80,\n      };\n    } catch (error) {\n      console.error(\"Error calculating storage usage:\", error);\n      return {\n        totalSize: 0,\n        quizzesSize: 0,\n        draftsSize: 0,\n        mediaFilesSize: 0,\n        remainingSpace: STORAGE_LIMITS.TOTAL_QUIZ_SIZE,\n        percentageUsed: 0,\n        isNearLimit: false,\n      };\n    }\n  }\n\n  /**\n   * Clean up old drafts (older than configured days)\n   */\n  async cleanupOldDrafts(): Promise<StorageResult<number>> {\n    await this.initialize();\n\n    if (!this.isInitialized) {\n      return { success: true, data: 0 };\n    }\n\n    const cutoffDate = new Date();\n    cutoffDate.setDate(\n      cutoffDate.getDate() - AUTO_SAVE_CONFIG.DRAFT_CLEANUP_DAYS\n    );\n\n    return this.executeTransaction(\n      DB_CONFIG.stores.drafts,\n      \"readwrite\",\n      async (transaction) => {\n        const store = transaction.objectStore(DB_CONFIG.stores.drafts);\n        const index = store.index(\"lastSaved\");\n        const range = IDBKeyRange.upperBound(cutoffDate);\n        const request = index.openCursor(range);\n\n        let deletedCount = 0;\n\n        return new Promise<number>((resolve, reject) => {\n          request.onsuccess = (event) => {\n            const cursor = (event.target as IDBRequest).result;\n            if (cursor) {\n              cursor.delete();\n              deletedCount++;\n              cursor.continue();\n            } else {\n              resolve(deletedCount);\n            }\n          };\n          request.onerror = () => reject(request.error);\n        });\n      }\n    );\n  }\n\n  /**\n   * Clear ALL storage data (both IndexedDB and localStorage)\n   * This is used when user explicitly wants to clear all data\n   */\n  async clearAllStorage(): Promise<StorageResult<boolean>> {\n    try {\n      await this.initialize();\n\n      // Clear IndexedDB if available\n      if (this.isInitialized && this.db) {\n        // Clear all object stores\n        const storeNames = [\n          DB_CONFIG.stores.quizzes,\n          DB_CONFIG.stores.drafts,\n          DB_CONFIG.stores.mediaFiles,\n          DB_CONFIG.stores.metadata,\n        ];\n\n        for (const storeName of storeNames) {\n          await this.executeTransaction(\n            storeName,\n            \"readwrite\",\n            async (transaction) => {\n              const store = transaction.objectStore(storeName);\n              return new Promise<void>((resolve, reject) => {\n                const request = store.clear();\n                request.onsuccess = () => resolve();\n                request.onerror = () => reject(request.error);\n              });\n            }\n          );\n        }\n      }\n\n      // Also clear localStorage fallback data\n      try {\n        localStorage.removeItem(\"quizzard_quizzes\");\n        localStorage.removeItem(\"quizzard_drafts\");\n        // Clear any other quiz-related localStorage keys\n        Object.keys(localStorage).forEach((key) => {\n          if (key.startsWith(\"quizzard\") || key.startsWith(\"Quizzard\")) {\n            localStorage.removeItem(key);\n          }\n        });\n      } catch (error) {\n        console.warn(\"Failed to clear localStorage:\", error);\n      }\n\n      return { success: true, data: true };\n    } catch (error) {\n      return {\n        success: false,\n        error:\n          error instanceof Error ? error.message : \"Failed to clear storage\",\n      };\n    }\n  }\n\n  // Helper methods\n  private async putInStore(store: IDBObjectStore, data: any): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const request = store.put(data);\n      request.onsuccess = () => resolve();\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  private async getFromStore<T>(\n    store: IDBObjectStore,\n    key: string\n  ): Promise<T | null> {\n    return new Promise((resolve, reject) => {\n      const request = store.get(key);\n      request.onsuccess = () => resolve(request.result || null);\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  private async deleteFromStore(\n    store: IDBObjectStore,\n    key: string\n  ): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const request = store.delete(key);\n      request.onsuccess = () => resolve();\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  private async calculateStoreSize(storeName: string): Promise<number> {\n    if (!this.db) return 0;\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction(storeName, \"readonly\");\n      const store = transaction.objectStore(storeName);\n      const request = store.getAll();\n\n      request.onsuccess = () => {\n        const items = request.result || [];\n        const size = items.reduce((total, item) => {\n          return total + JSON.stringify(item).length * 2; // Rough byte estimate\n        }, 0);\n        resolve(size);\n      };\n\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  private calculateQuizSize(quiz: Quiz): number {\n    return JSON.stringify(quiz).length * 2; // Rough byte estimate\n  }\n\n  private async updateMetadata(): Promise<void> {\n    if (!this.db) return;\n\n    const usage = await this.getStorageUsage();\n    const metadata: DatabaseMetadata = {\n      version: \"1.0.0\",\n      totalSize: usage.totalSize,\n      createdAt: new Date(),\n      lastCleanup: new Date(),\n    };\n\n    const transaction = this.db.transaction(\n      DB_CONFIG.stores.metadata,\n      \"readwrite\"\n    );\n    const store = transaction.objectStore(DB_CONFIG.stores.metadata);\n    store.put({ key: \"app_metadata\", ...metadata });\n  }\n\n  // Fallback methods for localStorage\n  private saveQuizFallback(quiz: Quiz): StorageResult<Quiz> {\n    try {\n      const quizzes = this.getQuizzesFromLocalStorage();\n      const existingIndex = quizzes.findIndex((q) => q.id === quiz.id);\n\n      if (existingIndex >= 0) {\n        quizzes[existingIndex] = quiz;\n      } else {\n        quizzes.push(quiz);\n      }\n\n      localStorage.setItem(\"quizzard_quizzes\", JSON.stringify(quizzes));\n      return { success: true, data: quiz, usedFallback: true };\n    } catch (error) {\n      return {\n        success: false,\n        error:\n          \"localStorage save failed: \" +\n          (error instanceof Error ? error.message : \"Unknown error\"),\n        usedFallback: true,\n      };\n    }\n  }\n\n  private saveDraftFallback(\n    draft: Partial<Quiz> & { id: string }\n  ): StorageResult<Partial<Quiz>> {\n    try {\n      const drafts = this.getDraftsFromLocalStorage();\n      const existingIndex = drafts.findIndex((d) => d.id === draft.id);\n\n      const draftWithTimestamp = {\n        ...draft,\n        lastSaved: new Date(),\n        isDraft: true,\n      };\n\n      if (existingIndex >= 0) {\n        drafts[existingIndex] = draftWithTimestamp;\n      } else {\n        drafts.push(draftWithTimestamp);\n      }\n\n      localStorage.setItem(\"quizzard_drafts\", JSON.stringify(drafts));\n      return { success: true, data: draftWithTimestamp, usedFallback: true };\n    } catch (error) {\n      return {\n        success: false,\n        error:\n          \"localStorage draft save failed: \" +\n          (error instanceof Error ? error.message : \"Unknown error\"),\n        usedFallback: true,\n      };\n    }\n  }\n\n  private loadQuizzesFallback(): StorageResult<Quiz[]> {\n    try {\n      const quizzes = this.getQuizzesFromLocalStorage();\n      return { success: true, data: quizzes, usedFallback: true };\n    } catch (error) {\n      return {\n        success: false,\n        error:\n          \"localStorage load failed: \" +\n          (error instanceof Error ? error.message : \"Unknown error\"),\n        usedFallback: true,\n      };\n    }\n  }\n\n  private loadQuizFallback(id: string): StorageResult<Quiz | null> {\n    try {\n      const quizzes = this.getQuizzesFromLocalStorage();\n      const quiz = quizzes.find((q) => q.id === id) || null;\n      return { success: true, data: quiz, usedFallback: true };\n    } catch (error) {\n      return {\n        success: false,\n        error:\n          \"localStorage load failed: \" +\n          (error instanceof Error ? error.message : \"Unknown error\"),\n        usedFallback: true,\n      };\n    }\n  }\n\n  private loadDraftsFallback(): StorageResult<Partial<Quiz>[]> {\n    try {\n      const drafts = this.getDraftsFromLocalStorage();\n      return { success: true, data: drafts, usedFallback: true };\n    } catch (error) {\n      return {\n        success: false,\n        error:\n          \"localStorage drafts load failed: \" +\n          (error instanceof Error ? error.message : \"Unknown error\"),\n        usedFallback: true,\n      };\n    }\n  }\n\n  private deleteQuizFallback(id: string): StorageResult<boolean> {\n    try {\n      const quizzes = this.getQuizzesFromLocalStorage();\n      const filteredQuizzes = quizzes.filter((q) => q.id !== id);\n      localStorage.setItem(\"quizzard_quizzes\", JSON.stringify(filteredQuizzes));\n      return { success: true, data: true, usedFallback: true };\n    } catch (error) {\n      return {\n        success: false,\n        error:\n          \"localStorage delete failed: \" +\n          (error instanceof Error ? error.message : \"Unknown error\"),\n        usedFallback: true,\n      };\n    }\n  }\n\n  private deleteDraftFallback(id: string): StorageResult<boolean> {\n    try {\n      const drafts = this.getDraftsFromLocalStorage();\n      const filteredDrafts = drafts.filter((d) => d.id !== id);\n      localStorage.setItem(\"quizzard_drafts\", JSON.stringify(filteredDrafts));\n      return { success: true, data: true, usedFallback: true };\n    } catch (error) {\n      return {\n        success: false,\n        error:\n          \"localStorage draft delete failed: \" +\n          (error instanceof Error ? error.message : \"Unknown error\"),\n        usedFallback: true,\n      };\n    }\n  }\n\n  private getStorageUsageFallback(): StorageUsage {\n    try {\n      const quizzesData = localStorage.getItem(\"quizzard_quizzes\") || \"[]\";\n      const draftsData = localStorage.getItem(\"quizzard_drafts\") || \"[]\";\n\n      const quizzesSize = quizzesData.length * 2;\n      const draftsSize = draftsData.length * 2;\n      const totalSize = quizzesSize + draftsSize;\n\n      // localStorage has a 5-10MB limit typically\n      const localStorageLimit = 5 * 1024 * 1024; // 5MB\n      const remainingSpace = Math.max(0, localStorageLimit - totalSize);\n      const percentageUsed = (totalSize / localStorageLimit) * 100;\n\n      return {\n        totalSize,\n        quizzesSize,\n        draftsSize,\n        mediaFilesSize: 0, // No separate media storage in localStorage\n        remainingSpace,\n        percentageUsed: Math.min(100, percentageUsed),\n        isNearLimit: percentageUsed > 80,\n      };\n    } catch (error) {\n      return {\n        totalSize: 0,\n        quizzesSize: 0,\n        draftsSize: 0,\n        mediaFilesSize: 0,\n        remainingSpace: 5 * 1024 * 1024,\n        percentageUsed: 0,\n        isNearLimit: false,\n      };\n    }\n  }\n\n  private getQuizzesFromLocalStorage(): Quiz[] {\n    try {\n      const data = localStorage.getItem(\"quizzard_quizzes\");\n      return data ? JSON.parse(data) : [];\n    } catch {\n      return [];\n    }\n  }\n\n  private getDraftsFromLocalStorage(): Partial<Quiz>[] {\n    try {\n      const data = localStorage.getItem(\"quizzard_drafts\");\n      return data ? JSON.parse(data) : [];\n    } catch {\n      return [];\n    }\n  }\n}\n\n// Export singleton instance\nexport const indexedDBService = new IndexedDBService();\n","/**\n * Quiz Storage Hook\n *\n * Provides a React hook interface for quiz data persistence using IndexedDB\n * with auto-save functionality and localStorage fallback.\n *\n * Features:\n * - Automatic draft saving every 30 seconds\n * - Storage usage monitoring\n * - Error handling with user feedback\n * - Seamless fallback to localStorage\n * - Enhanced state synchronization debugging\n *\n * @fileoverview React hook for quiz data storage\n * @version 1.1.0 (Enhanced Synchronization)\n * @since December 2025\n */\n\nimport { useState, useEffect, useCallback, useRef } from \"react\";\nimport {\n  indexedDBService,\n  AUTO_SAVE_CONFIG,\n  type StorageUsage,\n} from \"../services/indexedDBService\";\nimport type { Quiz } from \"../types\";\nimport { useSnackbar } from \"../../../../shared/hooks/useSnackbar\";\n\n// Debug mode for development\nconst DEBUG_SYNC = process.env.NODE_ENV === \"development\";\n\n/**\n * Enhanced debug logging for state synchronization\n */\nconst debugLog = (operation: string, data: any) => {\n  if (DEBUG_SYNC) {\n    console.log(`🔄 [QuizStorage] ${operation}:`, data);\n  }\n};\n\n/**\n * Auto-save status\n */\nexport type AutoSaveStatus = \"idle\" | \"saving\" | \"saved\" | \"error\";\n\n/**\n * Storage hook state\n */\ninterface UseQuizStorageState {\n  quizzes: Quiz[];\n  drafts: Partial<Quiz>[];\n  isLoading: boolean;\n  storageUsage: StorageUsage | null;\n  autoSaveStatus: AutoSaveStatus;\n  isInitialized: boolean;\n}\n\n/**\n * Storage hook return type\n */\nexport interface UseQuizStorageReturn extends UseQuizStorageState {\n  // Quiz operations\n  saveQuiz: (quiz: Quiz) => Promise<boolean>;\n  loadQuizzes: () => Promise<void>;\n  deleteQuiz: (id: string) => Promise<boolean>;\n\n  // Draft operations\n  saveDraft: (draft: Partial<Quiz> & { id: string }) => Promise<boolean>;\n  loadDrafts: () => Promise<void>;\n  deleteDraft: (id: string) => Promise<boolean>;\n\n  // Auto-save\n  enableAutoSave: (draft: Partial<Quiz> & { id: string }) => void;\n  disableAutoSave: () => void;\n\n  // Storage management\n  refreshStorageUsage: () => Promise<void>;\n  cleanupOldDrafts: () => Promise<number>;\n\n  // Utility\n  initializeStorage: () => Promise<boolean>;\n}\n\n/**\n * Quiz Storage Hook\n */\nexport const useQuizStorage = (): UseQuizStorageReturn => {\n  const { showSnackbar } = useSnackbar();\n\n  // State\n  const [state, setState] = useState<UseQuizStorageState>({\n    quizzes: [],\n    drafts: [],\n    isLoading: false,\n    storageUsage: null,\n    autoSaveStatus: \"idle\",\n    isInitialized: false,\n  });\n\n  // Auto-save refs\n  const autoSaveTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const currentDraftRef = useRef<(Partial<Quiz> & { id: string }) | null>(null);\n  const retryCountRef = useRef(0);\n\n  /**\n   * Initialize storage service\n   */\n  const initializeStorage = useCallback(async (): Promise<boolean> => {\n    try {\n      setState((prev) => ({ ...prev, isLoading: true }));\n\n      const initialized = await indexedDBService.initialize();\n\n      setState((prev) => ({\n        ...prev,\n        isInitialized: initialized,\n        isLoading: false,\n      }));\n\n      if (initialized) {\n        console.log(\"✅ IndexedDB initialized successfully\");\n      } else {\n        console.warn(\"⚠️ Using localStorage fallback\");\n        showSnackbar(\n          \"Using local storage - some features may be limited\",\n          \"warning\"\n        );\n      }\n\n      return initialized;\n    } catch (error) {\n      console.error(\"Storage initialization failed:\", error);\n      setState((prev) => ({\n        ...prev,\n        isInitialized: false,\n        isLoading: false,\n      }));\n\n      showSnackbar(\"Storage initialization failed\", \"error\");\n      return false;\n    }\n  }, [showSnackbar]);\n\n  /**\n   * Save a completed quiz\n   */\n  const saveQuiz = useCallback(\n    async (quiz: Quiz): Promise<boolean> => {\n      try {\n        setState((prev) => ({ ...prev, isLoading: true }));\n\n        const result = await indexedDBService.saveQuiz(quiz);\n\n        if (result.success) {\n          // Immediately update state\n          setState((prev) => ({\n            ...prev,\n            quizzes: prev.quizzes.some((q) => q.id === quiz.id)\n              ? prev.quizzes.map((q) => (q.id === quiz.id ? quiz : q))\n              : [...prev.quizzes, quiz],\n            isLoading: false,\n          }));\n\n          showSnackbar(\n            result.usedFallback\n              ? \"Quiz saved to local storage\"\n              : \"Quiz saved successfully\",\n            \"success\"\n          );\n\n          // Force reload data to ensure synchronization\n          await Promise.all([\n            loadQuizzes(),\n            loadDrafts(),\n            refreshStorageUsage(),\n          ]);\n\n          return true;\n        } else {\n          setState((prev) => ({ ...prev, isLoading: false }));\n          showSnackbar(result.error || \"Failed to save quiz\", \"error\");\n          return false;\n        }\n      } catch (error) {\n        setState((prev) => ({ ...prev, isLoading: false }));\n        console.error(\"Error saving quiz:\", error);\n        showSnackbar(\"Failed to save quiz\", \"error\");\n        return false;\n      }\n    },\n    [showSnackbar]\n  );\n\n  /**\n   * Load all quizzes\n   */\n  const loadQuizzes = useCallback(async (): Promise<void> => {\n    try {\n      setState((prev) => ({ ...prev, isLoading: true }));\n\n      const result = await indexedDBService.loadQuizzes();\n\n      if (result.success) {\n        setState((prev) => ({\n          ...prev,\n          quizzes: result.data || [],\n          isLoading: false,\n        }));\n\n        if (result.usedFallback) {\n          console.log(\"📦 Loaded quizzes from localStorage\");\n        }\n      } else {\n        setState((prev) => ({ ...prev, isLoading: false }));\n        console.error(\"Failed to load quizzes:\", result.error);\n        showSnackbar(\"Failed to load quizzes\", \"error\");\n      }\n    } catch (error) {\n      setState((prev) => ({ ...prev, isLoading: false }));\n      console.error(\"Error loading quizzes:\", error);\n      showSnackbar(\"Failed to load quizzes\", \"error\");\n    }\n  }, [showSnackbar]);\n\n  /**\n   * Delete a quiz\n   */\n  const deleteQuiz = useCallback(\n    async (id: string): Promise<boolean> => {\n      try {\n        setState((prev) => ({ ...prev, isLoading: true }));\n\n        const result = await indexedDBService.deleteQuiz(id);\n\n        if (result.success) {\n          // Immediately update state\n          setState((prev) => ({\n            ...prev,\n            quizzes: prev.quizzes.filter((q) => q.id !== id),\n            isLoading: false,\n          }));\n\n          // Force reload data to ensure synchronization\n          await Promise.all([\n            loadQuizzes(),\n            (async () => {\n              try {\n                const draftsResult = await indexedDBService.loadDrafts();\n                if (draftsResult.success) {\n                  setState((prev) => ({\n                    ...prev,\n                    drafts: draftsResult.data || [],\n                  }));\n                }\n              } catch (error) {\n                console.error(\"Error reloading drafts:\", error);\n              }\n            })(),\n            (async () => {\n              try {\n                const usage = await indexedDBService.getStorageUsage();\n                setState((prev) => ({ ...prev, storageUsage: usage }));\n              } catch (error) {\n                console.error(\"Error refreshing storage usage:\", error);\n              }\n            })(),\n          ]);\n\n          showSnackbar(\"Quiz deleted successfully\", \"success\");\n\n          return true;\n        } else {\n          setState((prev) => ({ ...prev, isLoading: false }));\n          showSnackbar(result.error || \"Failed to delete quiz\", \"error\");\n          return false;\n        }\n      } catch (error) {\n        setState((prev) => ({ ...prev, isLoading: false }));\n        console.error(\"Error deleting quiz:\", error);\n        showSnackbar(\"Failed to delete quiz\", \"error\");\n        return false;\n      }\n    },\n    [showSnackbar, loadQuizzes]\n  );\n\n  /**\n   * Save a draft\n   */\n  const saveDraft = useCallback(\n    async (draft: Partial<Quiz> & { id: string }): Promise<boolean> => {\n      try {\n        const result = await indexedDBService.saveDraft(draft);\n\n        if (result.success) {\n          setState((prev) => ({\n            ...prev,\n            drafts: prev.drafts.some((d) => d.id === draft.id)\n              ? prev.drafts.map((d) => (d.id === draft.id ? result.data! : d))\n              : [...prev.drafts, result.data!],\n          }));\n\n          return true;\n        } else {\n          console.error(\"Failed to save draft:\", result.error);\n          return false;\n        }\n      } catch (error) {\n        console.error(\"Error saving draft:\", error);\n        return false;\n      }\n    },\n    []\n  );\n\n  /**\n   * Load all drafts\n   */\n  const loadDrafts = useCallback(async (): Promise<void> => {\n    try {\n      const result = await indexedDBService.loadDrafts();\n\n      if (result.success) {\n        setState((prev) => ({\n          ...prev,\n          drafts: result.data || [],\n        }));\n      } else {\n        console.error(\"Failed to load drafts:\", result.error);\n      }\n    } catch (error) {\n      console.error(\"Error loading drafts:\", error);\n    }\n  }, []);\n\n  /**\n   * Delete a draft\n   */\n  const deleteDraft = useCallback(async (id: string): Promise<boolean> => {\n    try {\n      const result = await indexedDBService.deleteDraft(id);\n\n      if (result.success) {\n        setState((prev) => ({\n          ...prev,\n          drafts: prev.drafts.filter((d) => d.id !== id),\n        }));\n\n        return true;\n      } else {\n        console.error(\"Failed to delete draft:\", result.error);\n        return false;\n      }\n    } catch (error) {\n      console.error(\"Error deleting draft:\", error);\n      return false;\n    }\n  }, []);\n\n  /**\n   * Auto-save implementation\n   */\n  const performAutoSave = useCallback(async () => {\n    if (!currentDraftRef.current) return;\n\n    try {\n      setState((prev) => ({ ...prev, autoSaveStatus: \"saving\" }));\n\n      const success = await saveDraft(currentDraftRef.current);\n\n      if (success) {\n        setState((prev) => ({ ...prev, autoSaveStatus: \"saved\" }));\n        retryCountRef.current = 0;\n\n        // Reset status after 2 seconds\n        setTimeout(() => {\n          setState((prev) => ({ ...prev, autoSaveStatus: \"idle\" }));\n        }, 2000);\n      } else {\n        throw new Error(\"Auto-save failed\");\n      }\n    } catch (error) {\n      console.error(\"Auto-save error:\", error);\n      setState((prev) => ({ ...prev, autoSaveStatus: \"error\" }));\n\n      // Retry logic\n      if (retryCountRef.current < AUTO_SAVE_CONFIG.MAX_RETRIES) {\n        retryCountRef.current++;\n        setTimeout(() => {\n          performAutoSave();\n        }, AUTO_SAVE_CONFIG.RETRY_DELAY);\n      } else {\n        showSnackbar(\"Auto-save failed. Please save manually.\", \"error\");\n        setTimeout(() => {\n          setState((prev) => ({ ...prev, autoSaveStatus: \"idle\" }));\n        }, 5000);\n      }\n    }\n  }, [saveDraft, showSnackbar]);\n\n  /**\n   * Enable auto-save for a draft\n   */\n  const enableAutoSave = useCallback(\n    (draft: Partial<Quiz> & { id: string }) => {\n      // Clear existing timeout\n      if (autoSaveTimeoutRef.current) {\n        clearTimeout(autoSaveTimeoutRef.current);\n      }\n\n      // Update current draft\n      currentDraftRef.current = draft;\n\n      // Set up new auto-save timeout\n      autoSaveTimeoutRef.current = setTimeout(() => {\n        performAutoSave();\n      }, AUTO_SAVE_CONFIG.DEBOUNCE_DELAY);\n    },\n    [performAutoSave]\n  );\n\n  /**\n   * Disable auto-save\n   */\n  const disableAutoSave = useCallback(() => {\n    if (autoSaveTimeoutRef.current) {\n      clearTimeout(autoSaveTimeoutRef.current);\n      autoSaveTimeoutRef.current = null;\n    }\n    currentDraftRef.current = null;\n    setState((prev) => ({ ...prev, autoSaveStatus: \"idle\" }));\n  }, []);\n\n  /**\n   * Refresh storage usage information\n   */\n  const refreshStorageUsage = useCallback(async (): Promise<void> => {\n    try {\n      const usage = await indexedDBService.getStorageUsage();\n      setState((prev) => ({ ...prev, storageUsage: usage }));\n\n      // Warn if approaching storage limit\n      if (usage.isNearLimit) {\n        showSnackbar(\n          `Storage is ${usage.percentageUsed.toFixed(\n            1\n          )}% full. Consider deleting old quizzes.`,\n          \"warning\"\n        );\n      }\n    } catch (error) {\n      console.error(\"Error getting storage usage:\", error);\n    }\n  }, [showSnackbar]);\n\n  /**\n   * Clean up old drafts\n   */\n  const cleanupOldDrafts = useCallback(async (): Promise<number> => {\n    try {\n      const result = await indexedDBService.cleanupOldDrafts();\n\n      if (result.success && result.data! > 0) {\n        showSnackbar(`Cleaned up ${result.data} old drafts`, \"info\");\n        await loadDrafts();\n        await refreshStorageUsage();\n      }\n\n      return result.data || 0;\n    } catch (error) {\n      console.error(\"Error cleaning up drafts:\", error);\n      return 0;\n    }\n  }, [loadDrafts, refreshStorageUsage, showSnackbar]);\n\n  // Initialize storage on mount\n  useEffect(() => {\n    initializeStorage();\n  }, [initializeStorage]);\n\n  // Load initial data after initialization\n  useEffect(() => {\n    if (state.isInitialized) {\n      loadQuizzes();\n      loadDrafts();\n      refreshStorageUsage();\n    }\n  }, [state.isInitialized, loadQuizzes, loadDrafts, refreshStorageUsage]);\n\n  // Cleanup auto-save on unmount\n  useEffect(() => {\n    return () => {\n      if (autoSaveTimeoutRef.current) {\n        clearTimeout(autoSaveTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  return {\n    // State\n    ...state,\n\n    // Quiz operations\n    saveQuiz,\n    loadQuizzes,\n    deleteQuiz,\n\n    // Draft operations\n    saveDraft,\n    loadDrafts,\n    deleteDraft,\n\n    // Auto-save\n    enableAutoSave,\n    disableAutoSave,\n\n    // Storage management\n    refreshStorageUsage,\n    cleanupOldDrafts,\n\n    // Utility\n    initializeStorage,\n  };\n};\n","/**\n * Enhanced Wizard Persistence Hook with IndexedDB Auto-Save\n *\n * Advanced hook for managing quiz draft persistence with IndexedDB integration.\n * Provides automatic saving, draft recovery, and robust storage management\n * during the quiz creation process.\n *\n * Enhanced Features:\n * - IndexedDB-based storage with auto-save every 30 seconds\n * - Automatic draft recovery on wizard reopen\n * - Storage status monitoring and error handling\n * - Fallback to localStorage if IndexedDB unavailable\n * - Real-time save status feedback\n * - Draft cleanup and lifecycle management\n *\n * @fileoverview Enhanced persistence hook with IndexedDB auto-save\n * @version 3.0.0 (IndexedDB Enhanced)\n * @since December 2025\n */\n\nimport { useCallback, useEffect, useState, useRef } from \"react\";\nimport type { Quiz, QuizSettings } from \"../types\";\nimport { useQuizStorage } from \"../../management/hooks/useQuizStorage\";\n\n/**\n * Default quiz settings for new quizzes\n */\nconst DEFAULT_QUIZ_SETTINGS: QuizSettings = {\n  defaultTimeLimit: 30,\n};\n\n/**\n * Default draft quiz data structure\n */\nconst DEFAULT_DRAFT_QUIZ: Partial<Quiz> = {\n  title: \"\",\n  description: \"\",\n  category: \"general\",\n  difficulty: \"medium\",\n  rounds: [],\n  estimatedDuration: 10,\n  settings: DEFAULT_QUIZ_SETTINGS,\n  status: \"draft\", // Always draft in wizard\n};\n\n/**\n * Enhanced persistence state interface\n */\nexport interface EnhancedPersistenceState {\n  /** Current draft quiz data */\n  draftQuiz: Partial<Quiz>;\n  /** Whether persistence has been initialized */\n  isInitialized: boolean;\n  /** Auto-save status */\n  autoSaveStatus: \"idle\" | \"saving\" | \"saved\" | \"error\";\n  /** Storage error if any */\n  storageError: string | null;\n  /** Last saved timestamp */\n  lastSaved: Date | null;\n}\n\n/**\n * Enhanced persistence actions interface\n */\nexport interface EnhancedPersistenceActions {\n  /** Update draft with new data (triggers auto-save) */\n  updateDraft: (updates: Partial<Quiz>) => void;\n  /** Explicitly save current draft */\n  saveDraft: () => Promise<void>;\n  /** Clear all draft data */\n  clearDraft: () => void;\n  /** Reset draft to defaults */\n  resetDraft: () => void;\n  /** Initialize draft from existing quiz */\n  initializeFromQuiz: (quiz: Partial<Quiz>) => void;\n  /** Recover existing draft if available */\n  recoverDraft: () => Promise<boolean>;\n}\n\n/**\n * Enhanced hook return interface\n */\nexport interface UseWizardPersistenceWithStorageReturn {\n  /** Enhanced persistence state */\n  persistence: EnhancedPersistenceState;\n  /** Enhanced persistence actions */\n  actions: EnhancedPersistenceActions;\n}\n\n/**\n * Enhanced Wizard Persistence Hook with IndexedDB\n *\n * Provides robust draft persistence with IndexedDB storage, auto-save functionality,\n * and comprehensive error handling. Automatically saves drafts every 30 seconds\n * and provides real-time status feedback.\n *\n * @param initialQuiz - Optional initial quiz data to populate draft\n * @returns Enhanced persistence state and control functions\n */\nexport const useWizardPersistenceWithStorage = (\n  initialQuiz?: Partial<Quiz>\n): UseWizardPersistenceWithStorageReturn => {\n  // IndexedDB storage hook\n  const {\n    saveDraft: saveToStorage,\n    loadDrafts,\n    deleteDraft: deleteDraftFromStorage,\n    autoSaveStatus,\n    storageError,\n    clearError,\n  } = useQuizStorage();\n\n  // Local state\n  const [draftQuiz, setDraftQuiz] = useState<Partial<Quiz>>(DEFAULT_DRAFT_QUIZ);\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [lastSaved, setLastSaved] = useState<Date | null>(null);\n\n  // Auto-save timer ref\n  const autoSaveTimerRef = useRef<NodeJS.Timeout | null>(null);\n  const draftIdRef = useRef<string | null>(null);\n\n  /**\n   * Initialize draft from provided quiz data or recover existing draft\n   */\n  useEffect(() => {\n    if (!isInitialized) {\n      const initializeDraft = async () => {\n        try {\n          if (initialQuiz?.id) {\n            // Editing existing quiz - preserve original ID to prevent duplicates\n            const editDraft = {\n              ...initialQuiz,\n              status: \"draft\" as const,\n              // Preserve original ID for editing to avoid duplicates\n              id: initialQuiz.id,\n            };\n            setDraftQuiz(editDraft);\n            draftIdRef.current = editDraft.id;\n          } else {\n            // Creating new quiz - try to recover existing draft\n            const drafts = await loadDrafts();\n            const existingDraft = drafts.find(\n              (d) => d.title === \"\" || !d.title\n            ); // Find empty/new draft\n\n            if (existingDraft) {\n              setDraftQuiz(existingDraft);\n              draftIdRef.current = existingDraft.id!;\n            } else {\n              // Create new draft\n              const newDraft = {\n                ...DEFAULT_DRAFT_QUIZ,\n                id: `draft_${Date.now()}_${Math.random()\n                  .toString(36)\n                  .substr(2, 9)}`,\n                createdAt: new Date(),\n              };\n              setDraftQuiz(newDraft);\n              draftIdRef.current = newDraft.id;\n            }\n          }\n        } catch (error) {\n          console.warn(\n            \"[WizardPersistence] Failed to initialize draft:\",\n            error\n          );\n          // Fallback to default draft\n          const fallbackDraft = {\n            ...DEFAULT_DRAFT_QUIZ,\n            id: `draft_${Date.now()}_${Math.random()\n              .toString(36)\n              .substr(2, 9)}`,\n            createdAt: new Date(),\n          };\n          setDraftQuiz(fallbackDraft);\n          draftIdRef.current = fallbackDraft.id;\n        } finally {\n          setIsInitialized(true);\n        }\n      };\n\n      initializeDraft();\n    }\n  }, [isInitialized, initialQuiz, loadDrafts]);\n\n  /**\n   * Auto-save functionality - saves draft every 30 seconds after changes\n   */\n  const scheduleAutoSave = useCallback(() => {\n    // Clear existing timer\n    if (autoSaveTimerRef.current) {\n      clearTimeout(autoSaveTimerRef.current);\n    }\n\n    // Schedule new save\n    autoSaveTimerRef.current = setTimeout(async () => {\n      if (draftQuiz.id && (draftQuiz.title || draftQuiz.rounds?.length)) {\n        try {\n          await saveToStorage(draftQuiz as Quiz);\n          setLastSaved(new Date());\n        } catch (error) {\n          console.error(\"[WizardPersistence] Auto-save failed:\", error);\n        }\n      }\n    }, 30000); // 30 seconds\n  }, [draftQuiz, saveToStorage]);\n\n  /**\n   * Updates draft quiz data with new information\n   * Automatically schedules auto-save after changes\n   */\n  const updateDraft = useCallback(\n    (updates: Partial<Quiz>) => {\n      setDraftQuiz((prev) => {\n        const merged = {\n          ...prev,\n          ...updates,\n          settings: {\n            ...(prev.settings || DEFAULT_QUIZ_SETTINGS),\n            ...(updates.settings || {}),\n          },\n          rounds: updates.rounds !== undefined ? updates.rounds : prev.rounds,\n          updatedAt: new Date(),\n        };\n\n        // Debug log for development\n        if (process.env.NODE_ENV !== \"production\") {\n          console.log(\"[WizardPersistence] updateDraft:\", {\n            updates,\n            previous: prev,\n            merged,\n          });\n        }\n\n        return merged;\n      });\n\n      // Schedule auto-save after update\n      scheduleAutoSave();\n    },\n    [scheduleAutoSave]\n  );\n\n  /**\n   * Explicitly saves current draft to IndexedDB\n   */\n  const saveDraft = useCallback(async (): Promise<void> => {\n    if (!draftQuiz.id) return;\n\n    try {\n      await saveToStorage(draftQuiz as Quiz);\n      setLastSaved(new Date());\n    } catch (error) {\n      console.error(\"[WizardPersistence] Manual save failed:\", error);\n      throw error;\n    }\n  }, [draftQuiz, saveToStorage]);\n\n  /**\n   * Clears current draft from storage and resets to defaults\n   */\n  const clearDraft = useCallback(async () => {\n    // Clear auto-save timer\n    if (autoSaveTimerRef.current) {\n      clearTimeout(autoSaveTimerRef.current);\n      autoSaveTimerRef.current = null;\n    }\n\n    // Delete from storage if it exists\n    if (draftIdRef.current) {\n      try {\n        await deleteDraftFromStorage(draftIdRef.current);\n      } catch (error) {\n        console.warn(\"[WizardPersistence] Failed to delete draft:\", error);\n      }\n    }\n\n    // Reset local state\n    setDraftQuiz(DEFAULT_DRAFT_QUIZ);\n    setLastSaved(null);\n    draftIdRef.current = null;\n    clearError();\n  }, [deleteDraftFromStorage, clearError]);\n\n  /**\n   * Resets draft to default values without deleting from storage\n   */\n  const resetDraft = useCallback(() => {\n    const newDraft = {\n      ...DEFAULT_DRAFT_QUIZ,\n      id: `draft_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      createdAt: new Date(),\n    };\n    setDraftQuiz(newDraft);\n    draftIdRef.current = newDraft.id;\n    setLastSaved(null);\n  }, []);\n\n  /**\n   * Initialize draft from existing quiz data\n   */\n  const initializeFromQuiz = useCallback((quiz: Partial<Quiz>) => {\n    const editDraft = {\n      ...quiz,\n      status: \"draft\" as const,\n      id: `draft_${quiz.id || Date.now()}_${Date.now()}`,\n      updatedAt: new Date(),\n    };\n    setDraftQuiz(editDraft);\n    draftIdRef.current = editDraft.id;\n    setLastSaved(null);\n  }, []);\n\n  /**\n   * Attempt to recover existing draft\n   */\n  const recoverDraft = useCallback(async (): Promise<boolean> => {\n    try {\n      const drafts = await loadDrafts();\n      const latestDraft = drafts\n        .filter((d) => d.status === \"draft\")\n        .sort(\n          (a, b) =>\n            new Date(b.updatedAt || 0).getTime() -\n            new Date(a.updatedAt || 0).getTime()\n        )[0];\n\n      if (latestDraft) {\n        setDraftQuiz(latestDraft);\n        draftIdRef.current = latestDraft.id!;\n        setLastSaved(\n          latestDraft.updatedAt ? new Date(latestDraft.updatedAt) : null\n        );\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error(\"[WizardPersistence] Draft recovery failed:\", error);\n      return false;\n    }\n  }, [loadDrafts]);\n\n  // Cleanup auto-save timer on unmount\n  useEffect(() => {\n    return () => {\n      if (autoSaveTimerRef.current) {\n        clearTimeout(autoSaveTimerRef.current);\n      }\n    };\n  }, []);\n\n  return {\n    persistence: {\n      draftQuiz,\n      isInitialized,\n      autoSaveStatus,\n      storageError,\n      lastSaved,\n    },\n    actions: {\n      updateDraft,\n      saveDraft,\n      clearDraft,\n      resetDraft,\n      initializeFromQuiz,\n      recoverDraft,\n    },\n  };\n};\n","/**\n * Enhanced Quiz Creation Wizard Hook with IndexedDB Auto-Save\n */\n\nimport type { Quiz } from \"../types\";\nimport { useWizardNavigation } from \"./useWizardNavigation\";\nimport { useWizardValidation } from \"./useWizardValidation\";\nimport { useWizardPersistenceWithStorage } from \"./useWizardPersistenceWithStorage\";\nimport { useWizardCompletion } from \"./useWizardCompletion\";\n\nexport interface UseQuizWizardWithStorageReturn {\n  currentStep: number;\n  steps: string[];\n  canProceed: boolean;\n  nextStep: () => void;\n  previousStep: () => void;\n  goToStep: (step: number) => void;\n  draftQuiz: Partial<Quiz>;\n  updateDraft: (updates: Partial<Quiz>) => void;\n  saveDraft: () => Promise<void>;\n  autoSaveStatus: \"idle\" | \"saving\" | \"saved\" | \"error\";\n  storageError: string | null;\n  lastSaved: Date | null;\n  validateStep: () => { isValid: boolean; errors: string[] };\n  completeWizard: () => Promise<Quiz>;\n  resetWizard: () => void;\n  recoverDraft: () => Promise<boolean>;\n}\n\nexport const useQuizWizardWithStorage = (\n  initialQuiz?: Partial<Quiz>\n): UseQuizWizardWithStorageReturn => {\n  const {\n    persistence: { draftQuiz, autoSaveStatus, storageError, lastSaved },\n    actions: persistenceActions,\n  } = useWizardPersistenceWithStorage(initialQuiz);\n\n  const validationHook = useWizardValidation({\n    currentStep: 0,\n    draftQuiz,\n  });\n\n  const {\n    navigation: { currentStep, steps, canProceed },\n    actions: navigationActions,\n  } = useWizardNavigation(validationHook.validateStep);\n\n  const updatedValidation = useWizardValidation({\n    currentStep,\n    draftQuiz,\n  });\n\n  const completionHook = useWizardCompletion({\n    draftQuiz,\n    validateAllSteps: updatedValidation.validateAllSteps,\n    clearDraft: persistenceActions.clearDraft,\n    resetDraft: persistenceActions.resetDraft,\n  });\n\n  const resetWizard = (): void => {\n    navigationActions.resetNavigation();\n    persistenceActions.clearDraft();\n  };\n\n  return {\n    currentStep,\n    steps,\n    canProceed,\n    nextStep: navigationActions.nextStep,\n    previousStep: navigationActions.previousStep,\n    goToStep: navigationActions.goToStep,\n    draftQuiz,\n    updateDraft: persistenceActions.updateDraft,\n    saveDraft: persistenceActions.saveDraft,\n    autoSaveStatus,\n    storageError,\n    lastSaved,\n    validateStep: updatedValidation.validateStep,\n    completeWizard: completionHook.completeWizard,\n    resetWizard,\n    recoverDraft: persistenceActions.recoverDraft,\n  };\n};\n","'use client';\nimport { createContext, Component, createElement, useContext, useState, useMemo, forwardRef } from 'react';\n\nconst ErrorBoundaryContext = createContext(null);\n\nconst initialState = {\n  didCatch: false,\n  error: null\n};\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.resetErrorBoundary = this.resetErrorBoundary.bind(this);\n    this.state = initialState;\n  }\n  static getDerivedStateFromError(error) {\n    return {\n      didCatch: true,\n      error\n    };\n  }\n  resetErrorBoundary() {\n    const {\n      error\n    } = this.state;\n    if (error !== null) {\n      var _this$props$onReset, _this$props;\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      (_this$props$onReset = (_this$props = this.props).onReset) === null || _this$props$onReset === void 0 ? void 0 : _this$props$onReset.call(_this$props, {\n        args,\n        reason: \"imperative-api\"\n      });\n      this.setState(initialState);\n    }\n  }\n  componentDidCatch(error, info) {\n    var _this$props$onError, _this$props2;\n    (_this$props$onError = (_this$props2 = this.props).onError) === null || _this$props$onError === void 0 ? void 0 : _this$props$onError.call(_this$props2, error, info);\n  }\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      didCatch\n    } = this.state;\n    const {\n      resetKeys\n    } = this.props;\n\n    // There's an edge case where if the thing that triggered the error happens to *also* be in the resetKeys array,\n    // we'd end up resetting the error boundary immediately.\n    // This would likely trigger a second error to be thrown.\n    // So we make sure that we don't check the resetKeys on the first call of cDU after the error is set.\n\n    if (didCatch && prevState.error !== null && hasArrayChanged(prevProps.resetKeys, resetKeys)) {\n      var _this$props$onReset2, _this$props3;\n      (_this$props$onReset2 = (_this$props3 = this.props).onReset) === null || _this$props$onReset2 === void 0 ? void 0 : _this$props$onReset2.call(_this$props3, {\n        next: resetKeys,\n        prev: prevProps.resetKeys,\n        reason: \"keys\"\n      });\n      this.setState(initialState);\n    }\n  }\n  render() {\n    const {\n      children,\n      fallbackRender,\n      FallbackComponent,\n      fallback\n    } = this.props;\n    const {\n      didCatch,\n      error\n    } = this.state;\n    let childToRender = children;\n    if (didCatch) {\n      const props = {\n        error,\n        resetErrorBoundary: this.resetErrorBoundary\n      };\n      if (typeof fallbackRender === \"function\") {\n        childToRender = fallbackRender(props);\n      } else if (FallbackComponent) {\n        childToRender = createElement(FallbackComponent, props);\n      } else if (fallback !== undefined) {\n        childToRender = fallback;\n      } else {\n        throw error;\n      }\n    }\n    return createElement(ErrorBoundaryContext.Provider, {\n      value: {\n        didCatch,\n        error,\n        resetErrorBoundary: this.resetErrorBoundary\n      }\n    }, childToRender);\n  }\n}\nfunction hasArrayChanged() {\n  let a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return a.length !== b.length || a.some((item, index) => !Object.is(item, b[index]));\n}\n\nfunction assertErrorBoundaryContext(value) {\n  if (value == null || typeof value.didCatch !== \"boolean\" || typeof value.resetErrorBoundary !== \"function\") {\n    throw new Error(\"ErrorBoundaryContext not found\");\n  }\n}\n\nfunction useErrorBoundary() {\n  const context = useContext(ErrorBoundaryContext);\n  assertErrorBoundaryContext(context);\n  const [state, setState] = useState({\n    error: null,\n    hasError: false\n  });\n  const memoized = useMemo(() => ({\n    resetBoundary: () => {\n      context.resetErrorBoundary();\n      setState({\n        error: null,\n        hasError: false\n      });\n    },\n    showBoundary: error => setState({\n      error,\n      hasError: true\n    })\n  }), [context.resetErrorBoundary]);\n  if (state.hasError) {\n    throw state.error;\n  }\n  return memoized;\n}\n\nfunction withErrorBoundary(component, errorBoundaryProps) {\n  const Wrapped = forwardRef((props, ref) => createElement(ErrorBoundary, errorBoundaryProps, createElement(component, {\n    ...props,\n    ref\n  })));\n\n  // Format for display in DevTools\n  const name = component.displayName || component.name || \"Unknown\";\n  Wrapped.displayName = \"withErrorBoundary(\".concat(name, \")\");\n  return Wrapped;\n}\n\nexport { ErrorBoundary, ErrorBoundaryContext, useErrorBoundary, withErrorBoundary };\n","/**\n * Quizzes Feature Type Definitions\n *\n * This file contains all TypeScript interfaces and types used throughout\n * the Quizzes feature. Centralized type definitions ensure consistency\n * and maintainability across all components, hooks, and services.\n *\n * Updated for new round-based quiz system with media file support:\n * - IndexedDB storage for large files\n * - Round types determine question types\n * - Media file uploads (pictures, audio, video)\n * - Golden Pyramid special format\n * - Time/points as number inputs with decimal support\n * - Breaking time settings for rounds\n *\n * @fileoverview Type definitions for Quizzes feature\n * @version 2.0.0\n * @since December 2025\n */\n\n/**\n * Supported media types for quiz questions\n */\nexport type MediaType = \"image\" | \"audio\" | \"video\";\n\n/**\n * Quiz question type\n * - single-answer: Single correct answer (renamed from text-answer)\n * - multiple-choice: Multiple choice question with 1-20 possible answers\n * - picture: Picture-based question with file upload\n * - audio: Audio-based question with file upload\n * - video: Video-based question with file upload\n */\nexport type QuestionType =\n  | \"single-answer\"\n  | \"multiple-choice\"\n  | \"picture\"\n  | \"audio\"\n  | \"video\";\n\n/**\n * Supported round types for quiz creation\n * Round type determines available question types and UI behavior\n */\nexport type RoundType =\n  | \"mixed\" // Mixed question types (user can select any type)\n  | \"single-answer-only\" // Only single answer questions (renamed from text-only)\n  | \"multiple-choice\" // Only multiple choice questions\n  | \"picture\" // Only picture questions with image uploads\n  | \"audio\" // Only audio questions with audio uploads\n  | \"video\" // Only video questions with video uploads\n  | \"golden-pyramid\"; // Special 4-question format\n\n/**\n * Round answer reveal mode\n */\nexport type AnswerRevealMode = \"after-each\" | \"after-all\";\n\n/**\n * Quiz difficulty levels for organization and filtering\n */\nexport type QuizDifficulty = \"easy\" | \"medium\" | \"hard\";\n\n/**\n * Quiz categories for organization\n */\nexport type QuizCategory =\n  | \"general\"\n  | \"sports\"\n  | \"history\"\n  | \"science\"\n  | \"geography\"\n  | \"entertainment\"\n  | \"literature\"\n  | \"art\"\n  | \"music\"\n  | \"technology\"\n  | \"custom\";\n\n/**\n * Supported media file types for PowerPoint compatibility\n */\nexport interface SupportedMediaTypes {\n  images: string[]; // ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'tiff', 'svg']\n  audio: string[]; // ['mp3', 'wav', 'wma', 'm4a']\n  video: string[]; // ['mp4', 'mov', 'wmv', 'avi']\n}\n\n/**\n * File size limits for different media types (in bytes)\n */\nexport interface FileSizeLimits {\n  image: number; // 10MB max per image\n  audio: number; // 20MB max per audio file\n  video: number; // 100MB max per video file\n  total: number; // 500MB max total quiz size\n}\n\n/**\n * Media file metadata for storage and display\n */\nexport interface MediaFile {\n  /** Unique identifier for the media file */\n  id: string;\n  /** Original filename with extension */\n  filename: string;\n  /** File type (image/audio/video) */\n  type: \"image\" | \"audio\" | \"video\";\n  /** File size in bytes */\n  size: number;\n  /** Base64 encoded file data for storage */\n  data: string;\n  /** MIME type for proper handling */\n  mimeType: string;\n  /** Thumbnail for images/videos (base64) */\n  thumbnail?: string;\n  /** Duration for audio/video files in seconds */\n  duration?: number;\n  /** Upload timestamp */\n  createdAt: Date;\n}\n\n/**\n * Quiz question interface (updated for new system)\n */\nexport interface QuizQuestion {\n  /** Unique identifier for the question */\n  id: string;\n  /** Question type determines UI and behavior */\n  type: QuestionType;\n  /** The main question text */\n  question: string;\n  /** Possible answers for multiple choice (1-20 answers), empty for single-answer */\n  possibleAnswers: string[];\n  /** Array of correct answer indices for Golden Pyramid (1,2,3,4 correct answers per question) */\n  correctAnswers: number[];\n  /** Single correct answer text for single-answer questions */\n  correctAnswerText?: string;\n  /** Optional explanation shown after answer */\n  explanation?: string;\n  /** Associated media file if any */\n  mediaFile?: MediaFile;\n  /** Question difficulty for organization */\n  difficulty: QuizDifficulty;\n  /** Points awarded for correct answer (decimal support) */\n  points: number;\n  /** Time limit in minutes (decimal support, e.g., 0.5 = 30 seconds) */\n  timeLimit: number;\n  /** Creation timestamp */\n  createdAt: Date;\n  /** Last modified timestamp */\n  updatedAt: Date;\n}\n\n/**\n * Round structure containing questions and round-level settings\n */\nexport interface Round {\n  /** Unique identifier for the round */\n  id: string;\n  /** Display name for the round (e.g., \"Round 1\") */\n  name: string;\n  /** Optional round description */\n  description?: string;\n  /** Round type (determines question types allowed) */\n  type: RoundType;\n  /** Optional round level/difficulty label */\n  level?: string;\n  /** Answer reveal mode for this round */\n  answerRevealMode: AnswerRevealMode;\n  /** Default time per question in this round (in minutes, decimal support) */\n  defaultTimePerQuestion: number;\n  /** Breaking time between rounds in minutes (default 1) */\n  breakingTime: number;\n  /** For Golden Pyramid: time for entire round instead of per question */\n  roundTimeLimit?: number;\n  /** For Golden Pyramid: points for entire round instead of per question */\n  roundPoints?: number;\n  /** List of questions in this round */\n  questions: QuizQuestion[];\n  /** Creation timestamp */\n  createdAt: Date;\n  /** Last modified timestamp */\n  updatedAt: Date;\n}\n\n/**\n * Complete quiz structure containing all quiz data (updated for new system)\n */\nexport interface Quiz {\n  /** Unique identifier for the quiz */\n  id: string;\n  /** Quiz title displayed to users */\n  title: string;\n  /** Optional quiz description */\n  description?: string;\n  /** Quiz category for organization */\n  category: QuizCategory;\n  /** Overall quiz difficulty */\n  difficulty: QuizDifficulty;\n  /** Quiz status for workflow management */\n  status: \"draft\" | \"completed\";\n  /** Array of all rounds in the quiz */\n  rounds: Round[];\n  /** Total estimated duration in minutes (calculated from questions + breaks) */\n  estimatedDuration: number;\n  /** Quiz creation timestamp */\n  createdAt: Date;\n  /** Last modified timestamp */\n  updatedAt: Date;\n  /** Quiz settings */\n  settings: QuizSettings;\n  /** Export metadata */\n  exportData?: QuizExportData;\n}\n\n/**\n * Quiz settings\n */\nexport interface QuizSettings {\n  /** Default time limit per question in minutes (decimal support) */\n  defaultTimeLimit: number;\n  /** Default points per question (decimal support) */\n  defaultPoints: number;\n  /** Default breaking time between rounds in minutes */\n  defaultBreakingTime: number;\n}\n\n/**\n * Quiz export metadata\n */\nexport interface QuizExportData {\n  /** Last export timestamp */\n  lastExported: Date;\n  /** Export format used */\n  format: \"powerpoint\";\n  /** Export settings used */\n  settings: ExportSettings;\n  /** File size of last export in bytes */\n  fileSize: number;\n  /** Whether presenter notes were included */\n  includePresenterNotes: boolean;\n}\n\n/**\n * Export settings for PowerPoint generation\n */\nexport interface ExportSettings {\n  /** Include presenter notes with questions/answers */\n  includePresenterNotes: boolean;\n  /** Slide layout template to use */\n  slideTemplate: \"standard\" | \"modern\" | \"minimal\";\n  /** Font size for questions */\n  questionFontSize: number;\n  /** Font size for options */\n  optionFontSize: number;\n  /** Include quiz metadata slide */\n  includeMetadata: boolean;\n  /** Include answer key at the end */\n  includeAnswerKey: boolean;\n  /** Compress images for smaller file size */\n  compressImages: boolean;\n  /** Image quality (1-100) when compressing */\n  imageQuality: number;\n}\n\n/**\n * Wizard step definition\n */\nexport interface WizardStep {\n  /** Step identifier */\n  id: string;\n  /** Display title for the step */\n  title: string;\n  /** Step description */\n  description: string;\n  /** Whether this step is completed */\n  completed: boolean;\n  /** Whether this step is currently active */\n  active: boolean;\n  /** Whether this step is accessible */\n  enabled: boolean;\n}\n\n/**\n * Quiz validation result\n */\nexport interface QuizValidation {\n  /** Whether the quiz is valid for export/save */\n  isValid: boolean;\n  /** Array of validation error messages */\n  errors: string[];\n  /** Array of validation warning messages */\n  warnings: string[];\n  /** Validation timestamp */\n  validatedAt: Date;\n}\n\n/**\n * Quizzes page component props\n */\nexport interface QuizzesPageProps {\n  /** Optional initial quiz to load */\n  initialQuiz?: Quiz;\n}\n\n/**\n * Quiz wizard component props\n */\nexport interface QuizWizardProps {\n  /** Callback when quiz is successfully created */\n  onQuizCreated: (quiz: Quiz) => void;\n  /** Callback when wizard is cancelled */\n  onCancel: () => void;\n  /** Optional quiz to edit (for edit mode) */\n  editQuiz?: Quiz;\n}\n\n/**\n * Question editor component props\n */\nexport interface QuestionEditorProps {\n  /** Current question being edited */\n  question: QuizQuestion;\n  /** Callback when question is updated */\n  onQuestionUpdate: (question: QuizQuestion) => void;\n  /** Callback when question is deleted */\n  onQuestionDelete: (questionId: string) => void;\n  /** Index of question in the round */\n  questionIndex: number;\n  /** Total number of questions in round */\n  totalQuestions: number;\n  /** Round type to determine UI behavior */\n  roundType: RoundType;\n}\n\n/**\n * Media upload component props\n */\nexport interface MediaUploadProps {\n  /** Accepted file types */\n  acceptedTypes: string[];\n  /** Maximum file size in bytes */\n  maxFileSize: number;\n  /** Callback when file is uploaded */\n  onFileUpload: (file: MediaFile) => void;\n  /** Callback when upload fails */\n  onUploadError: (error: string) => void;\n  /** Current uploaded file (if any) */\n  currentFile?: MediaFile;\n  /** File type being uploaded */\n  fileType: \"image\" | \"audio\" | \"video\";\n}\n\n/**\n * Export options component props\n */\nexport interface ExportOptionsProps {\n  /** Quiz to export */\n  quiz: Quiz;\n  /** Export settings */\n  settings: ExportSettings;\n  /** Callback when settings change */\n  onSettingsChange: (settings: ExportSettings) => void;\n  /** Callback to start export */\n  onStartExport: () => void;\n  /** Whether export is in progress */\n  isExporting: boolean;\n}\n\n/**\n * Quiz management hook return type\n */\nexport interface UseQuizManagementReturn {\n  /** Array of all saved quizzes */\n  quizzes: Quiz[];\n  /** Currently selected/active quiz */\n  currentQuiz: Quiz | null;\n  /** Whether quizzes are being loaded */\n  isLoading: boolean;\n  /** Any error that occurred */\n  error: string | null;\n  /** Create a new quiz */\n  createQuiz: (\n    quizData: Omit<Quiz, \"id\" | \"createdAt\" | \"updatedAt\">\n  ) => Promise<Quiz>;\n  /** Update an existing quiz */\n  updateQuiz: (id: string, updates: Partial<Quiz>) => Promise<Quiz>;\n  /** Delete a quiz */\n  deleteQuiz: (id: string) => Promise<void>;\n  /** Load a specific quiz */\n  loadQuiz: (id: string) => Promise<Quiz | null>;\n  /** Clear current quiz */\n  clearCurrentQuiz: () => void;\n  /** Export quiz to PowerPoint */\n  exportToPowerPoint: (\n    quizId: string,\n    settings?: ExportSettings\n  ) => Promise<void>;\n  /** Set quizzes */\n  setQuizzes: React.Dispatch<React.SetStateAction<Quiz[]>>;\n}\n\n/**\n * Quiz wizard hook return type\n */\nexport interface UseQuizWizardReturn {\n  /** Current wizard step */\n  currentStep: number;\n  /** Array of all wizard steps */\n  steps: WizardStep[];\n  /** Draft quiz being created */\n  draftQuiz: Partial<Quiz>;\n  /** Whether wizard can proceed to next step */\n  canProceed: boolean;\n  /** Move to next step */\n  nextStep: () => void;\n  /** Move to previous step */\n  previousStep: () => void;\n  /** Jump to specific step */\n  goToStep: (stepIndex: number) => void;\n  /** Update draft quiz data */\n  updateDraft: (updates: Partial<Quiz>) => void;\n  /** Validate current step */\n  validateStep: () => QuizValidation;\n  /** Save draft quiz */\n  saveDraft: () => Promise<void>;\n  /** Complete wizard and create quiz */\n  completeWizard: () => Promise<Quiz>;\n  /** Reset wizard to beginning */\n  resetWizard: () => void;\n}\n\n/**\n * File size limits constants\n */\nexport const FILE_SIZE_LIMITS: FileSizeLimits = {\n  image: 10 * 1024 * 1024, // 10MB\n  audio: 20 * 1024 * 1024, // 20MB\n  video: 100 * 1024 * 1024, // 100MB\n  total: 500 * 1024 * 1024, // 500MB\n};\n\n/**\n * Quiz validation constants\n */\nexport const QUIZ_CONSTANTS = {\n  MAX_TITLE_LENGTH: 100,\n  MIN_ROUNDS: 1,\n  MIN_QUESTIONS: 1,\n  MAX_QUESTIONS: 100,\n  MIN_OPTIONS: 2,\n  MAX_OPTIONS: 20,\n  FILE_SIZE_LIMITS: FILE_SIZE_LIMITS,\n} as const;\n\n/**\n * Supported file formats for PowerPoint compatibility\n */\nexport const SUPPORTED_MEDIA_TYPES: SupportedMediaTypes = {\n  images: [\"jpg\", \"jpeg\", \"png\", \"gif\", \"bmp\", \"tiff\", \"svg\"],\n  audio: [\"mp3\", \"wav\", \"wma\", \"m4a\"],\n  video: [\"mp4\", \"mov\", \"wmv\", \"avi\"],\n};\n\n/**\n * Round type configurations\n */\nexport const ROUND_TYPE_CONFIG = {\n  mixed: {\n    label: \"Any Type of Question\",\n    description: \"Questions of any type\",\n    allowedQuestionTypes: [\n      \"single-answer\",\n      \"multiple-choice\",\n      \"picture\",\n      \"audio\",\n      \"video\",\n    ] as QuestionType[],\n    canSelectQuestionType: true,\n  },\n  \"single-answer-only\": {\n    label: \"Question-Answer\",\n    description: \"Only single answer questions\",\n    allowedQuestionTypes: [\"single-answer\"] as QuestionType[],\n    canSelectQuestionType: false,\n  },\n  \"multiple-choice\": {\n    label: \"Multiple Choice Question\",\n    description: \"Only multiple choice questions\",\n    allowedQuestionTypes: [\"multiple-choice\"] as QuestionType[],\n    canSelectQuestionType: false,\n  },\n  picture: {\n    label: \"Picture Question\",\n    description: \"Questions with picture uploads\",\n    allowedQuestionTypes: [\"picture\"] as QuestionType[],\n    canSelectQuestionType: false,\n  },\n  audio: {\n    label: \"Audio Question\",\n    description: \"Questions with audio uploads\",\n    allowedQuestionTypes: [\"audio\"] as QuestionType[],\n    canSelectQuestionType: false,\n  },\n  video: {\n    label: \"Video Question\",\n    description: \"Questions with video uploads\",\n    allowedQuestionTypes: [\"video\"] as QuestionType[],\n    canSelectQuestionType: false,\n  },\n  \"golden-pyramid\": {\n    label: \"Golden Pyramid Question\",\n    description: \"Special 4-question format\",\n    allowedQuestionTypes: [\"multiple-choice\"] as QuestionType[],\n    canSelectQuestionType: false,\n    specialFormat: true,\n    prePopulatedQuestions: 4,\n  },\n} as const;\n","/**\n * Basic Info Step Component\n *\n * First step of the quiz creation wizard for collecting basic quiz information\n * including title, description, category, difficulty, and author details.\n *\n * Features:\n * - Mobile-first responsive form layout\n * - Real-time validation feedback\n * - Auto-save draft functionality\n * - Category and difficulty selection\n * - Character count indicators\n *\n * @fileoverview Basic information step for quiz creation wizard\n * @version 1.0.0\n * @since December 2025\n */\n\nimport React from \"react\";\nimport {\n  Box,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Typography,\n  Grid,\n  Chip,\n  FormHelperText,\n  InputAdornment,\n  Button,\n} from \"@mui/material\";\nimport {\n  Category as CategoryIcon,\n  TrendingUp as DifficultyIcon,\n  Delete as DeleteIcon,\n} from \"@mui/icons-material\";\nimport type {\n  Quiz,\n  QuizValidation,\n  QuizCategory,\n  QuizDifficulty,\n} from \"../../types\";\nimport { QUIZ_CONSTANTS } from \"../../types\";\n\n/**\n * Props for the BasicInfoStep component\n */\ninterface BasicInfoStepProps {\n  /** Current draft quiz data */\n  draftQuiz: Partial<Quiz>;\n  /** Function to update draft quiz data */\n  updateDraft: (updates: Partial<Quiz>) => void;\n  /** Current validation state */\n  validation: QuizValidation;\n  /** Function to handle quiz deletion (only shown when editing) */\n  onDeleteQuiz?: () => void;\n  /** Whether this is edit mode (to show delete button) */\n  isEditMode?: boolean;\n  /** Function to handle continuing to questions section */\n  onContinue?: () => void;\n}\n\n/**\n * Available quiz categories with display labels\n */\nconst QUIZ_CATEGORIES: Array<{\n  value: QuizCategory;\n  label: string;\n  description: string;\n}> = [\n  {\n    value: \"general\",\n    label: \"General Knowledge\",\n    description: \"Mixed topics and trivia\",\n  },\n  {\n    value: \"sports\",\n    label: \"Sports\",\n    description: \"Sports, teams, and athletics\",\n  },\n  {\n    value: \"history\",\n    label: \"History\",\n    description: \"Historical events and figures\",\n  },\n  {\n    value: \"science\",\n    label: \"Science\",\n    description: \"Science, technology, and nature\",\n  },\n  {\n    value: \"geography\",\n    label: \"Geography\",\n    description: \"Countries, capitals, and locations\",\n  },\n  {\n    value: \"entertainment\",\n    label: \"Entertainment\",\n    description: \"Movies, TV, and celebrities\",\n  },\n  {\n    value: \"literature\",\n    label: \"Literature\",\n    description: \"Books, authors, and poetry\",\n  },\n  {\n    value: \"art\",\n    label: \"Art\",\n    description: \"Visual arts, paintings, and artists\",\n  },\n  {\n    value: \"music\",\n    label: \"Music\",\n    description: \"Songs, artists, and musical theory\",\n  },\n  {\n    value: \"technology\",\n    label: \"Technology\",\n    description: \"Computers, software, and gadgets\",\n  },\n  { value: \"custom\", label: \"Custom\", description: \"Your own custom category\" },\n];\n\n/**\n * Available difficulty levels with descriptions\n */\nconst DIFFICULTY_LEVELS: Array<{\n  value: QuizDifficulty;\n  label: string;\n  description: string;\n  color: string;\n}> = [\n  {\n    value: \"easy\",\n    label: \"Easy\",\n    description: \"Simple questions for beginners\",\n    color: \"success\",\n  },\n  {\n    value: \"medium\",\n    label: \"Medium\",\n    description: \"Moderate difficulty questions\",\n    color: \"warning\",\n  },\n  {\n    value: \"hard\",\n    label: \"Hard\",\n    description: \"Challenging questions for experts\",\n    color: \"error\",\n  },\n];\n\n/**\n * Basic Info Step Component\n *\n * Collects fundamental quiz information in a user-friendly form.\n * Provides real-time validation and helpful hints for quiz creation.\n *\n * @param props - Component props\n * @returns JSX element representing the basic info step\n */\nexport const BasicInfoStep: React.FC<BasicInfoStepProps> = ({\n  draftQuiz,\n  updateDraft,\n  validation,\n  onDeleteQuiz,\n  isEditMode,\n  onContinue,\n}) => {\n  /**\n   * Gets error message for a specific field\n   */\n  const getFieldError = React.useCallback(\n    (fieldName: string): string | undefined => {\n      return validation.errors.find((error) =>\n        error.toLowerCase().includes(fieldName.toLowerCase())\n      );\n    },\n    [validation.errors]\n  );\n\n  const timeValue = draftQuiz.defaultTimeLimit;\n  const displayTime = timeValue === undefined ? \"\" : Math.round(timeValue / 60);\n  const timeForValidation = timeValue ?? 60; // 60 seconds = 1 minute\n  const isTimeValid = timeForValidation > 0 && timeForValidation <= 3600; // 1 second to 60 minutes\n\n  const getTimeError = () => {\n    if (timeValue !== undefined && !isTimeValid) {\n      if (timeValue <= 0) return \"Time must be > 0 minutes.\";\n      if (timeValue > 3600) return \"Time must be <= 60 minutes.\";\n    }\n    return undefined;\n  };\n\n  const timeError = getTimeError();\n\n  return (\n    <Box sx={{ maxWidth: 1000, mx: \"auto\" }}>\n      <Grid container spacing={4}>\n        {/* Quiz Title */}\n        <Grid size={{ xs: 12 }}>\n          <TextField\n            fullWidth\n            id=\"quiz-title\"\n            name=\"title\"\n            label=\"Quiz Title\"\n            placeholder=\"e.g., General Knowledge Quiz, Science Facts Challenge\"\n            value={draftQuiz.title || \"\"}\n            onChange={(e) => updateDraft({ title: e.target.value })}\n            error={!!getFieldError(\"title\")}\n            helperText={\n              getFieldError(\"title\") ||\n              `${(draftQuiz.title || \"\").length}/${\n                QUIZ_CONSTANTS.MAX_TITLE_LENGTH\n              } characters`\n            }\n            inputProps={{\n              maxLength: QUIZ_CONSTANTS.MAX_TITLE_LENGTH,\n              \"aria-label\": \"Quiz title\",\n            }}\n            size=\"medium\"\n            sx={{ mb: 3 }}\n          />\n        </Grid>\n\n        {/* Quiz Description */}\n        <Grid size={{ xs: 12 }}>\n          <TextField\n            fullWidth\n            id=\"quiz-description\"\n            name=\"description\"\n            multiline\n            rows={4}\n            label=\"Description (Optional)\"\n            placeholder=\"Brief description of what this quiz covers...\"\n            value={draftQuiz.description || \"\"}\n            onChange={(e) => updateDraft({ description: e.target.value })}\n            helperText={`${draftQuiz.description?.length || 0}/500 characters`}\n            inputProps={{\n              maxLength: 500,\n            }}\n            size=\"medium\"\n            sx={{ mb: 3 }}\n          />\n        </Grid>\n\n        {/* Author and Category row */}\n        <Grid size={{ xs: 12, md: 6 }}>\n          <FormControl\n            fullWidth\n            error={!!getFieldError(\"category\")}\n            size=\"medium\"\n          >\n            <InputLabel>Quiz Category</InputLabel>\n            <Select\n              id=\"quiz-category\"\n              name=\"category\"\n              value={draftQuiz.category || \"general\"}\n              onChange={(e) =>\n                updateDraft({ category: e.target.value as QuizCategory })\n              }\n              label=\"Quiz Category\"\n              aria-label=\"Quiz category selection\"\n              startAdornment={\n                <CategoryIcon sx={{ mr: 1, color: \"text.secondary\" }} />\n              }\n            >\n              {QUIZ_CATEGORIES.map((category) => (\n                <MenuItem key={category.value} value={category.value}>\n                  <Box>\n                    <Typography variant=\"body1\">{category.label}</Typography>\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      {category.description}\n                    </Typography>\n                  </Box>\n                </MenuItem>\n              ))}\n            </Select>\n            <FormHelperText>\n              {getFieldError(\"category\") ||\n                \"Choose the main topic of your quiz\"}\n            </FormHelperText>\n          </FormControl>\n        </Grid>\n\n        {/* Difficulty Level */}\n        <Grid size={{ xs: 12, md: 6 }}>\n          <FormControl\n            fullWidth\n            error={!!getFieldError(\"difficulty\")}\n            size=\"medium\"\n          >\n            <InputLabel>Difficulty Level</InputLabel>\n            <Select\n              id=\"quiz-difficulty\"\n              name=\"difficulty\"\n              value={draftQuiz.difficulty || \"medium\"}\n              onChange={(e) =>\n                updateDraft({\n                  difficulty: e.target.value as QuizDifficulty,\n                })\n              }\n              label=\"Difficulty Level\"\n              aria-label=\"Difficulty level selection\"\n              startAdornment={\n                <DifficultyIcon sx={{ mr: 1, color: \"text.secondary\" }} />\n              }\n            >\n              {DIFFICULTY_LEVELS.map((level) => (\n                <MenuItem key={level.value} value={level.value}>\n                  <Box display=\"flex\" alignItems=\"center\" gap={2} width=\"100%\">\n                    <Chip\n                      label={level.label}\n                      size=\"small\"\n                      color={level.color as any}\n                      variant=\"outlined\"\n                    />\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      {level.description}\n                    </Typography>\n                  </Box>\n                </MenuItem>\n              ))}\n            </Select>\n            <FormHelperText>\n              {getFieldError(\"difficulty\") ||\n                \"Set the challenge level for your quiz\"}\n            </FormHelperText>\n          </FormControl>\n        </Grid>\n\n        <Box sx={{ mt: 3, width: \"100%\" }}>\n          <Typography gutterBottom>Default Time Per Question</Typography>\n          <TextField\n            fullWidth\n            type=\"number\"\n            label=\"1 Minute by Default\"\n            placeholder=\"1 Minute by Default\"\n            value={displayTime}\n            onChange={(e) => {\n              const val = e.target.value;\n              updateDraft({\n                defaultTimeLimit: val === \"\" ? undefined : Number(val) * 60,\n              });\n            }}\n            error={!!timeError}\n            helperText={\n              timeError ||\n              \"This will be the default time limit for each new question. You can override it per question.\"\n            }\n            inputProps={{\n              step: 0.5,\n              min: 0.1,\n              \"aria-label\": \"Default time per question in minutes\",\n            }}\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\">minutes</InputAdornment>\n              ),\n            }}\n            size=\"medium\"\n            sx={{\n              mb: 1,\n              \"& .MuiOutlinedInput-root\": {\n                \"&.Mui-error fieldset\": {\n                  borderColor: \"error.main\",\n                },\n              },\n            }}\n          />\n        </Box>\n      </Grid>\n\n      {/* Delete and Continue Buttons Row */}\n      <Box\n        sx={{\n          mt: 4,\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n          gap: 2,\n        }}\n      >\n        {/* Delete Button - only show when editing */}\n        {isEditMode && onDeleteQuiz && (\n          <Button\n            variant=\"outlined\"\n            color=\"error\"\n            onClick={onDeleteQuiz}\n            startIcon={<DeleteIcon />}\n            size=\"large\"\n            sx={{\n              minWidth: { xs: \"auto\", sm: 150 },\n              height: 48,\n              borderColor: \"error.main\",\n              color: \"error.main\",\n              \"&:hover\": {\n                borderColor: \"error.dark\",\n                backgroundColor: \"error.light\",\n                color: \"error.dark\",\n              },\n              // Mobile: Show only icon\n              \"& .MuiButton-startIcon\": {\n                margin: { xs: 0, sm: \"0 8px 0 -4px\" },\n              },\n              \"& .MuiButton-startIcon + *\": {\n                display: { xs: \"none\", sm: \"inline\" },\n              },\n            }}\n          >\n            <Box\n              component=\"span\"\n              sx={{\n                display: { xs: \"none\", sm: \"inline\" },\n              }}\n            >\n              Delete Quiz\n            </Box>\n          </Button>\n        )}\n\n        {/* Spacer to center the Continue button when no delete button */}\n        {!isEditMode && <Box />}\n\n        {/* Continue to Questions Button - always centered */}\n        <Button\n          variant=\"contained\"\n          onClick={onContinue}\n          disabled={!draftQuiz.title?.trim() || !isTimeValid}\n          size=\"large\"\n          sx={{\n            minWidth: { xs: 120, sm: 200 },\n            height: 48,\n            boxShadow: 2,\n            \"&:hover\": {\n              boxShadow: 4,\n            },\n          }}\n        >\n          <Box\n            component=\"span\"\n            sx={{\n              display: { xs: \"none\", sm: \"inline\" },\n            }}\n          >\n            Continue to Questions\n          </Box>\n          <Box\n            component=\"span\"\n            sx={{\n              display: { xs: \"inline\", sm: \"none\" },\n            }}\n          >\n            Continue\n          </Box>\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n","/**\n * Questions Step State Management Hook\n *\n * Custom hook that manages all the complex state for the QuestionsStep component.\n * Extracted from the monolithic component to reduce useState complexity and\n * improve maintainability following React best practices.\n *\n * Features:\n * - Round navigation state\n * - Modal visibility state\n * - AI generation state\n * - Question editing state\n * - Form validation state\n *\n * @fileoverview State management hook for QuestionsStep\n * @version 1.0.0\n * @since December 2025\n */\n\nimport { useState, useCallback, useEffect } from \"react\";\nimport type {\n  Quiz,\n  Round,\n  QuizQuestion,\n  RoundType,\n  AnswerRevealMode,\n  QuizDifficulty,\n} from \"../../../types\";\nimport type { AIQuestionParams } from \"../../../services/aiQuestionService\";\n\n// Types for the hook\nexport interface RoundFormState {\n  description: string;\n  type: RoundType;\n  answerRevealMode: AnswerRevealMode;\n  defaultTimePerQuestion: number;\n  breakingTime: number; // Breaking time in minutes (default 5)\n}\n\nexport interface QuestionsStepState {\n  // Round navigation\n  currentRoundIdx: number;\n\n  // Round modal state\n  roundModalOpen: boolean;\n  roundModalMode: \"add\" | \"edit\";\n  editingRound: Round | null;\n  roundForm: RoundFormState;\n\n  // Question modals\n  manualDialogOpen: boolean;\n  manualQuestion: QuizQuestion | null;\n  editingQuestionId: string | null;\n\n  // AI generation state\n  aiDialogOpen: boolean;\n  aiGenerating: boolean;\n  aiStatus: string;\n  aiError: string;\n  aiErrorDismissed: boolean;\n  aiSettings: AIQuestionParams;\n\n  // Delete confirmations\n  deleteRoundConfirmOpen: boolean;\n  deleteQuestionConfirmOpen: boolean;\n  pendingDeleteQuestionId: string | null;\n}\n\nexport interface QuestionsStepActions {\n  // Round navigation\n  setCurrentRoundIdx: (idx: number) => void;\n  goToPrevRound: () => void;\n  goToNextRound: () => void;\n\n  // Round modal actions\n  openRoundModal: (mode: \"add\" | \"edit\", round?: Round) => void;\n  closeRoundModal: () => void;\n  updateRoundForm: (field: keyof RoundFormState, value: any) => void;\n\n  // Question modal actions\n  openManualDialog: () => void;\n  closeManualDialog: () => void;\n  setManualQuestion: (question: QuizQuestion | null) => void;\n  setEditingQuestionId: (id: string | null) => void;\n\n  // AI generation actions\n  openAIDialog: () => void;\n  closeAIDialog: () => void;\n  setAiGenerating: (generating: boolean) => void;\n  setAiStatus: (status: string) => void;\n  setAiError: (error: string) => void;\n  setAiErrorDismissed: (dismissed: boolean) => void;\n  setAiSettings: (settings: AIQuestionParams) => void;\n\n  // Delete confirmation actions\n  openDeleteRoundConfirm: () => void;\n  closeDeleteRoundConfirm: () => void;\n  openDeleteQuestionConfirm: (questionId: string) => void;\n  closeDeleteQuestionConfirm: () => void;\n}\n\nexport interface UseQuestionsStepStateReturn {\n  state: QuestionsStepState;\n  actions: QuestionsStepActions;\n  derived: {\n    rounds: Round[];\n    currentRound: Round | null;\n    isRoundFormValid: boolean;\n  };\n}\n\n/**\n * Questions Step State Hook\n */\nexport const useQuestionsStepState = (\n  draftQuiz: Partial<Quiz>\n): UseQuestionsStepStateReturn => {\n  // Round navigation state\n  const [currentRoundIdx, setCurrentRoundIdx] = useState(0);\n\n  // Round modal state\n  const [roundModalOpen, setRoundModalOpen] = useState(false);\n  const [roundModalMode, setRoundModalMode] = useState<\"add\" | \"edit\">(\"add\");\n  const [editingRound, setEditingRound] = useState<Round | null>(null);\n\n  // Round form state\n  const [roundForm, setRoundForm] = useState<RoundFormState>({\n    description: \"\",\n    type: \"mixed\",\n    answerRevealMode: \"after-all\",\n    defaultTimePerQuestion: (draftQuiz.defaultTimeLimit || 60) / 60, // Convert seconds to minutes\n    breakingTime: 5, // Changed default to 5 minutes breaking time\n  });\n\n  // Question modal state\n  const [manualDialogOpen, setManualDialogOpen] = useState(false);\n  const [manualQuestion, setManualQuestion] = useState<QuizQuestion | null>(\n    null\n  );\n  const [editingQuestionId, setEditingQuestionId] = useState<string | null>(\n    null\n  );\n\n  // AI generation state\n  const [aiDialogOpen, setAiDialogOpen] = useState(false);\n  const [aiGenerating, setAiGenerating] = useState(false);\n  const [aiStatus, setAiStatus] = useState(\"\");\n  const [aiError, setAiError] = useState(\"\");\n  const [aiErrorDismissed, setAiErrorDismissed] = useState(false);\n  const [aiSettings, setAiSettings] = useState<AIQuestionParams>({\n    questionType: \"text-answer\",\n    language: \"English\",\n    topicHint: \"\",\n    category: \"general\",\n    difficulty: \"medium\",\n    optionsCount: 4,\n  });\n\n  // Delete confirmation state\n  const [deleteRoundConfirmOpen, setDeleteRoundConfirmOpen] = useState(false);\n  const [deleteQuestionConfirmOpen, setDeleteQuestionConfirmOpen] =\n    useState(false);\n  const [pendingDeleteQuestionId, setPendingDeleteQuestionId] = useState<\n    string | null\n  >(null);\n\n  // Derived state\n  const rounds = draftQuiz.rounds || [];\n  const currentRound = rounds[currentRoundIdx] || null;\n\n  // Round form validation - description is now optional\n  const isRoundFormValid =\n    roundForm.type &&\n    roundForm.answerRevealMode &&\n    roundForm.defaultTimePerQuestion >= 0.1 && // Minimum 0.1 minutes (6 seconds)\n    roundForm.breakingTime >= 0.1; // Minimum 0.1 minutes (6 seconds) for breaking time\n\n  // When opening modal for edit, populate form\n  useEffect(() => {\n    if (roundModalOpen && roundModalMode === \"edit\" && editingRound) {\n      setRoundForm({\n        description: editingRound.description || \"\",\n        type: editingRound.type,\n        answerRevealMode: editingRound.answerRevealMode,\n        defaultTimePerQuestion: editingRound.defaultTimePerQuestion,\n        breakingTime: editingRound.breakingTime || 1, // Default to 1 minute if not set\n      });\n    } else if (roundModalOpen && roundModalMode === \"add\") {\n      // Reset form for add mode\n      setRoundForm({\n        description: \"\",\n        type: \"mixed\",\n        answerRevealMode: \"after-all\", // Changed default to \"after-all\"\n        defaultTimePerQuestion: (draftQuiz.defaultTimeLimit || 60) / 60, // Convert seconds to minutes\n        breakingTime: 5, // Changed default to 5 minutes breaking time\n      });\n    }\n  }, [roundModalOpen, roundModalMode, editingRound, draftQuiz]);\n\n  // Actions\n  const actions: QuestionsStepActions = {\n    // Round navigation\n    setCurrentRoundIdx,\n    goToPrevRound: useCallback(() => {\n      setCurrentRoundIdx((prev) => Math.max(0, prev - 1));\n    }, []),\n    goToNextRound: useCallback(() => {\n      setCurrentRoundIdx((prev) => Math.min(rounds.length - 1, prev + 1));\n    }, [rounds.length]),\n\n    // Round modal actions\n    openRoundModal: useCallback((mode: \"add\" | \"edit\", round?: Round) => {\n      setRoundModalMode(mode);\n      setEditingRound(round || null);\n      setRoundModalOpen(true);\n    }, []),\n    closeRoundModal: useCallback(() => {\n      setRoundModalOpen(false);\n      setEditingRound(null);\n    }, []),\n    updateRoundForm: useCallback((field: keyof RoundFormState, value: any) => {\n      setRoundForm((prev) => ({ ...prev, [field]: value }));\n    }, []),\n\n    // Question modal actions\n    openManualDialog: useCallback(() => {\n      setManualDialogOpen(true);\n    }, []),\n    closeManualDialog: useCallback(() => {\n      setManualDialogOpen(false);\n      setManualQuestion(null);\n    }, []),\n    setManualQuestion,\n    setEditingQuestionId,\n\n    // AI generation actions\n    openAIDialog: useCallback(() => {\n      setAiDialogOpen(true);\n      setAiError(\"\");\n      setAiErrorDismissed(false);\n    }, []),\n    closeAIDialog: useCallback(() => {\n      setAiDialogOpen(false);\n    }, []),\n    setAiGenerating,\n    setAiStatus,\n    setAiError,\n    setAiErrorDismissed,\n    setAiSettings,\n\n    // Delete confirmation actions\n    openDeleteRoundConfirm: useCallback(() => {\n      setDeleteRoundConfirmOpen(true);\n    }, []),\n    closeDeleteRoundConfirm: useCallback(() => {\n      setDeleteRoundConfirmOpen(false);\n    }, []),\n    openDeleteQuestionConfirm: useCallback((questionId: string) => {\n      setPendingDeleteQuestionId(questionId);\n      setDeleteQuestionConfirmOpen(true);\n    }, []),\n    closeDeleteQuestionConfirm: useCallback(() => {\n      setDeleteQuestionConfirmOpen(false);\n      setPendingDeleteQuestionId(null);\n    }, []),\n  };\n\n  const state: QuestionsStepState = {\n    currentRoundIdx,\n    roundModalOpen,\n    roundModalMode,\n    editingRound,\n    roundForm,\n    manualDialogOpen,\n    manualQuestion,\n    editingQuestionId,\n    aiDialogOpen,\n    aiGenerating,\n    aiStatus,\n    aiError,\n    aiErrorDismissed,\n    aiSettings,\n    deleteRoundConfirmOpen,\n    deleteQuestionConfirmOpen,\n    pendingDeleteQuestionId,\n  };\n\n  return {\n    state,\n    actions,\n    derived: {\n      rounds,\n      currentRound,\n      isRoundFormValid,\n    },\n  };\n};\n","/**\n * Round Navigation Component\n *\n * Handles navigation between rounds and provides round management actions.\n * This component was extracted from the monolithic QuestionsStep component\n * to improve maintainability and follow Single Responsibility Principle.\n *\n * Features:\n * - Integrated design: < [Round X/Y] [Add] > navigation with beautiful styling\n * - Round button remains central between navigation arrows\n * - Add Round button integrated between Round counter and forward arrow\n * - Responsive design: \"Add Round\" text on web, \"+\" icon on mobile\n * - Beautiful Material-UI styling with gradients and animations\n *\n * @fileoverview Round navigation component for quiz wizard\n * @version 8.0.0 (Integrated Add Round button)\n * @since December 2024\n */\n\nimport React from \"react\";\nimport { Box, Typography, Button, IconButton, Fab } from \"@mui/material\";\nimport {\n  ChevronLeft as ChevronLeftIcon,\n  ChevronRight as ChevronRightIcon,\n  Add as AddIcon,\n  Edit as EditIcon,\n} from \"@mui/icons-material\";\nimport type { Round } from \"../../../types\";\n\ninterface RoundNavigationProps {\n  /** Array of all rounds */\n  rounds: Round[];\n  /** Current round index */\n  currentRoundIdx: number;\n  /** Current round object */\n  currentRound: Round | null;\n  /** Go to previous round */\n  onPreviousRound: () => void;\n  /** Go to next round */\n  onNextRound: () => void;\n  /** Add new round */\n  onAddRound: () => void;\n  /** Edit current round */\n  onEditRound: () => void;\n  /** Delete current round */\n  onDeleteRound: () => void;\n}\n\n/**\n * Round Navigation Component\n *\n * Provides navigation controls and round management actions for the quiz wizard.\n * Features integrated Add Round button inside the navigation bar.\n *\n * @param props - Component props including rounds data and navigation callbacks\n * @returns JSX element representing the round navigation interface\n */\nexport const RoundNavigation: React.FC<RoundNavigationProps> = ({\n  rounds,\n  currentRoundIdx,\n  currentRound,\n  onPreviousRound,\n  onNextRound,\n  onAddRound,\n  onEditRound,\n  onDeleteRound,\n}) => {\n  const hasRounds = rounds.length > 0;\n  const canGoBack = hasRounds && currentRoundIdx > 0;\n  const canGoForward = hasRounds && currentRoundIdx < rounds.length - 1;\n\n  return (\n    <Box sx={{ mb: 3 }}>\n      {/* Integrated Navigation Bar */}\n      <Box\n        sx={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          gap: { xs: 0.5, sm: 1.5 },\n          p: { xs: 1.5, sm: 2 },\n          borderRadius: 3,\n          bgcolor: \"background.paper\",\n          border: 1,\n          borderColor: \"divider\",\n          boxShadow: \"0 2px 8px rgba(0,0,0,0.08)\",\n          transition: \"all 0.2s ease-in-out\",\n          \"&:hover\": {\n            boxShadow: \"0 4px 16px rgba(0,0,0,0.12)\",\n          },\n        }}\n      >\n        {/* Left Navigation Arrow - At Beginning */}\n        <Fab\n          onClick={onPreviousRound}\n          disabled={!canGoBack}\n          size=\"medium\"\n          sx={{\n            width: { xs: 36, sm: 44 },\n            height: { xs: 36, sm: 44 },\n            minWidth: { xs: 36, sm: 44 },\n            bgcolor: canGoBack ? \"primary.main\" : \"grey.200\",\n            color: canGoBack ? \"white\" : \"grey.400\",\n            boxShadow: canGoBack ? 2 : 1,\n            transition: \"all 0.3s cubic-bezier(0.4, 0, 0.2, 1)\",\n            transform: canGoBack ? \"scale(1)\" : \"scale(0.9)\",\n            \"&:hover\": {\n              bgcolor: canGoBack ? \"primary.dark\" : \"grey.200\",\n              transform: canGoBack ? \"scale(1.05)\" : \"scale(0.9)\",\n              boxShadow: canGoBack ? 3 : 1,\n            },\n            \"&:active\": {\n              transform: canGoBack ? \"scale(0.95)\" : \"scale(0.9)\",\n            },\n            \"&:disabled\": {\n              bgcolor: \"grey.200\",\n              color: \"grey.400\",\n              cursor: \"not-allowed\",\n            },\n          }}\n          aria-label=\"Previous round\"\n        >\n          <ChevronLeftIcon sx={{ fontSize: { xs: \"1.1rem\", sm: \"1.3rem\" } }} />\n        </Fab>\n\n        {/* Spacer for center positioning */}\n        <Box sx={{ flex: 1 }} />\n\n        {/* Center Round Button (Only show if rounds exist) */}\n        {hasRounds ? (\n          <Button\n            onClick={onEditRound}\n            endIcon={\n              <EditIcon sx={{ fontSize: { xs: \"0.9rem\", sm: \"1rem\" } }} />\n            }\n            sx={{\n              borderRadius: 3,\n              textTransform: \"none\",\n              fontWeight: 600,\n              fontSize: { xs: \"0.8rem\", sm: \"0.9rem\" },\n              px: { xs: 2, sm: 3 },\n              py: { xs: 1, sm: 1.2 },\n              background: \"linear-gradient(45deg, #1976d2, #42a5f5)\",\n              color: \"white\",\n              boxShadow: \"0 2px 8px rgba(25, 118, 210, 0.3)\",\n              transition: \"all 0.3s cubic-bezier(0.4, 0, 0.2, 1)\",\n              minWidth: { xs: 90, sm: 120 },\n              \"&:hover\": {\n                background: \"linear-gradient(45deg, #1565c0, #1976d2)\",\n                boxShadow: \"0 4px 12px rgba(25, 118, 210, 0.4)\",\n                transform: \"translateY(-1px)\",\n              },\n              \"&:active\": {\n                transform: \"translateY(0px)\",\n              },\n            }}\n          >\n            <Typography\n              variant=\"inherit\"\n              sx={{\n                fontWeight: 600,\n                fontSize: \"inherit\",\n                whiteSpace: \"nowrap\",\n              }}\n            >\n              Round {currentRoundIdx + 1}/{rounds.length}\n            </Typography>\n          </Button>\n        ) : (\n          <Typography\n            variant=\"body2\"\n            sx={{\n              color: \"text.secondary\",\n              fontWeight: 500,\n              px: { xs: 2, sm: 3 },\n              fontSize: { xs: \"0.8rem\", sm: \"0.9rem\" },\n            }}\n          >\n            No rounds yet\n          </Typography>\n        )}\n\n        {/* Add Round Button - Next to Round Button */}\n        <Button\n          onClick={onAddRound}\n          sx={{\n            borderRadius: { xs: \"50%\", sm: 3 }, // Circular on mobile, rounded on web\n            textTransform: \"none\",\n            fontWeight: { xs: 600, sm: 500 },\n            fontSize: { xs: \"1.4rem\", sm: \"0.8rem\" },\n            px: { xs: 0, sm: 3 }, // No horizontal padding on mobile for circular shape\n            py: { xs: 0, sm: 1.2 }, // No vertical padding on mobile for circular shape\n            minWidth: { xs: 40, sm: 120 }, // Match Round button width exactly\n            minHeight: { xs: 40, sm: 44 }, // Match Round button height exactly\n            width: { xs: 40, sm: 120 }, // Fixed dimensions to match Round button\n            height: { xs: 40, sm: 44 }, // Fixed dimensions to match Round button\n            ml: { xs: 0.5, sm: 1 },\n            background: \"linear-gradient(45deg, #4caf50, #66bb6a)\",\n            color: \"white\",\n            boxShadow: \"0 2px 8px rgba(76, 175, 80, 0.3)\",\n            transition: \"all 0.3s cubic-bezier(0.4, 0, 0.2, 1)\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            \"&:hover\": {\n              background: \"linear-gradient(45deg, #388e3c, #4caf50)\",\n              boxShadow: \"0 4px 12px rgba(76, 175, 80, 0.4)\",\n              transform: \"translateY(-1px)\",\n            },\n            \"&:active\": {\n              transform: \"translateY(0px)\",\n            },\n          }}\n          aria-label=\"Add round\"\n        >\n          {/* Mobile: Show only + icon, perfectly centered */}\n          <Box\n            sx={{\n              display: { xs: \"flex\", sm: \"none\" },\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              width: \"100%\",\n              height: \"100%\",\n            }}\n          >\n            <AddIcon sx={{ fontSize: \"1.6rem\" }} />\n          </Box>\n\n          {/* Web: Show text only */}\n          <Typography\n            variant=\"inherit\"\n            sx={{\n              fontWeight: 600,\n              fontSize: \"inherit\",\n              display: { xs: \"none\", sm: \"block\" },\n              whiteSpace: \"nowrap\",\n            }}\n          >\n            Add Round\n          </Typography>\n        </Button>\n\n        {/* Spacer for end positioning */}\n        <Box sx={{ flex: 1 }} />\n\n        {/* Right Navigation Arrow - At End */}\n        <Fab\n          onClick={onNextRound}\n          disabled={!canGoForward}\n          size=\"medium\"\n          sx={{\n            width: { xs: 36, sm: 44 },\n            height: { xs: 36, sm: 44 },\n            minWidth: { xs: 36, sm: 44 },\n            bgcolor: canGoForward ? \"primary.main\" : \"grey.200\",\n            color: canGoForward ? \"white\" : \"grey.400\",\n            boxShadow: canGoForward ? 2 : 1,\n            transition: \"all 0.3s cubic-bezier(0.4, 0, 0.2, 1)\",\n            transform: canGoForward ? \"scale(1)\" : \"scale(0.9)\",\n            \"&:hover\": {\n              bgcolor: canGoForward ? \"primary.dark\" : \"grey.200\",\n              transform: canGoForward ? \"scale(1.05)\" : \"scale(0.9)\",\n              boxShadow: canGoForward ? 3 : 1,\n            },\n            \"&:active\": {\n              transform: canGoForward ? \"scale(0.95)\" : \"scale(0.9)\",\n            },\n            \"&:disabled\": {\n              bgcolor: \"grey.200\",\n              color: \"grey.400\",\n              cursor: \"not-allowed\",\n            },\n          }}\n          aria-label=\"Next round\"\n        >\n          <ChevronRightIcon sx={{ fontSize: { xs: \"1.1rem\", sm: \"1.3rem\" } }} />\n        </Fab>\n      </Box>\n    </Box>\n  );\n};\n","/**\n * Questions List Component\n *\n * Displays the list of questions in the current round and provides\n * question management actions. Extracted from the monolithic QuestionsStep\n * component to improve maintainability.\n *\n * Features:\n * - Display questions as clickable cards\n * - Empty state when no questions exist\n * - Question difficulty indicators\n * - Question completion status indicators (NEW)\n * - Delete question functionality\n *\n * @fileoverview Questions list component for quiz wizard\n * @version 2.0.0\n * @since December 2025\n */\n\nimport React from \"react\";\nimport {\n  Box,\n  Typography,\n  Card,\n  CardContent,\n  Chip,\n  IconButton,\n  Button,\n} from \"@mui/material\";\nimport {\n  Delete as DeleteIcon,\n  QuestionAnswer as QuestionIcon,\n  CheckCircle as CheckCircleIcon,\n  Warning as WarningIcon,\n  Add as AddIcon,\n} from \"@mui/icons-material\";\nimport type { Round, QuizQuestion } from \"../../../types\";\n\n/**\n * Props for the QuestionsList component\n */\ninterface QuestionsListProps {\n  /** Current round */\n  currentRound: Round | null;\n  /** Callback when question is clicked for editing */\n  onEditQuestion: (question: QuizQuestion) => void;\n  /** Callback when question should be deleted */\n  onDeleteQuestion: (questionId: string) => void;\n  /** Callback when add round button is clicked (for empty state) */\n  onAddRound?: () => void;\n  /** Callback when add question button is clicked (for empty questions state) */\n  onAddQuestion?: () => void;\n}\n\n/**\n * Helper function to determine if a question is complete\n *\n * @param question - The question to check\n * @param roundType - The type of round this question belongs to\n * @returns true if the question is complete, false otherwise\n */\nconst isQuestionComplete = (\n  question: QuizQuestion,\n  roundType?: string\n): boolean => {\n  // Check if question text is filled\n  if (!question.question || !question.question.trim()) {\n    return false;\n  }\n\n  // Check answers based on question type\n  if (\n    question.type === \"single-answer\" ||\n    [\"picture\", \"audio\", \"video\"].includes(question.type)\n  ) {\n    // Single answer questions need correctAnswerText\n    return !!(question.correctAnswerText && question.correctAnswerText.trim());\n  } else if (roundType === \"golden-pyramid\") {\n    // Golden Pyramid questions need all possibleAnswers filled\n    return (\n      question.possibleAnswers.length > 0 &&\n      question.possibleAnswers.every((answer) => answer.trim())\n    );\n  } else {\n    // Multiple choice questions need at least 2 options and correct answers selected\n    return (\n      question.possibleAnswers.length >= 2 &&\n      question.possibleAnswers.every((opt) => opt.trim()) &&\n      question.correctAnswers.length > 0\n    );\n  }\n};\n\n/**\n * Questions List Component\n *\n * Renders the list of questions for the current round with edit and delete actions.\n * Shows appropriate empty states when no questions exist.\n * Now includes completion status indicators for better user experience.\n * Added \"Add Round\" button in empty state when no rounds exist.\n *\n * @param props - Component props including round data and question callbacks\n * @returns JSX element representing the questions list\n */\nexport const QuestionsList: React.FC<QuestionsListProps> = ({\n  currentRound,\n  onEditQuestion,\n  onDeleteQuestion,\n  onAddRound,\n  onAddQuestion,\n}) => {\n  // Show empty state if no round is selected\n  if (!currentRound) {\n    return (\n      <Card\n        elevation={0}\n        sx={{\n          textAlign: \"center\",\n          py: 6,\n          border: 2,\n          borderStyle: \"dashed\",\n          borderColor: \"divider\",\n          bgcolor: \"background.default\",\n        }}\n      >\n        <CardContent>\n          <QuestionIcon sx={{ fontSize: 64, color: \"text.secondary\", mb: 2 }} />\n          <Typography variant=\"h6\" gutterBottom>\n            No Rounds Yet\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n            Add your first round to begin creating your quiz structure.\n          </Typography>\n          {/* Add Round button - similar to main quizzes page empty state */}\n          {onAddRound && (\n            <Button\n              variant=\"contained\"\n              size=\"large\"\n              startIcon={<AddIcon />}\n              onClick={onAddRound}\n              sx={{ mt: 2 }}\n            >\n              Add Round\n            </Button>\n          )}\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <>\n      {/* Round Info */}\n      <Box sx={{ mb: 2 }}>\n        <Typography variant=\"subtitle1\" color=\"text.secondary\">\n          {currentRound.level ? `Level: ${currentRound.level}` : \"\"} | Reveal:{\" \"}\n          {currentRound.answerRevealMode} | Default Time:{\" \"}\n          {currentRound.defaultTimePerQuestion}min\n        </Typography>\n      </Box>\n\n      {/* Questions List */}\n      <Box sx={{ display: \"flex\", flexDirection: \"column\", gap: 2 }}>\n        {currentRound.questions.length === 0 ? (\n          <Card\n            elevation={0}\n            sx={{\n              textAlign: \"center\",\n              py: 4,\n              border: 1,\n              borderStyle: \"dashed\",\n              borderColor: \"divider\",\n            }}\n          >\n            <CardContent>\n              <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n                No questions in this round yet. Add or generate questions to get\n                started.\n              </Typography>\n              {/* Add Question button - only show if callback is provided */}\n              {onAddQuestion && (\n                <Button\n                  variant=\"contained\"\n                  size=\"medium\"\n                  startIcon={<AddIcon />}\n                  onClick={onAddQuestion}\n                  sx={{ mt: 1 }}\n                >\n                  Add Question\n                </Button>\n              )}\n            </CardContent>\n          </Card>\n        ) : (\n          currentRound.questions.map((question, index) => {\n            const isComplete = isQuestionComplete(question, currentRound.type);\n\n            return (\n              <Card\n                key={question.id}\n                elevation={0}\n                sx={{\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"space-between\",\n                  px: 2,\n                  py: 1.5,\n                  cursor: \"pointer\",\n                  bgcolor: \"background.paper\",\n                  transition: \"box-shadow 0.2s\",\n                  \"&:hover\": { boxShadow: 4 },\n                }}\n                onClick={() => onEditQuestion(question)}\n                aria-label={`Edit question ${index + 1}`}\n              >\n                {/* Completion Status Icon */}\n                <Box sx={{ mr: 1, display: \"flex\", alignItems: \"center\" }}>\n                  {isComplete ? (\n                    <CheckCircleIcon\n                      sx={{\n                        color: \"success.main\",\n                        fontSize: { xs: 16, sm: 18 },\n                      }}\n                      titleAccess=\"Question complete\"\n                    />\n                  ) : (\n                    <WarningIcon\n                      sx={{\n                        color: \"error.main\",\n                        fontSize: { xs: 16, sm: 18 },\n                      }}\n                      titleAccess=\"Question incomplete\"\n                    />\n                  )}\n                </Box>\n\n                <Typography variant=\"subtitle1\" sx={{ flex: 1 }}>\n                  {index + 1}. {question.question || \"Untitled Question\"}\n                </Typography>\n\n                <Chip\n                  label={question.difficulty}\n                  size=\"small\"\n                  color={\n                    question.difficulty === \"easy\"\n                      ? \"success\"\n                      : question.difficulty === \"medium\"\n                      ? \"warning\"\n                      : \"error\"\n                  }\n                  sx={{ mr: 1 }}\n                />\n\n                <IconButton\n                  size=\"small\"\n                  color=\"error\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onDeleteQuestion(question.id);\n                  }}\n                  aria-label={`Delete question ${index + 1}`}\n                >\n                  <DeleteIcon fontSize=\"small\" />\n                </IconButton>\n              </Card>\n            );\n          })\n        )}\n      </Box>\n    </>\n  );\n};\n","/**\n * Question Actions Bar Component\n *\n * Provides action buttons for adding questions (AI generation and manual creation).\n * Extracted from the monolithic QuestionsStep component to improve modularity.\n *\n * Features:\n * - AI question generation button (only for supported round types)\n * - Manual question creation button\n * - Conditional display based on round type restrictions\n *\n * @fileoverview Question actions bar component for quiz wizard\n * @version 2.0.0 (Updated for round restrictions)\n * @since December 2025\n */\n\nimport React from \"react\";\nimport { Box, Button } from \"@mui/material\";\nimport { Add as AddIcon, Psychology as AIIcon } from \"@mui/icons-material\";\nimport type { RoundType } from \"../../../types\";\n\ninterface QuestionActionsBarProps {\n  /** Whether to show the actions bar (when round exists) */\n  showActions: boolean;\n  /** Current round type to determine which buttons to show */\n  roundType?: RoundType;\n  /** Callback to open AI generation dialog */\n  onOpenAIDialog: () => void;\n  /** Callback to open manual question dialog */\n  onOpenManualDialog: () => void;\n}\n\n/**\n * Question Actions Bar Component\n *\n * Renders action buttons for creating questions when a round is selected.\n * Provides both AI generation and manual creation options based on round type.\n *\n * @param props - Component props including visibility, round type, and action callbacks\n * @returns JSX element representing the question actions bar\n */\nexport const QuestionActionsBar: React.FC<QuestionActionsBarProps> = ({\n  showActions,\n  roundType,\n  onOpenAIDialog,\n  onOpenManualDialog,\n}) => {\n  // Don't render if no round is selected\n  if (!showActions || !roundType) {\n    return null;\n  }\n\n  // Golden Pyramid rounds shouldn't have any add buttons (4 questions are pre-populated)\n  if (roundType === \"golden-pyramid\") {\n    return null;\n  }\n\n  // AI Generate button should only appear in Mixed, Single Answer Only, and Multiple Choice rounds\n  const showAIButton = [\n    \"mixed\",\n    \"single-answer-only\",\n    \"multiple-choice\",\n  ].includes(roundType);\n\n  return (\n    <Box sx={{ display: \"flex\", gap: 1, mb: 3 }}>\n      {showAIButton && (\n        <Button\n          variant=\"outlined\"\n          startIcon={<AIIcon />}\n          onClick={onOpenAIDialog}\n          aria-label=\"Generate question with AI\"\n        >\n          AI Generate\n        </Button>\n      )}\n      <Button\n        variant=\"contained\"\n        startIcon={<AddIcon />}\n        onClick={onOpenManualDialog}\n        aria-label=\"Add question manually\"\n      >\n        Add Question\n      </Button>\n    </Box>\n  );\n};\n","/**\n * Question Editor Component (UPDATED FOR NEW SYSTEM)\n *\n * Dedicated component for editing individual quiz questions with support for\n * single answer, multiple choice, and media (image, audio, video) questions.\n * Updated to work with the new round-based question type system.\n *\n * Features:\n * - Round-based question type restrictions\n * - Single answer questions with text input\n * - Multiple choice questions (1-20 answers)\n * - Media upload for picture/audio/video questions\n * - Time limits in minutes with decimal support\n * - Points with decimal support\n * - Improved file type validation\n * - Mobile responsive media display\n *\n * @fileoverview Question editing interface component\n * @version 2.1.0 (Fixed file upload and mobile display)\n * @since December 2025\n */\n\nimport React from \"react\";\nimport {\n  Card,\n  CardContent,\n  Typography,\n  TextField,\n  Button,\n  Box,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  IconButton,\n  Stack,\n  Chip,\n  FormControlLabel,\n  Checkbox,\n} from \"@mui/material\";\nimport { Delete as DeleteIcon, Add as AddIcon } from \"@mui/icons-material\";\n\n// Types\nimport type {\n  QuizQuestion,\n  QuestionType,\n  MediaFile,\n  RoundType,\n} from \"../../../types\";\n\n// Constants\nimport { ROUND_TYPE_CONFIG } from \"../../../types\";\n\n/**\n * Props for the QuestionEditor component\n */\ninterface QuestionEditorProps {\n  /** The question being edited */\n  question: QuizQuestion;\n  /** Callback when question is updated */\n  onUpdate: (updates: Partial<QuizQuestion>) => void;\n  /** Round type to determine allowed question types */\n  roundType?: RoundType;\n}\n\n/**\n * Question Editor Component\n */\nexport const QuestionEditor: React.FC<QuestionEditorProps> = ({\n  question,\n  onUpdate,\n  roundType = \"mixed\",\n}) => {\n  const roundConfig = ROUND_TYPE_CONFIG[roundType];\n\n  /**\n   * Handles file upload for media questions\n   */\n  const handleMediaUpload = async (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    // Enhanced file type validation with both MIME types and extensions\n    const validTypes = {\n      picture: [\n        \"image/jpeg\",\n        \"image/jpg\",\n        \"image/png\",\n        \"image/webp\",\n        \"image/gif\",\n        \"image/bmp\",\n        \"image/tiff\",\n        \"image/svg+xml\",\n      ],\n      audio: [\n        \"audio/mpeg\",\n        \"audio/mp3\",\n        \"audio/wav\",\n        \"audio/wave\",\n        \"audio/x-wav\",\n        \"audio/wma\",\n        \"audio/mp4\",\n        \"audio/m4a\",\n      ],\n      video: [\n        \"video/mp4\",\n        \"video/webm\",\n        \"video/mov\",\n        \"video/quicktime\",\n        \"video/x-msvideo\",\n        \"video/avi\",\n        \"video/wmv\",\n      ],\n    };\n\n    // Get file extension as backup validation\n    const fileExtension = file.name.split(\".\").pop()?.toLowerCase() || \"\";\n    const validExtensions = {\n      picture: [\"jpg\", \"jpeg\", \"png\", \"webp\", \"gif\", \"bmp\", \"tiff\", \"svg\"],\n      audio: [\"mp3\", \"wav\", \"wma\", \"m4a\"],\n      video: [\"mp4\", \"mov\", \"wmv\", \"avi\", \"webm\"],\n    };\n\n    const questionTypeKey = question.type as keyof typeof validTypes;\n    const isValidMimeType = validTypes[questionTypeKey]?.includes(file.type);\n    const isValidExtension =\n      validExtensions[questionTypeKey]?.includes(fileExtension);\n\n    if (!isValidMimeType && !isValidExtension) {\n      alert(\n        `Unsupported file format. Supported formats: ${validExtensions[\n          questionTypeKey\n        ]?.join(\", \")}`\n      );\n      return;\n    }\n\n    // Check file size limits\n    const sizeLimits = {\n      picture: 10 * 1024 * 1024, // 10MB\n      audio: 20 * 1024 * 1024, // 20MB\n      video: 100 * 1024 * 1024, // 100MB\n    };\n\n    if (file.size > sizeLimits[questionTypeKey]) {\n      const limitMB = sizeLimits[questionTypeKey] / (1024 * 1024);\n      alert(\n        `File too large. Maximum size for ${questionTypeKey} files is ${limitMB}MB`\n      );\n      return;\n    }\n\n    // Convert file to base64 for storage\n    const reader = new FileReader();\n    reader.onload = (ev) => {\n      const mediaFile: MediaFile = {\n        id: `media_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        filename: file.name,\n        type:\n          question.type === \"picture\"\n            ? \"image\"\n            : question.type === \"audio\"\n            ? \"audio\"\n            : \"video\",\n        size: file.size,\n        data: ev.target?.result as string,\n        mimeType: file.type,\n        createdAt: new Date(),\n      };\n      onUpdate({ mediaFile });\n    };\n    reader.readAsDataURL(file);\n  };\n\n  /**\n   * Handles multiple choice option updates\n   */\n  const updateOption = (index: number, value: string) => {\n    const newOptions = [...question.possibleAnswers];\n    newOptions[index] = value;\n    onUpdate({ possibleAnswers: newOptions });\n  };\n\n  /**\n   * Adds a new option (max 20)\n   */\n  const addOption = () => {\n    if (question.possibleAnswers.length < 20) {\n      onUpdate({ possibleAnswers: [...question.possibleAnswers, \"\"] });\n    }\n  };\n\n  /**\n   * Removes an option (min 1 for multiple choice, min 0 for single answer)\n   */\n  const removeOption = (index: number) => {\n    const minOptions = question.type === \"multiple-choice\" ? 2 : 0;\n    if (question.possibleAnswers.length > minOptions) {\n      const newOptions = question.possibleAnswers.filter((_, i) => i !== index);\n      // Update correct answers to remove any that reference the deleted option\n      const newCorrectAnswers = question.correctAnswers\n        .filter((answerIndex) => answerIndex !== index)\n        .map((answerIndex) =>\n          answerIndex > index ? answerIndex - 1 : answerIndex\n        );\n      onUpdate({\n        possibleAnswers: newOptions,\n        correctAnswers: newCorrectAnswers,\n      });\n    }\n  };\n\n  /**\n   * Toggles correct answer selection for multiple choice\n   */\n  const toggleCorrectAnswer = (index: number) => {\n    const currentCorrect = question.correctAnswers || [];\n    const isCorrect = currentCorrect.includes(index);\n\n    let newCorrectAnswers;\n    if (isCorrect) {\n      // Remove from correct answers\n      newCorrectAnswers = currentCorrect.filter((i) => i !== index);\n    } else {\n      // Add to correct answers\n      newCorrectAnswers = [...currentCorrect, index].sort();\n    }\n\n    onUpdate({ correctAnswers: newCorrectAnswers });\n  };\n\n  /**\n   * Renders media upload interface with mobile responsive display\n   */\n  const renderMediaUpload = () => {\n    // Show media upload for media question types OR media round types\n    const isMediaQuestion = [\"picture\", \"audio\", \"video\"].includes(\n      question.type\n    );\n    const isMediaRound = [\"picture\", \"audio\", \"video\"].includes(\n      roundType || \"\"\n    );\n\n    if (!isMediaQuestion && !isMediaRound) {\n      return null;\n    }\n\n    // Determine media type from question type or round type\n    const mediaType = isMediaQuestion ? question.type : roundType;\n\n    return (\n      <Box sx={{ mb: 3 }}>\n        <Typography variant=\"subtitle2\" gutterBottom>\n          Media File\n        </Typography>\n        <Button\n          variant=\"outlined\"\n          component=\"label\"\n          sx={{ mb: 2 }}\n          aria-label={`Upload ${mediaType} file`}\n        >\n          Upload{\" \"}\n          {mediaType && mediaType.charAt(0).toUpperCase() + mediaType.slice(1)}\n          <input\n            type=\"file\"\n            accept={\n              mediaType === \"picture\"\n                ? \".jpg,.jpeg,.png,.webp,.gif,.bmp,.tiff,.svg\"\n                : mediaType === \"audio\"\n                ? \".mp3,.wav,.wma,.m4a\"\n                : \".mp4,.mov,.wmv,.avi,.webm\"\n            }\n            hidden\n            onChange={handleMediaUpload}\n          />\n        </Button>\n\n        {/* Media preview with mobile responsive design */}\n        {question.mediaFile && (\n          <Box sx={{ mb: 2 }}>\n            {mediaType === \"picture\" && (\n              <Box\n                component=\"img\"\n                src={question.mediaFile.data}\n                alt=\"Question media\"\n                sx={{\n                  maxWidth: \"100%\",\n                  width: \"100%\",\n                  maxHeight: { xs: 200, sm: 300, md: 400 },\n                  height: \"auto\",\n                  borderRadius: 2,\n                  objectFit: \"contain\",\n                  border: \"1px solid\",\n                  borderColor: \"divider\",\n                }}\n              />\n            )}\n            {mediaType === \"audio\" && (\n              <Box\n                component=\"audio\"\n                controls\n                src={question.mediaFile.data}\n                sx={{\n                  width: \"100%\",\n                  maxWidth: 400,\n                  height: 40,\n                }}\n              />\n            )}\n            {mediaType === \"video\" && (\n              <Box\n                component=\"video\"\n                controls\n                src={question.mediaFile.data}\n                sx={{\n                  maxWidth: \"100%\",\n                  width: \"100%\",\n                  maxHeight: { xs: 200, sm: 300, md: 400 },\n                  height: \"auto\",\n                  borderRadius: 2,\n                  objectFit: \"contain\",\n                  border: \"1px solid\",\n                  borderColor: \"divider\",\n                }}\n              />\n            )}\n            <Typography variant=\"caption\" display=\"block\" sx={{ mt: 1 }}>\n              {question.mediaFile.filename} (\n              {(question.mediaFile.size / 1024 / 1024).toFixed(2)} MB)\n            </Typography>\n            <Button\n              size=\"small\"\n              color=\"error\"\n              onClick={() => onUpdate({ mediaFile: undefined })}\n              sx={{ mt: 1 }}\n            >\n              Remove File\n            </Button>\n          </Box>\n        )}\n      </Box>\n    );\n  };\n\n  return (\n    <Stack spacing={3} sx={{ mt: 1 }}>\n      {/* Question Type Selection for Media Rounds */}\n      {(roundType === \"picture\" ||\n        roundType === \"audio\" ||\n        roundType === \"video\") && (\n        <FormControl fullWidth>\n          <InputLabel>Question Type</InputLabel>\n          <Select\n            value={question.type}\n            label=\"Question Type\"\n            onChange={(e) => {\n              const newType = e.target.value as QuestionType;\n              const updates: Partial<QuizQuestion> = { type: newType };\n\n              // Reset type-specific fields when changing type\n              if (newType === \"single-answer\") {\n                updates.possibleAnswers = [];\n                updates.correctAnswers = [];\n                updates.correctAnswerText = \"\";\n              } else if (newType === \"multiple-choice\") {\n                updates.possibleAnswers = [\"\", \"\", \"\", \"\"];\n                updates.correctAnswers = [0];\n                updates.correctAnswerText = undefined;\n              }\n\n              onUpdate(updates);\n            }}\n          >\n            <MenuItem value=\"single-answer\">Single Answer</MenuItem>\n            <MenuItem value=\"multiple-choice\">Multiple Choice</MenuItem>\n          </Select>\n        </FormControl>\n      )}\n\n      {/* Question Type Selection for Mixed Rounds */}\n      {roundType === \"mixed\" && (\n        <FormControl fullWidth>\n          <InputLabel>Question Type</InputLabel>\n          <Select\n            value={question.type}\n            label=\"Question Type\"\n            onChange={(e) => {\n              const newType = e.target.value as QuestionType;\n              const updates: Partial<QuizQuestion> = { type: newType };\n\n              // Reset type-specific fields when changing type\n              if (newType === \"single-answer\") {\n                updates.possibleAnswers = [];\n                updates.correctAnswers = [];\n                updates.correctAnswerText = \"\";\n                updates.mediaFile = undefined;\n              } else if (newType === \"multiple-choice\") {\n                updates.possibleAnswers = [\"\", \"\", \"\", \"\"];\n                updates.correctAnswers = [0];\n                updates.correctAnswerText = undefined;\n                updates.mediaFile = undefined;\n              } else {\n                // Media types - default to single answer behavior\n                updates.possibleAnswers = [];\n                updates.correctAnswers = [];\n                updates.correctAnswerText = \"\";\n              }\n\n              onUpdate(updates);\n            }}\n          >\n            {roundConfig.allowedQuestionTypes.map((type) => (\n              <MenuItem key={type} value={type}>\n                {type === \"single-answer\" && \"Single Answer\"}\n                {type === \"multiple-choice\" && \"Multiple Choice\"}\n                {type === \"picture\" && \"Picture Question\"}\n                {type === \"audio\" && \"Audio Question\"}\n                {type === \"video\" && \"Video Question\"}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n      )}\n\n      {/* Question Text */}\n      <TextField\n        fullWidth\n        label=\"Question\"\n        multiline\n        minRows={2}\n        maxRows={4}\n        value={question.question}\n        onChange={(e) => onUpdate({ question: e.target.value })}\n        placeholder=\"Enter your question here...\"\n      />\n\n      {/* Media Upload */}\n      {renderMediaUpload()}\n\n      {/* Answer Configuration */}\n      {question.type === \"single-answer\" ||\n      ([\"picture\", \"audio\", \"video\"].includes(question.type) &&\n        question.possibleAnswers.length === 0) ? (\n        <Box>\n          <Box\n            sx={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\",\n              mb: 2,\n            }}\n          >\n            <Typography variant=\"subtitle2\">Correct Answer</Typography>\n            {/* For media questions, show option to switch to multiple choice */}\n            {[\"picture\", \"audio\", \"video\"].includes(question.type) && (\n              <Button\n                size=\"small\"\n                variant=\"outlined\"\n                onClick={() => {\n                  onUpdate({\n                    possibleAnswers: [\"\", \"\", \"\", \"\"],\n                    correctAnswers: [0],\n                    correctAnswerText: undefined,\n                  });\n                }}\n              >\n                Switch to Multiple Choice\n              </Button>\n            )}\n          </Box>\n          <TextField\n            fullWidth\n            label=\"Type the correct answer\"\n            value={question.correctAnswerText || \"\"}\n            onChange={(e) => onUpdate({ correctAnswerText: e.target.value })}\n            placeholder=\"e.g., Sofia, Paris, 1969...\"\n            helperText=\"This is the exact answer participants need to type\"\n          />\n        </Box>\n      ) : (\n        <Box>\n          <Box\n            sx={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\",\n              mb: 2,\n            }}\n          >\n            <Typography variant=\"subtitle2\">\n              {roundType === \"golden-pyramid\"\n                ? \"Correct Answers\"\n                : \"Answer Options (1-20 options)\"}\n            </Typography>\n            {/* For media questions, show option to switch to single answer */}\n            {[\"picture\", \"audio\", \"video\"].includes(question.type) &&\n              roundType !== \"golden-pyramid\" && (\n                <Button\n                  size=\"small\"\n                  variant=\"outlined\"\n                  onClick={() => {\n                    onUpdate({\n                      possibleAnswers: [],\n                      correctAnswers: [],\n                      correctAnswerText: \"\",\n                    });\n                  }}\n                >\n                  Switch to Single Answer\n                </Button>\n              )}\n          </Box>\n          <Stack spacing={2}>\n            {question.possibleAnswers.map((option, index) => (\n              <Box\n                key={index}\n                sx={{ display: \"flex\", alignItems: \"center\", gap: 1 }}\n              >\n                {/* Hide checkbox for Golden Pyramid since all answers are correct */}\n                {roundType !== \"golden-pyramid\" && (\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        checked={question.correctAnswers.includes(index)}\n                        onChange={() => toggleCorrectAnswer(index)}\n                      />\n                    }\n                    label=\"\"\n                  />\n                )}\n                <TextField\n                  fullWidth\n                  value={option}\n                  onChange={(e) => updateOption(index, e.target.value)}\n                  placeholder={\n                    roundType === \"golden-pyramid\"\n                      ? `Correct Answer (${index + 1})`\n                      : `Enter option ${index + 1}...`\n                  }\n                />\n                {/* Hide remove button for Golden Pyramid */}\n                {roundType !== \"golden-pyramid\" &&\n                  question.possibleAnswers.length > 1 && (\n                    <IconButton\n                      onClick={() => removeOption(index)}\n                      color=\"error\"\n                      size=\"small\"\n                    >\n                      <DeleteIcon />\n                    </IconButton>\n                  )}\n              </Box>\n            ))}\n\n            {/* Hide add option button for Golden Pyramid */}\n            {roundType !== \"golden-pyramid\" &&\n              question.possibleAnswers.length < 20 && (\n                <Button\n                  startIcon={<AddIcon />}\n                  onClick={addOption}\n                  variant=\"outlined\"\n                  size=\"small\"\n                >\n                  Add Option\n                </Button>\n              )}\n          </Stack>\n\n          {/* Only show validation error for non-Golden Pyramid questions */}\n          {roundType !== \"golden-pyramid\" &&\n            question.correctAnswers.length === 0 && (\n              <Typography variant=\"caption\" color=\"error\">\n                Please select at least one correct answer\n              </Typography>\n            )}\n        </Box>\n      )}\n\n      {/* Question Settings */}\n      <Box\n        sx={{\n          display: \"flex\",\n          gap: 2,\n          width: \"100%\",\n          flexWrap: \"nowrap\",\n          alignItems: \"flex-start\",\n        }}\n      >\n        <TextField\n          fullWidth\n          type=\"number\"\n          label=\"Points\"\n          placeholder=\"1\"\n          inputProps={{ min: 0.1, step: 0.1 }}\n          value={question.points || \"\"}\n          onChange={(e) => onUpdate({ points: Number(e.target.value) || 1 })}\n          sx={{ flex: 1, minWidth: 0 }}\n        />\n        <TextField\n          fullWidth\n          type=\"number\"\n          label=\"Time Limit (min)\"\n          placeholder=\"1\"\n          inputProps={{ min: 0.1, step: 0.1 }}\n          value={question.timeLimit || \"\"}\n          onChange={(e) => onUpdate({ timeLimit: Number(e.target.value) || 1 })}\n          sx={{ flex: 1, minWidth: 0 }}\n        />\n        <TextField\n          fullWidth\n          select\n          label=\"Difficulty\"\n          value={question.difficulty}\n          onChange={(e) => onUpdate({ difficulty: e.target.value as any })}\n          sx={{ flex: 1, minWidth: 0 }}\n        >\n          <MenuItem value=\"easy\">Easy</MenuItem>\n          <MenuItem value=\"medium\">Medium</MenuItem>\n          <MenuItem value=\"hard\">Hard</MenuItem>\n        </TextField>\n      </Box>\n\n      {/* Explanation */}\n      <TextField\n        fullWidth\n        label=\"Explanation (optional)\"\n        multiline\n        minRows={2}\n        maxRows={3}\n        value={question.explanation || \"\"}\n        onChange={(e) => onUpdate({ explanation: e.target.value })}\n        placeholder=\"Optional explanation shown after the question...\"\n      />\n    </Stack>\n  );\n};\n","/**\n * Gemini AI Service\n *\n * Comprehensive service for handling communication with Google Gemini API.\n * Provides intelligent question generation with advanced features:\n * - Multilingual support (English, Bulgarian)\n * - Difficulty and category control\n * - Session-based duplicate prevention\n * - Geographic fact-checking for accuracy\n * - Intelligent rate limiting with user feedback\n * - Real-time countdown timers during waits\n *\n * @fileoverview Google Gemini AI integration service\n * @version 2.0.0\n * @since December 2025\n */\n\nimport type {\n  FinalQuestion,\n  GeminiQuestionParams,\n  SessionQuestion,\n} from \"../types\";\n\n/**\n * Response structure from Google Gemini API\n * Represents the JSON format returned by the API service\n */\ninterface GeminiResponse {\n  candidates: Array<{\n    content: {\n      parts: Array<{\n        text: string;\n      }>;\n    };\n  }>;\n}\n\n/**\n * Internal rate limiting information for immediate checks\n * Used for pre-request validation and user feedback\n */\ninterface InternalRateLimitInfo {\n  isRateLimited: boolean;\n  retryAfter?: number;\n  message?: string;\n}\n\n// Rate limiting tracking\nlet lastRequestTime = 0;\nlet requestCount = 0;\nconst RATE_LIMIT_WINDOW = 60000; // 1 minute in milliseconds\nconst MAX_REQUESTS_PER_MINUTE = 15;\nconst MIN_REQUEST_INTERVAL = 4000; // 4 seconds between requests to be safe\n\n/**\n * Check if we're approaching or at rate limits\n * Validates against both per-minute limits and minimum request intervals\n *\n * @returns Object containing rate limit status and wait time information\n */\nfunction checkRateLimit(): InternalRateLimitInfo {\n  const now = Date.now();\n\n  // Reset counter if window has passed\n  if (now - lastRequestTime > RATE_LIMIT_WINDOW) {\n    requestCount = 0;\n  }\n\n  // Check if we're at the limit\n  if (requestCount >= MAX_REQUESTS_PER_MINUTE) {\n    const timeUntilReset = RATE_LIMIT_WINDOW - (now - lastRequestTime);\n    return {\n      isRateLimited: true,\n      retryAfter: Math.ceil(timeUntilReset / 1000),\n      message: `Rate limit reached (${MAX_REQUESTS_PER_MINUTE}/minute). Please wait ${Math.ceil(\n        timeUntilReset / 1000\n      )} seconds.`,\n    };\n  }\n\n  // Check if we need to wait between requests\n  const timeSinceLastRequest = now - lastRequestTime;\n  if (timeSinceLastRequest < MIN_REQUEST_INTERVAL && requestCount > 0) {\n    const waitTime = MIN_REQUEST_INTERVAL - timeSinceLastRequest;\n    return {\n      isRateLimited: true,\n      retryAfter: Math.ceil(waitTime / 1000),\n      message: `Please wait ${Math.ceil(\n        waitTime / 1000\n      )} seconds between requests to avoid rate limits.`,\n    };\n  }\n\n  return { isRateLimited: false };\n}\n\n/**\n * Wait for the specified number of seconds\n *\n * @param seconds - Number of seconds to wait\n * @returns Promise that resolves after the specified time\n */\nfunction wait(seconds: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, seconds * 1000));\n}\n\n/**\n * Generate a question using Google Gemini API with enhanced prompts and variability\n *\n * Main function for generating AI-powered questions with comprehensive features:\n * - Rate limiting with real-time countdown feedback\n * - Session-based duplicate prevention\n * - Enhanced prompts with fact-checking\n * - Geographic accuracy corrections\n * - Multilingual support\n *\n * @param params - Question generation parameters including difficulty, language, category, and session history\n * @param onStatusUpdate - Optional callback for real-time status updates during generation\n * @returns Promise resolving to a complete FinalQuestion object\n * @throws Error if API key missing, network unavailable, or generation fails\n */\nexport const generateQuestionWithGemini = async (\n  params: GeminiQuestionParams = {} as GeminiQuestionParams,\n  onStatusUpdate?: (message: string, isWaiting: boolean) => void\n): Promise<FinalQuestion> => {\n  try {\n    // Check rate limiting first\n    const rateLimitCheck = checkRateLimit();\n    if (rateLimitCheck.isRateLimited) {\n      const waitTime = rateLimitCheck.retryAfter || 4;\n\n      if (onStatusUpdate) {\n        onStatusUpdate(\n          `Please wait ${waitTime} seconds before generating another question...`,\n          true\n        );\n\n        // Show countdown during wait\n        for (let i = waitTime; i > 0; i--) {\n          onStatusUpdate(\n            `Please wait ${i} second${\n              i > 1 ? \"s\" : \"\"\n            } before generating another question...`,\n            true\n          );\n          await wait(1);\n        }\n      } else {\n        await wait(waitTime);\n      }\n\n      if (onStatusUpdate) {\n        onStatusUpdate(\"Generating your question...\", false);\n      }\n    }\n\n    // Check API key\n    const apiKey = import.meta.env.VITE_GEMINI_API_KEY;\n    if (!apiKey) {\n      console.error(\"❌ No API key found\");\n      throw new Error(\n        \"AI service is temporarily unavailable. Please try again later.\"\n      );\n    }\n\n    // Check online status\n    if (!navigator.onLine) {\n      throw new Error(\"Internet connection required\");\n    }\n\n    // Update request tracking\n    requestCount++;\n    lastRequestTime = Date.now();\n\n    if (onStatusUpdate) {\n      onStatusUpdate(\"Generating your question...\", false);\n    }\n\n    // Create enhanced prompt with previous questions and better instructions\n    const prompt = createEnhancedGeminiPrompt(\n      params.difficulty || \"medium\",\n      params.language || \"English\",\n      params.category || \"random\",\n      params.previousQuestions || []\n    );\n\n    const requestBody = {\n      contents: [\n        {\n          parts: [\n            {\n              text: prompt,\n            },\n          ],\n        },\n      ],\n      generationConfig: {\n        temperature: 0.9, // Higher temperature for more variability\n        topK: 40,\n        topP: 0.95,\n        maxOutputTokens: 1024,\n      },\n    };\n\n    const response = await fetch(\n      `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${apiKey}`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(requestBody),\n      }\n    );\n\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n\n      // Handle rate limiting from Google's side\n      if (response.status === 429) {\n        const waitTime = 4;\n\n        if (onStatusUpdate) {\n          onStatusUpdate(\n            `API rate limit reached. Waiting ${waitTime} seconds before retrying...`,\n            true\n          );\n        }\n\n        await wait(waitTime);\n\n        if (onStatusUpdate) {\n          onStatusUpdate(\"Retrying your request...\", false);\n        }\n\n        // Retry the request\n        return generateQuestionWithGemini(params, onStatusUpdate);\n      }\n\n      throw new Error(\n        `Gemini API error: ${response.status} - ${\n          errorData.error?.message || \"Unknown error\"\n        }`\n      );\n    }\n\n    const data: GeminiResponse = await response.json();\n\n    if (!data.candidates || data.candidates.length === 0) {\n      throw new Error(\"No response generated from Gemini API\");\n    }\n\n    const generatedText = data.candidates[0].content.parts[0].text;\n\n    // Parse the JSON response\n    const questionData = parseGeminiResponse(generatedText);\n\n    return {\n      id: Math.random().toString(36).substring(7),\n      question: questionData.question,\n      answer: questionData.answer,\n      category: questionData.category,\n      difficulty: questionData.difficulty as \"easy\" | \"medium\" | \"hard\",\n    };\n  } catch (error) {\n    console.error(\"Gemini API error:\", error);\n\n    if (error instanceof Error) {\n      throw error;\n    }\n\n    throw new Error(\"Failed to generate question. Please try again.\");\n  }\n};\n\n/**\n * Create an enhanced prompt for Gemini API with better instructions and previous questions context\n */\n/**\n * Creates an enhanced prompt for Gemini AI with context and fact-checking\n *\n * Builds comprehensive prompts that include:\n * - User preferences for difficulty, language, and category\n * - Session history to prevent duplicate questions\n * - Category-specific fact-checking instructions\n * - Geographic accuracy requirements (especially for Bulgarian content)\n *\n * @param difficulty - Desired difficulty level\n * @param language - Target language for the question\n * @param category - Preferred category or topic\n * @param previousQuestions - Array of previously generated questions to avoid duplicates\n * @returns Complete prompt string for AI generation\n */\nfunction createEnhancedGeminiPrompt(\n  difficulty: string,\n  language: string,\n  category: string,\n  previousQuestions: SessionQuestion[]\n): string {\n  const languageInstruction =\n    language.toLowerCase() === \"bulgarian\"\n      ? \"Generate the question and answer in Bulgarian language.\"\n      : \"Generate the question and answer in English language.\";\n\n  const categoryInstruction =\n    category.toLowerCase() === \"random\" || !category\n      ? \"Choose a random general knowledge topic.\"\n      : `Generate a question about the category: ${category}`;\n\n  const difficultyInstruction = getEnhancedDifficultyInstruction(difficulty);\n\n  // Add previous questions context to avoid duplicates\n  let previousQuestionsContext = \"\";\n  if (previousQuestions.length > 0) {\n    const recentQuestions = previousQuestions.slice(-10); // Last 10 questions\n    previousQuestionsContext = `\\n\\nIMPORTANT: Do NOT repeat any of these recently asked questions. Generate something completely different:\\n${recentQuestions\n      .map((q, i) => `${i + 1}. ${q.question}`)\n      .join(\"\\n\")}`;\n  }\n\n  // Enhanced fact-checking instructions\n  const factCheckingInstruction = getFactCheckingInstruction(category);\n\n  return `You are an expert quiz master with access to accurate, up-to-date information. Generate a single quiz question and its answer.\n\n${languageInstruction}\n${categoryInstruction}\n${difficultyInstruction}\n${factCheckingInstruction}\n${previousQuestionsContext}\n\nCRITICAL REQUIREMENTS:\n- The answer must be 100% factually correct and verifiable\n- For geographic questions, double-check all facts (heights, locations, names)\n- Avoid controversial or ambiguous topics\n- Make the question engaging and educational\n- Ensure the question is unique and not repetitive\n\nIMPORTANT: Respond ONLY with a valid JSON object in this exact format:\n{\n  \"question\": \"Your generated question here\",\n  \"answer\": \"The correct answer here\", \n  \"category\": \"The category of the question\",\n  \"difficulty\": \"${difficulty}\"\n}\n\nDo not include any other text, explanations, or formatting outside the JSON object.`;\n}\n\n/**\n * Get enhanced difficulty-specific instructions with more variation\n *\n * Provides detailed instructions to the AI about question complexity,\n * knowledge requirements, and reasoning depth for each difficulty level.\n *\n * @param difficulty - Target difficulty level (easy, medium, hard, or random)\n * @returns Detailed difficulty instruction for AI prompt\n */\nfunction getEnhancedDifficultyInstruction(difficulty: string): string {\n  switch (difficulty.toLowerCase()) {\n    case \"easy\":\n      return \"Make this an EASY question that most people would know. Use basic, well-known facts that are commonly taught in school or widely known in popular culture.\";\n    case \"hard\":\n      return \"Make this a HARD question that requires specialized knowledge, advanced education, or deep expertise in a specific field. Use complex concepts, technical details, or obscure historical facts.\";\n    case \"medium\":\n    default:\n      return \"Make this a MEDIUM difficulty question that requires some general knowledge and thinking. It should be challenging but not impossible for an educated person to answer.\";\n  }\n}\n\n/**\n * Get fact-checking instructions based on category\n *\n * Provides category-specific fact-checking instructions to ensure accuracy.\n * Includes special handling for Bulgarian geography to correct common AI errors.\n *\n * @param category - Question category to generate fact-checking instructions for\n * @returns Category-specific fact-checking instruction text\n */\nfunction getFactCheckingInstruction(category: string): string {\n  const lowerCategory = category.toLowerCase();\n\n  if (\n    lowerCategory.includes(\"geography\") ||\n    lowerCategory.includes(\"смолян\") ||\n    lowerCategory.includes(\"bulgaria\") ||\n    lowerCategory.includes(\"mountain\") ||\n    lowerCategory.includes(\"peak\")\n  ) {\n    return `\\nFACT-CHECKING FOR GEOGRAPHY: \n- For Bulgarian geography: Verify all mountain peaks, heights, and locations\n- For Smolyan region: The highest peak near Smolyan is Perelik (2,191m), NOT Snezhanka\n- Snezhanka is near Pamporovo but is NOT the highest peak in the Smolyan area\n- Always verify geographical facts against reliable sources\n- Double-check all numerical data (heights, distances, populations)`;\n  }\n\n  if (lowerCategory.includes(\"history\")) {\n    return `\\nFACT-CHECKING FOR HISTORY: \n- Verify all dates, names, and historical events\n- Ensure chronological accuracy\n- Cross-reference multiple historical sources`;\n  }\n\n  if (lowerCategory.includes(\"science\")) {\n    return `\\nFACT-CHECKING FOR SCIENCE: \n- Verify all scientific facts and figures\n- Ensure formulas and laws are correct\n- Use current scientific understanding`;\n  }\n\n  return `\\nFACT-CHECKING: \n- Verify all facts before including them\n- Use reliable, authoritative sources\n- Avoid outdated or disputed information`;\n}\n\n/**\n * Parse Gemini response and extract question data\n *\n * Safely parses JSON response from Gemini AI and extracts question data.\n * Includes robust error handling and fallback mechanisms.\n *\n * @param text - Raw text response from Gemini API\n * @returns Parsed question data with fallback for parsing errors\n */\nfunction parseGeminiResponse(text: string): {\n  question: string;\n  answer: string;\n  category: string;\n  difficulty: string;\n} {\n  try {\n    // Clean the response text\n    const cleanedText = text.trim();\n\n    // Try to find JSON in the response\n    const jsonMatch = cleanedText.match(/\\{[\\s\\S]*\\}/);\n    if (!jsonMatch) {\n      throw new Error(\"No JSON found in response\");\n    }\n\n    const parsed = JSON.parse(jsonMatch[0]);\n\n    // Validate required fields\n    if (!parsed.question || !parsed.answer) {\n      throw new Error(\"Missing required fields in response\");\n    }\n\n    return {\n      question: parsed.question,\n      answer: parsed.answer,\n      category: parsed.category || \"General Knowledge\",\n      difficulty: parsed.difficulty || \"medium\",\n    };\n  } catch (error) {\n    console.error(\"Failed to parse Gemini response:\", text);\n\n    // Fallback: create a basic question if parsing fails\n    return {\n      question: \"What is the capital of France?\",\n      answer: \"Paris\",\n      category: \"Geography\",\n      difficulty: \"easy\",\n    };\n  }\n}\n\n/**\n * Check if the Gemini API is available\n *\n * Validates both API key availability and network connectivity.\n * Provides safe logging that doesn't expose API keys in production.\n *\n * @returns True if API key exists and device is online\n */\nexport const isGeminiAvailable = (): boolean => {\n  const apiKey = import.meta.env.VITE_GEMINI_API_KEY;\n  const isOnline = navigator.onLine;\n\n  // Only log once per session in development to avoid console spam\n  if (import.meta.env.DEV && !(window as any).__GEMINI_LOGGED) {\n    console.log(\"🔍 Gemini API Check:\", {\n      hasApiKey: !!apiKey,\n      apiKeyLength: apiKey?.length || 0,\n      isOnline,\n      apiKeyPreview: apiKey ? `${apiKey.substring(0, 10)}...` : \"NOT_SET\",\n    });\n    (window as any).__GEMINI_LOGGED = true;\n  }\n\n  return !!(apiKey && isOnline);\n};\n\n/**\n * Get current rate limit status for UI display\n *\n * Provides real-time information about API usage for user interface.\n * Calculates remaining requests, reset time, and warning thresholds.\n *\n * @returns Object with current rate limiting status and timing information\n */\nexport const getRateLimitStatus = (): {\n  requestsRemaining: number;\n  timeUntilReset: number;\n  isNearLimit: boolean;\n} => {\n  const now = Date.now();\n\n  // Reset counter if window has passed\n  if (now - lastRequestTime > RATE_LIMIT_WINDOW) {\n    requestCount = 0;\n  }\n\n  const requestsRemaining = Math.max(0, MAX_REQUESTS_PER_MINUTE - requestCount);\n  const timeUntilReset = Math.max(\n    0,\n    RATE_LIMIT_WINDOW - (now - lastRequestTime)\n  );\n  const isNearLimit = requestsRemaining <= 3;\n\n  return {\n    requestsRemaining,\n    timeUntilReset: Math.ceil(timeUntilReset / 1000),\n    isNearLimit,\n  };\n};\n","/**\n * AI Question Generation Service for Quizzes\n *\n * Service for generating quiz questions using Google Gemini AI.\n * Builds upon the Final Question AI service to create multiple-choice\n * questions specifically for quiz creation workflow.\n *\n * Features:\n * - Multiple choice question generation (2-6 options)\n * - Text-based questions only (no media)\n * - Category and difficulty support\n * - Session-based duplicate prevention\n * - Rate limiting and error handling\n *\n * @fileoverview AI question generation service for quiz creation\n * @version 1.0.0\n * @since December 2025\n */\n\nimport {\n  generateQuestionWithGemini,\n  isGeminiAvailable,\n  getRateLimitStatus,\n} from \"../../final-question/services/geminiService\";\nimport type { QuizQuestion, QuizCategory, QuizDifficulty } from \"../types\";\nimport type {\n  GeminiQuestionParams,\n  SessionQuestion,\n} from \"../../final-question/types\";\n\n/**\n * Parameters for AI quiz question generation\n */\nexport interface AIQuestionParams {\n  /** Type of question to generate */\n  questionType?: \"text-answer\" | \"text\";\n  /** Preferred question category */\n  category?: QuizCategory | string;\n  /** Difficulty level for the question */\n  difficulty?: QuizDifficulty;\n  /** Language for the question (defaults to English) */\n  language?: string;\n  /** Number of multiple choice options (2-6, only for \"text\" type) */\n  optionsCount?: number;\n  /** Previously generated questions to avoid duplicates */\n  previousQuestions?: QuizQuestion[];\n  /** Additional context or topic specification */\n  topicHint?: string;\n}\n\n/**\n * Result of AI question generation\n */\nexport interface AIQuestionResult {\n  /** Generated quiz question */\n  question: QuizQuestion;\n  /** Whether the generation was successful */\n  success: boolean;\n  /** Error message if generation failed */\n  error?: string;\n}\n\n/**\n * Status callback for real-time updates during generation\n */\nexport type AIGenerationStatusCallback = (\n  message: string,\n  isWaiting: boolean\n) => void;\n\n/**\n * Generate a quiz question using AI\n *\n * Creates either a text-answer or multiple-choice quiz question using the Gemini AI service.\n * For text-answer questions, returns the question with a single correct answer.\n * For multiple-choice questions, generates additional distractor options.\n *\n * @param params - Generation parameters including type, category, difficulty, and options\n * @param onStatusUpdate - Optional callback for real-time status updates\n * @returns Promise resolving to generated quiz question or error\n */\nexport const generateAIQuizQuestion = async (\n  params: AIQuestionParams = {},\n  onStatusUpdate?: AIGenerationStatusCallback\n): Promise<AIQuestionResult> => {\n  try {\n    // Check if AI service is available\n    if (!isGeminiAvailable()) {\n      return {\n        question: createEmptyQuestion(),\n        success: false,\n        error:\n          \"AI service is not available. Please check your connection and try again.\",\n      };\n    }\n\n    // Prepare parameters for Gemini service\n    const geminiParams: GeminiQuestionParams = {\n      difficulty: params.difficulty || \"medium\",\n      language: params.language || \"English\",\n      category:\n        params.topicHint ||\n        mapQuizCategoryToGemini(params.category || \"general\"),\n      previousQuestions: convertQuizQuestionsToSession(\n        params.previousQuestions || []\n      ),\n    };\n\n    // Generate question using Final Question service\n    const finalQuestion = await generateQuestionWithGemini(\n      geminiParams,\n      onStatusUpdate\n    );\n\n    // Determine question type (default to text-answer if not specified)\n    const questionType = params.questionType || \"text-answer\";\n\n    // Convert to appropriate quiz question format\n    const quizQuestion = await convertToQuizQuestion(\n      finalQuestion,\n      questionType,\n      params.optionsCount || 4,\n      params.difficulty || \"medium\"\n    );\n\n    return {\n      question: quizQuestion,\n      success: true,\n    };\n  } catch (error) {\n    const errorMessage =\n      error instanceof Error ? error.message : \"Failed to generate question\";\n\n    return {\n      question: createEmptyQuestion(),\n      success: false,\n      error: errorMessage,\n    };\n  }\n};\n\n/**\n * Convert Final Question to Quiz Question format\n *\n * Takes a generated final question and creates either a text-answer question\n * or a multiple-choice question with distractor options, based on the specified type.\n *\n * @param finalQuestion - The generated final question\n * @param questionType - Type of question to create (\"text-answer\" or \"text\")\n * @param optionsCount - Number of multiple choice options to create (ignored for text-answer)\n * @param difficulty - Difficulty level for option generation\n * @returns Promise resolving to formatted quiz question\n */\nasync function convertToQuizQuestion(\n  finalQuestion: any,\n  questionType: \"text-answer\" | \"text\",\n  optionsCount: number,\n  difficulty: QuizDifficulty\n): Promise<QuizQuestion> {\n  const now = new Date();\n  const baseQuestion = {\n    id: generateQuestionId(),\n    question: finalQuestion.question,\n    difficulty: difficulty,\n    points: calculatePointsForDifficulty(difficulty),\n    timeLimit: 60, // Default to 60 seconds for all AI-generated questions\n    createdAt: now,\n    updatedAt: now,\n  };\n\n  if (questionType === \"text-answer\") {\n    // Create text-answer question\n    return {\n      ...baseQuestion,\n      type: \"text-answer\",\n      options: [],\n      correctAnswer: -1,\n      textAnswer: finalQuestion.answer,\n      explanation: `The correct answer is: ${finalQuestion.answer}`,\n    };\n  } else {\n    // Create multiple-choice question\n    // Generate distractor options using AI\n    const distractors = await generateDistractorOptions(\n      finalQuestion.question,\n      finalQuestion.answer,\n      optionsCount - 1,\n      difficulty\n    );\n\n    // Create all options with correct answer\n    const allOptions = [finalQuestion.answer, ...distractors];\n\n    // Shuffle options and track correct answer position\n    const shuffledOptions = shuffleArray([...allOptions]);\n    const correctAnswerIndex = shuffledOptions.indexOf(finalQuestion.answer);\n\n    // Create multiple-choice quiz question object\n    return {\n      ...baseQuestion,\n      type: \"text\",\n      options: shuffledOptions,\n      correctAnswer: correctAnswerIndex,\n      textAnswer: \"\",\n      explanation: `The correct answer is: ${finalQuestion.answer}`,\n    };\n  }\n}\n\n/**\n * Generate distractor options for multiple choice\n *\n * Creates plausible but incorrect options for the multiple choice question.\n * Uses AI to generate contextually appropriate distractors.\n *\n * @param question - The main question text\n * @param correctAnswer - The correct answer\n * @param count - Number of distractors to generate\n * @param difficulty - Difficulty level for distractor complexity\n * @returns Promise resolving to array of distractor options\n */\nasync function generateDistractorOptions(\n  question: string,\n  correctAnswer: string,\n  count: number,\n  difficulty: QuizDifficulty\n): Promise<string[]> {\n  try {\n    // Create prompt for generating distractors\n    const prompt = createDistractorPrompt(\n      question,\n      correctAnswer,\n      count,\n      difficulty\n    );\n\n    // Use Gemini to generate distractors\n    const apiKey = import.meta.env.VITE_GEMINI_API_KEY;\n    if (!apiKey) {\n      return generateFallbackDistractors(correctAnswer, count);\n    }\n\n    const response = await fetch(\n      `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${apiKey}`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          contents: [{ parts: [{ text: prompt }] }],\n          generationConfig: {\n            temperature: 0.8,\n            topK: 40,\n            topP: 0.9,\n          },\n        }),\n      }\n    );\n\n    if (!response.ok) {\n      return generateFallbackDistractors(correctAnswer, count);\n    }\n\n    const data = await response.json();\n    const text = data.candidates?.[0]?.content?.parts?.[0]?.text || \"\";\n\n    // Parse distractors from response\n    const distractors = parseDistractorsFromResponse(text, count);\n\n    // Ensure we have enough distractors\n    if (distractors.length < count) {\n      const fallbackDistractors = generateFallbackDistractors(\n        correctAnswer,\n        count - distractors.length\n      );\n      return [...distractors, ...fallbackDistractors];\n    }\n\n    return distractors.slice(0, count);\n  } catch (error) {\n    console.warn(\"Failed to generate AI distractors, using fallback:\", error);\n    return generateFallbackDistractors(correctAnswer, count);\n  }\n}\n\n/**\n * Create prompt for distractor generation\n */\nfunction createDistractorPrompt(\n  question: string,\n  correctAnswer: string,\n  count: number,\n  difficulty: QuizDifficulty\n): string {\n  const difficultyInstruction = {\n    easy: \"Make the wrong answers obviously incorrect but still plausible.\",\n    medium:\n      \"Make the wrong answers plausible but clearly distinguishable from the correct answer.\",\n    hard: \"Make the wrong answers very plausible and similar to the correct answer.\",\n  }[difficulty];\n\n  return `Generate ${count} incorrect but plausible answers for this multiple choice question.\n\nQuestion: ${question}\nCorrect Answer: ${correctAnswer}\n\nRequirements:\n- ${difficultyInstruction}\n- Each wrong answer should be on a separate line\n- Make them the same format/length as the correct answer\n- Don't number them or add extra text\n- Make them factually wrong but believable\n- Avoid obviously ridiculous answers\n\nWrong answers:`;\n}\n\n/**\n * Parse distractors from AI response\n */\nfunction parseDistractorsFromResponse(\n  response: string,\n  expectedCount: number\n): string[] {\n  const lines = response\n    .split(\"\\n\")\n    .map((line) => line.trim())\n    .filter((line) => line.length > 0)\n    .filter((line) => !line.match(/^[0-9]+\\.?\\s/)); // Remove numbered items\n\n  return lines.slice(0, expectedCount);\n}\n\n/**\n * Generate fallback distractors when AI fails\n */\nfunction generateFallbackDistractors(\n  correctAnswer: string,\n  count: number\n): string[] {\n  const distractors: string[] = [];\n\n  // Generate simple fallback distractors\n  for (let i = 0; i < count; i++) {\n    if (correctAnswer.match(/^\\d+$/)) {\n      // Numeric answer - generate nearby numbers\n      const num = parseInt(correctAnswer);\n      distractors.push(String(num + (i + 1) * 10));\n    } else if (correctAnswer.match(/^[A-Z]/)) {\n      // Starts with capital - might be a name or place\n      distractors.push(`Alternative ${String.fromCharCode(65 + i)}`);\n    } else {\n      // Generic fallback\n      distractors.push(`Option ${String.fromCharCode(65 + i)}`);\n    }\n  }\n\n  return distractors;\n}\n\n/**\n * Utility functions\n */\n\nfunction createEmptyQuestion(): QuizQuestion {\n  const now = new Date();\n  return {\n    id: generateQuestionId(),\n    type: \"text\",\n    question: \"\",\n    options: [\"\", \"\", \"\", \"\"],\n    correctAnswer: 0,\n    difficulty: \"medium\",\n    points: 1, // Default to 1 point\n    timeLimit: 60, // Default to 60 seconds\n    createdAt: now,\n    updatedAt: now,\n  };\n}\n\nfunction generateQuestionId(): string {\n  return `q_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n}\n\nfunction mapQuizCategoryToGemini(category: QuizCategory | string): string {\n  const mapping: Record<string, string> = {\n    general: \"General Knowledge\",\n    sports: \"Sports\",\n    history: \"History\",\n    science: \"Science\",\n    geography: \"Geography\",\n    entertainment: \"Entertainment\",\n    literature: \"Literature\",\n    art: \"Art\",\n    music: \"Music\",\n    technology: \"Technology\",\n    custom: \"General Knowledge\",\n  };\n\n  return mapping[category] || \"General Knowledge\";\n}\n\nfunction convertQuizQuestionsToSession(\n  questions: QuizQuestion[]\n): SessionQuestion[] {\n  return questions.map((q) => ({\n    question: q.question,\n    answer: q.options[q.correctAnswer] || \"\",\n  }));\n}\n\nfunction shuffleArray<T>(array: T[]): T[] {\n  const shuffled = [...array];\n  for (let i = shuffled.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n  }\n  return shuffled;\n}\n\nfunction calculatePointsForDifficulty(_difficulty: QuizDifficulty): number {\n  // Default to 1 point for all questions regardless of difficulty\n  // User can change this value manually if needed\n  return 1;\n}\n\n/**\n * Check if AI question generation is available\n */\nexport const isAIQuestionGenerationAvailable = (): boolean => {\n  return isGeminiAvailable();\n};\n\n/**\n * Get current rate limit status for AI generation\n */\nexport const getAIQuestionRateLimit = () => {\n  return getRateLimitStatus();\n};\n","/**\n * Questions Step Component (REFACTORED)\n *\n * Second step of the quiz creation wizard for adding and managing quiz questions.\n * Refactored from 1,612-line monolithic component into smaller, maintainable pieces.\n *\n * REFACTORING CHANGES:\n * - Extracted state management to useQuestionsStepState hook\n * - Split UI into smaller, focused components (RoundNavigation, QuestionsList, etc.)\n * - Maintained 100% functionality and styling compatibility\n * - Improved maintainability and follows Single Responsibility Principle\n *\n * Features:\n * - Manual question creation and editing\n * - AI-powered question generation with category/difficulty selection\n * - Multiple choice options (2-6 answers)\n * - Question reordering and deletion\n * - Real-time validation\n * - Responsive design\n *\n * @fileoverview Refactored questions step for quiz creation wizard\n * @version 2.0.0 (Refactored)\n * @since December 2025\n */\n\nimport React from \"react\";\nimport {\n  Box,\n  Typography,\n  Button,\n  TextField,\n  IconButton,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Alert,\n  CircularProgress,\n  Stack,\n  DialogContentText,\n} from \"@mui/material\";\nimport {\n  Delete as DeleteIcon,\n  Close as CloseIcon,\n  Psychology as BrainIcon,\n  ShortText as ShortTextIcon,\n  FormatListBulleted as FormatListBulletedIcon,\n} from \"@mui/icons-material\";\nimport { useQuestionsStepState } from \"./hooks/useQuestionsStepState\";\nimport {\n  RoundNavigation,\n  QuestionActionsBar,\n  QuestionsList,\n  QuestionEditor,\n} from \"./components\";\nimport {\n  isAIQuestionGenerationAvailable,\n  getAIQuestionRateLimit,\n  generateAIQuizQuestion,\n} from \"../../services/aiQuestionService\";\nimport { ROUND_TYPE_CONFIG } from \"../../types\";\n\ninterface RoundsQuestionsStepProps {\n  draftQuiz: Partial<Quiz>;\n  updateDraft: (updates: Partial<Quiz>) => void;\n  showValidation: boolean;\n}\n\nexport const RoundsQuestionsStep: React.FC<RoundsQuestionsStepProps> = ({\n  draftQuiz,\n  updateDraft,\n  showValidation,\n}) => {\n  // Use refactored state management hook\n  const { state, actions, derived } = useQuestionsStepState(draftQuiz);\n  const { rounds, currentRound, isRoundFormValid } = derived;\n\n  // Updated round types for new system\n  const ROUND_TYPES: { value: RoundType; label: string }[] = [\n    { value: \"mixed\", label: \"Mixed Types\" },\n    { value: \"single-answer-only\", label: \"Single Answer Only\" },\n    { value: \"multiple-choice\", label: \"Multiple Choice\" },\n    { value: \"picture\", label: \"Picture Round\" },\n    { value: \"audio\", label: \"Audio Round\" },\n    { value: \"video\", label: \"Video Round\" },\n    { value: \"golden-pyramid\", label: \"Golden Pyramid\" },\n  ];\n  const REVEAL_MODES: { value: AnswerRevealMode; label: string }[] = [\n    { value: \"after-each\", label: \"After Each Question\" },\n    { value: \"after-all\", label: \"After All Questions\" },\n  ];\n\n  const handleRoundSave = () => {\n    if (!isRoundFormValid) return;\n    const roundIndex =\n      state.roundModalMode === \"add\" ? rounds.length : state.currentRoundIdx;\n    const round = {\n      id:\n        state.editingRound?.id ||\n        `round_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      name: `Round ${roundIndex + 1}`,\n      description: state.roundForm.description,\n      type: state.roundForm.type as RoundType,\n      answerRevealMode: state.roundForm.answerRevealMode as AnswerRevealMode,\n      defaultTimePerQuestion: Number(state.roundForm.defaultTimePerQuestion),\n      breakingTime: Number(state.roundForm.breakingTime),\n      level: (draftQuiz.difficulty as QuizDifficulty) || \"medium\", // Inherit from quiz level\n      questions: state.editingRound?.questions || [],\n      createdAt: state.editingRound?.createdAt || new Date(),\n      updatedAt: new Date(),\n    };\n\n    // Golden Pyramid special logic: Auto-populate 4 questions\n    if (\n      state.roundForm.type === \"golden-pyramid\" &&\n      round.questions.length === 0\n    ) {\n      const goldenPyramidQuestions = Array.from({ length: 4 }, (_, index) => ({\n        id: `question_${Date.now()}_${index}_${Math.random()\n          .toString(36)\n          .substr(2, 9)}`,\n        type: \"multiple-choice\" as QuestionType,\n        question: `Golden Pyramid Question ${index + 1}`,\n        possibleAnswers: Array.from({ length: index + 1 }, () => \"\"), // 1,2,3,4 answer fields (empty)\n        correctAnswers: Array.from({ length: index + 1 }, (_, i) => i), // All answers are correct for Golden Pyramid\n        correctAnswerText: \"\",\n        explanation: \"\",\n        mediaFile: undefined,\n        difficulty: (draftQuiz.difficulty as QuizDifficulty) || \"medium\", // Inherit from quiz level\n        points: 1,\n        timeLimit: Number(state.roundForm.defaultTimePerQuestion),\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      }));\n      round.questions = goldenPyramidQuestions;\n    }\n\n    handleSaveRound(round);\n  };\n\n  /**\n   * Render AI generation dialog\n   */\n  const renderAIDialog = React.useCallback(\n    () => (\n      <Dialog\n        open={state.aiDialogOpen}\n        onClose={actions.closeAIDialog}\n        maxWidth=\"sm\"\n        fullWidth\n      >\n        <DialogTitle>\n          <Box display=\"flex\" alignItems=\"center\" gap={1}>\n            <BrainIcon color=\"primary\" />\n            Generate AI Question\n          </Box>\n        </DialogTitle>\n        <DialogContent>\n          <Stack spacing={3} sx={{ mt: 1 }}>\n            {/* AI Status */}\n            {(state.aiGenerating || state.aiStatus) && (\n              <Alert\n                severity=\"info\"\n                icon={\n                  state.aiGenerating ? (\n                    <CircularProgress size={20} />\n                  ) : undefined\n                }\n              >\n                {state.aiStatus || \"Generating question...\"}\n              </Alert>\n            )}\n\n            {/* Error */}\n            {state.aiError && !state.aiErrorDismissed && (\n              <Alert\n                severity=\"error\"\n                action={\n                  <IconButton\n                    size=\"small\"\n                    onClick={() => actions.setAiErrorDismissed(true)}\n                    aria-label=\"Dismiss error\"\n                  >\n                    <CloseIcon fontSize=\"small\" />\n                  </IconButton>\n                }\n              >\n                {state.aiError}\n              </Alert>\n            )}\n\n            {/* Question Type - Only show for Mixed rounds */}\n            {currentRound?.type === \"mixed\" && (\n              <FormControl fullWidth>\n                <InputLabel>Question Type</InputLabel>\n                <Select\n                  value={state.aiSettings.questionType || \"text-answer\"}\n                  onChange={(e) =>\n                    actions.setAiSettings({\n                      ...state.aiSettings,\n                      questionType: e.target.value as \"text-answer\" | \"text\",\n                    })\n                  }\n                  label=\"Question Type\"\n                >\n                  <MenuItem value=\"text-answer\">\n                    <Box sx={{ display: \"flex\", alignItems: \"center\", gap: 1 }}>\n                      <ShortTextIcon fontSize=\"small\" />\n                      Single Answer\n                    </Box>\n                  </MenuItem>\n                  <MenuItem value=\"text\">\n                    <Box sx={{ display: \"flex\", alignItems: \"center\", gap: 1 }}>\n                      <FormatListBulletedIcon fontSize=\"small\" />\n                      Multiple Choice\n                    </Box>\n                  </MenuItem>\n                </Select>\n              </FormControl>\n            )}\n\n            {/* Language Selection */}\n            <FormControl fullWidth>\n              <InputLabel>Language</InputLabel>\n              <Select\n                value={state.aiSettings.language || \"English\"}\n                onChange={(e) =>\n                  actions.setAiSettings({\n                    ...state.aiSettings,\n                    language: e.target.value,\n                  })\n                }\n                label=\"Language\"\n              >\n                <MenuItem value=\"English\">English</MenuItem>\n                <MenuItem value=\"Bulgarian\">Bulgarian</MenuItem>\n              </Select>\n            </FormControl>\n\n            {/* Topic Input */}\n            <TextField\n              fullWidth\n              label=\"Topic (optional)\"\n              placeholder=\"e.g., Ancient Rome, Quantum Physics, Football...\"\n              value={state.aiSettings.topicHint || \"\"}\n              onChange={(e) =>\n                actions.setAiSettings({\n                  ...state.aiSettings,\n                  topicHint: e.target.value,\n                })\n              }\n              helperText=\"Leave empty for random topic\"\n            />\n\n            {/* Category */}\n            <FormControl fullWidth>\n              <InputLabel>Category</InputLabel>\n              <Select\n                value={state.aiSettings.category || \"general\"}\n                onChange={(e) =>\n                  actions.setAiSettings({\n                    ...state.aiSettings,\n                    category: e.target.value as QuizCategory,\n                  })\n                }\n                label=\"Category\"\n              >\n                <MenuItem value=\"general\">General Knowledge</MenuItem>\n                <MenuItem value=\"science\">Science</MenuItem>\n                <MenuItem value=\"history\">History</MenuItem>\n                <MenuItem value=\"geography\">Geography</MenuItem>\n                <MenuItem value=\"sports\">Sports</MenuItem>\n                <MenuItem value=\"entertainment\">Entertainment</MenuItem>\n                <MenuItem value=\"literature\">Literature</MenuItem>\n                <MenuItem value=\"art\">Art</MenuItem>\n                <MenuItem value=\"music\">Music</MenuItem>\n                <MenuItem value=\"technology\">Technology</MenuItem>\n              </Select>\n            </FormControl>\n\n            {/* Difficulty */}\n            <FormControl fullWidth>\n              <InputLabel>Difficulty</InputLabel>\n              <Select\n                value={state.aiSettings.difficulty || \"medium\"}\n                onChange={(e) =>\n                  actions.setAiSettings({\n                    ...state.aiSettings,\n                    difficulty: e.target.value as QuizDifficulty,\n                  })\n                }\n                label=\"Difficulty\"\n              >\n                <MenuItem value=\"easy\">Easy</MenuItem>\n                <MenuItem value=\"medium\">Medium</MenuItem>\n                <MenuItem value=\"hard\">Hard</MenuItem>\n              </Select>\n            </FormControl>\n\n            {/* Options Count - Only show for multiple choice */}\n            {(state.aiSettings.questionType === \"text\" ||\n              (currentRound?.type === \"multiple-choice\" &&\n                currentRound.type !== \"mixed\")) && (\n              <FormControl fullWidth>\n                <InputLabel>Number of Options</InputLabel>\n                <Select\n                  value={state.aiSettings.optionsCount || 4}\n                  onChange={(e) =>\n                    actions.setAiSettings({\n                      ...state.aiSettings,\n                      optionsCount: Number(e.target.value),\n                    })\n                  }\n                  label=\"Number of Options\"\n                >\n                  <MenuItem value={2}>2 Options</MenuItem>\n                  <MenuItem value={3}>3 Options</MenuItem>\n                  <MenuItem value={4}>4 Options</MenuItem>\n                  <MenuItem value={5}>5 Options</MenuItem>\n                  <MenuItem value={6}>6 Options</MenuItem>\n                </Select>\n              </FormControl>\n            )}\n\n            {/* Rate limit info */}\n            {isAIQuestionGenerationAvailable() && (\n              <Box sx={{ p: 2, bgcolor: \"background.paper\", borderRadius: 1 }}>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  AI questions remaining:{\" \"}\n                  {getAIQuestionRateLimit().requestsRemaining}/15 per minute\n                </Typography>\n              </Box>\n            )}\n          </Stack>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={actions.closeAIDialog}>Cancel</Button>\n          <Button\n            onClick={async () => {\n              actions.setAiGenerating(true);\n              actions.setAiError(null);\n              actions.setAiErrorDismissed(false);\n\n              try {\n                // Determine question type based on round type\n                let questionType = state.aiSettings.questionType;\n                if (currentRound?.type === \"single-answer-only\") {\n                  questionType = \"text-answer\";\n                } else if (currentRound?.type === \"multiple-choice\") {\n                  questionType = \"text\";\n                }\n\n                const result = await generateAIQuizQuestion({\n                  questionType: questionType || \"text-answer\",\n                  language: state.aiSettings.language || \"English\",\n                  topicHint: state.aiSettings.topicHint,\n                  category: state.aiSettings.category || \"general\",\n                  difficulty: state.aiSettings.difficulty || \"medium\",\n                  optionsCount: state.aiSettings.optionsCount || 4,\n                });\n\n                if (result.success && result.question) {\n                  // Add the AI-generated question to the current round\n                  const newQuestion: QuizQuestion = {\n                    ...result.question,\n                    id: `q_${Date.now()}_${Math.random()\n                      .toString(36)\n                      .substr(2, 9)}`,\n                    difficulty: state.aiSettings.difficulty || \"medium\",\n                    points: 1,\n                    timeLimit: currentRound?.defaultTimePerQuestion || 1,\n                    createdAt: new Date(),\n                    updatedAt: new Date(),\n                  };\n\n                  const updatedRound: Round = {\n                    ...currentRound!,\n                    questions: [\n                      ...(currentRound?.questions || []),\n                      newQuestion,\n                    ],\n                    updatedAt: new Date(),\n                  };\n\n                  updateDraft({\n                    rounds: rounds.map((r, idx) =>\n                      idx === state.currentRoundIdx ? updatedRound : r\n                    ),\n                  });\n\n                  actions.setAiStatus(\"Question generated successfully!\");\n                  setTimeout(() => {\n                    actions.closeAIDialog();\n                    actions.setAiStatus(null);\n                  }, 1500);\n                } else {\n                  actions.setAiError(\n                    result.error || \"Failed to generate question\"\n                  );\n                }\n              } catch (error) {\n                actions.setAiError(\n                  error instanceof Error\n                    ? error.message\n                    : \"Unknown error occurred\"\n                );\n              } finally {\n                actions.setAiGenerating(false);\n              }\n            }}\n            variant=\"contained\"\n            disabled={state.aiGenerating || !isAIQuestionGenerationAvailable()}\n          >\n            {state.aiGenerating ? \"Generating...\" : \"Generate\"}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    ),\n    [\n      state.aiDialogOpen,\n      state.aiGenerating,\n      state.aiStatus,\n      state.aiError,\n      state.aiErrorDismissed,\n      state.aiSettings,\n      currentRound,\n      rounds,\n      state.currentRoundIdx,\n      actions,\n      updateDraft,\n    ]\n  );\n\n  // Handler to open manual question modal\n  const openManualDialog = () => {\n    if (!currentRound) return;\n\n    // Get round type configuration\n    const roundConfig = ROUND_TYPE_CONFIG[currentRound.type];\n\n    // Determine default question type based on round type\n    let defaultQuestionType: QuestionType;\n    if (currentRound.type === \"picture\") {\n      defaultQuestionType = \"picture\"; // Picture rounds use picture question type\n    } else if (currentRound.type === \"audio\") {\n      defaultQuestionType = \"audio\"; // Audio rounds use audio question type\n    } else if (currentRound.type === \"video\") {\n      defaultQuestionType = \"video\"; // Video rounds use video question type\n    } else if (roundConfig.canSelectQuestionType) {\n      defaultQuestionType = \"single-answer\"; // Mixed rounds default to single-answer\n    } else {\n      defaultQuestionType = roundConfig.allowedQuestionTypes[0]; // Auto-set for specific rounds\n    }\n\n    // Create question with appropriate defaults based on question type\n    let questionDefaults;\n    if (defaultQuestionType === \"single-answer\") {\n      questionDefaults = {\n        possibleAnswers: [],\n        correctAnswers: [],\n        correctAnswerText: \"\",\n      };\n    } else if (defaultQuestionType === \"multiple-choice\") {\n      // Multiple Choice round: default 4 answers\n      questionDefaults = {\n        possibleAnswers: [\"\", \"\", \"\", \"\"],\n        correctAnswers: [0],\n        correctAnswerText: undefined,\n      };\n    } else if ([\"picture\", \"audio\", \"video\"].includes(defaultQuestionType)) {\n      // Media types: default to single-answer behavior but keep media type\n      questionDefaults = {\n        possibleAnswers: [],\n        correctAnswers: [],\n        correctAnswerText: \"\",\n      };\n    } else {\n      // Fallback for other types\n      questionDefaults = {\n        possibleAnswers: [\"\"],\n        correctAnswers: [0],\n        correctAnswerText: undefined,\n      };\n    }\n\n    actions.setManualQuestion({\n      id: `q_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      type: defaultQuestionType,\n      question: \"\",\n      ...questionDefaults,\n      explanation: \"\",\n      mediaFile: undefined,\n      difficulty: (draftQuiz.difficulty as QuizDifficulty) || \"medium\",\n      points: 1,\n      timeLimit: currentRound.defaultTimePerQuestion || 1, // Use round's time setting in minutes\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    });\n    actions.openManualDialog();\n  };\n\n  // Required fields check for Save button\n  const manualQuestionValid =\n    state.manualQuestion &&\n    state.manualQuestion.question.trim() &&\n    (() => {\n      if (\n        state.manualQuestion.type === \"single-answer\" ||\n        [\"picture\", \"audio\", \"video\"].includes(state.manualQuestion.type)\n      ) {\n        // Single answer and media types use correctAnswerText\n        return (\n          state.manualQuestion.correctAnswerText &&\n          state.manualQuestion.correctAnswerText.trim()\n        );\n      } else if (currentRound?.type === \"golden-pyramid\") {\n        // For Golden Pyramid, allow saving incomplete questions\n        // Users can work on questions gradually and complete them over time\n        return (\n          state.manualQuestion.possibleAnswers.length > 0 &&\n          state.manualQuestion.possibleAnswers.some((answer) => answer.trim())\n        );\n      } else {\n        // Regular multiple choice validation\n        return (\n          state.manualQuestion.possibleAnswers.length >= 2 &&\n          state.manualQuestion.possibleAnswers.every((opt) => opt.trim()) &&\n          state.manualQuestion.correctAnswers.length > 0\n        );\n      }\n    })();\n\n  // Handler: Add new round\n  const handleAddRound = () => {\n    actions.openRoundModal(\"add\");\n  };\n\n  // Handler: Edit current round\n  const handleEditRound = () => {\n    actions.openRoundModal(\"edit\", currentRound || undefined);\n  };\n\n  // Handler: Save round (add or edit)\n  const handleSaveRound = (round: Round) => {\n    if (state.roundModalMode === \"add\") {\n      updateDraft({ rounds: [...rounds, round] });\n      actions.setCurrentRoundIdx(rounds.length); // Go to new round\n    } else if (state.roundModalMode === \"edit\" && currentRound) {\n      updateDraft({\n        rounds: rounds.map((r, idx) =>\n          idx === state.currentRoundIdx ? round : r\n        ),\n      });\n    }\n    actions.closeRoundModal();\n  };\n\n  // Get available round types for editing\n  const getAvailableRoundTypes = () => {\n    if (state.roundModalMode === \"edit\" && state.editingRound) {\n      // Golden Pyramid can never change type\n      if (state.editingRound.type === \"golden-pyramid\") {\n        return [{ value: \"golden-pyramid\", label: \"Golden Pyramid\" }];\n      }\n\n      // If round has questions, can only change to Mixed\n      if (state.editingRound.questions.length > 0) {\n        return [\n          {\n            value: state.editingRound.type,\n            label: ROUND_TYPE_CONFIG[state.editingRound.type].label,\n          },\n          { value: \"mixed\", label: \"Mixed Types\" },\n        ].filter(\n          (item, index, self) =>\n            index === self.findIndex((t) => t.value === item.value)\n        ); // Remove duplicates\n      }\n    }\n\n    // For new rounds or rounds without questions, show all types except golden pyramid in edit mode\n    return ROUND_TYPES.filter(\n      (type) =>\n        state.roundModalMode === \"add\" || type.value !== \"golden-pyramid\"\n    );\n  };\n\n  // Handler: Delete current round (with confirmation)\n  const requestDeleteRound = () => {\n    actions.openDeleteRoundConfirm();\n  };\n  const handleConfirmDeleteRound = () => {\n    if (!currentRound) return;\n    const newRounds = rounds.filter((_, idx) => idx !== state.currentRoundIdx);\n    updateDraft({ rounds: newRounds });\n    actions.setCurrentRoundIdx(Math.max(0, state.currentRoundIdx - 1));\n    actions.closeDeleteRoundConfirm();\n  };\n  const handleCancelDeleteRound = () => actions.closeDeleteRoundConfirm();\n\n  // Handler: Delete question in current round (with confirmation)\n  const requestDeleteQuestion = (questionId: string) => {\n    actions.openDeleteQuestionConfirm(questionId);\n  };\n  const handleConfirmDeleteQuestion = () => {\n    if (!currentRound || !state.pendingDeleteQuestionId) return;\n    const updatedQuestions = currentRound.questions.filter(\n      (q) => q.id !== state.pendingDeleteQuestionId\n    );\n    const updatedRound: Round = {\n      ...currentRound,\n      questions: updatedQuestions,\n      updatedAt: new Date(),\n    };\n    updateDraft({\n      rounds: rounds.map((r, idx) =>\n        idx === state.currentRoundIdx ? updatedRound : r\n      ),\n    });\n    if (state.editingQuestionId === state.pendingDeleteQuestionId)\n      actions.setEditingQuestionId(null);\n\n    // Close the manual dialog if we're deleting the question being edited\n    if (state.manualQuestion?.id === state.pendingDeleteQuestionId) {\n      actions.closeManualDialog();\n    }\n\n    actions.closeDeleteQuestionConfirm();\n  };\n  const handleCancelDeleteQuestion = () => {\n    actions.closeDeleteQuestionConfirm();\n  };\n\n  return (\n    <Box sx={{ maxWidth: 1000, mx: \"auto\" }}>\n      {/* Refactored Round Navigation Component */}\n      <RoundNavigation\n        rounds={rounds}\n        currentRoundIdx={state.currentRoundIdx}\n        currentRound={currentRound}\n        onPreviousRound={actions.goToPrevRound}\n        onNextRound={actions.goToNextRound}\n        onAddRound={handleAddRound}\n        onEditRound={handleEditRound}\n        onDeleteRound={requestDeleteRound}\n      />\n\n      {/* Round Type Information */}\n      {currentRound &&\n        !ROUND_TYPE_CONFIG[currentRound.type].canSelectQuestionType && (\n          <Alert severity=\"info\" sx={{ mb: 2 }}>\n            <Typography variant=\"body2\">\n              <strong>{ROUND_TYPE_CONFIG[currentRound.type].label}:</strong>{\" \"}\n              {ROUND_TYPE_CONFIG[currentRound.type].description}\n              {currentRound.type === \"golden-pyramid\" && (\n                <span>\n                  {\" \"}\n                  - This round auto-generates 4 pre-configured questions with 1,\n                  2, 3, and 4 correct answers respectively.\n                </span>\n              )}\n            </Typography>\n          </Alert>\n        )}\n\n      {/* Refactored Question Actions Bar */}\n      <QuestionActionsBar\n        showActions={!!currentRound}\n        roundType={currentRound?.type}\n        onOpenAIDialog={actions.openAIDialog}\n        onOpenManualDialog={openManualDialog}\n      />\n\n      {/* Refactored Questions List */}\n      <QuestionsList\n        currentRound={currentRound}\n        onEditQuestion={(question) => {\n          actions.setManualQuestion(question);\n          actions.openManualDialog();\n        }}\n        onDeleteQuestion={requestDeleteQuestion}\n        onAddRound={handleAddRound}\n        onAddQuestion={openManualDialog}\n      />\n\n      {/* AI Dialog */}\n      {renderAIDialog()}\n\n      {/* Manual Question Dialog */}\n      <Dialog\n        open={state.manualDialogOpen}\n        onClose={actions.closeManualDialog}\n        maxWidth=\"sm\"\n        fullWidth\n      >\n        <DialogTitle>\n          {state.manualQuestion &&\n          currentRound?.questions.some((q) => q.id === state.manualQuestion?.id)\n            ? `Edit ${\n                currentRound\n                  ? (() => {\n                      const label = ROUND_TYPE_CONFIG[currentRound.type].label;\n                      return label.includes(\"Question\")\n                        ? label\n                        : `${label} Question`;\n                    })()\n                  : \"Question\"\n              }`\n            : `Add ${\n                currentRound\n                  ? (() => {\n                      const label = ROUND_TYPE_CONFIG[currentRound.type].label;\n                      return label.includes(\"Question\")\n                        ? label\n                        : `${label} Question`;\n                    })()\n                  : \"Question\"\n              }`}\n        </DialogTitle>\n        <DialogContent>\n          {state.manualQuestion && (\n            <QuestionEditor\n              question={state.manualQuestion}\n              roundType={currentRound?.type}\n              onUpdate={(updates) =>\n                actions.setManualQuestion(\n                  state.manualQuestion\n                    ? {\n                        ...state.manualQuestion,\n                        ...updates,\n                        updatedAt: new Date(),\n                      }\n                    : null\n                )\n              }\n            />\n          )}\n        </DialogContent>\n        <DialogActions\n          sx={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n            px: 3,\n            py: 2,\n          }}\n        >\n          {/* Delete Button - Left Side (Only show when editing existing question) */}\n          {state.manualQuestion &&\n            currentRound?.questions.some(\n              (q) => q.id === state.manualQuestion?.id\n            ) && (\n              <IconButton\n                onClick={() => {\n                  if (state.manualQuestion?.id) {\n                    requestDeleteQuestion(state.manualQuestion.id);\n                  }\n                }}\n                color=\"error\"\n                sx={{\n                  bgcolor: \"error.50\",\n                  \"&:hover\": {\n                    bgcolor: \"error.100\",\n                  },\n                }}\n                aria-label=\"Delete question\"\n              >\n                <DeleteIcon />\n              </IconButton>\n            )}\n\n          {/* Spacer for Add mode */}\n          {!(\n            state.manualQuestion &&\n            currentRound?.questions.some(\n              (q) => q.id === state.manualQuestion?.id\n            )\n          ) && <Box />}\n\n          {/* Cancel and Save Buttons - Right Side */}\n          <Box sx={{ display: \"flex\", gap: 1 }}>\n            <Button onClick={actions.closeManualDialog}>Cancel</Button>\n            <Button\n              onClick={() => {\n                if (!state.manualQuestion) return;\n                // If editing, update the question in the round\n                if (\n                  currentRound?.questions.some(\n                    (q) => q.id === state.manualQuestion?.id\n                  )\n                ) {\n                  const updatedQuestions = currentRound.questions.map((q) =>\n                    q.id === state.manualQuestion?.id ? state.manualQuestion : q\n                  );\n                  const updatedRound: Round = {\n                    ...currentRound!,\n                    questions: updatedQuestions,\n                    updatedAt: new Date(),\n                  };\n                  updateDraft({\n                    rounds: rounds.map((r, idx) =>\n                      idx === state.currentRoundIdx ? updatedRound : r\n                    ),\n                  });\n                } else {\n                  // If adding, add the question to the round\n                  const updatedRound: Round = {\n                    ...currentRound!,\n                    questions: [\n                      ...(currentRound?.questions || []),\n                      state.manualQuestion,\n                    ],\n                    updatedAt: new Date(),\n                  };\n                  updateDraft({\n                    rounds: rounds.map((r, idx) =>\n                      idx === state.currentRoundIdx ? updatedRound : r\n                    ),\n                  });\n                }\n                actions.closeManualDialog();\n              }}\n              variant=\"contained\"\n              disabled={!manualQuestionValid}\n            >\n              Save\n            </Button>\n          </Box>\n        </DialogActions>\n      </Dialog>\n\n      {/* Round Modal for Add/Edit */}\n      <Dialog\n        open={state.roundModalOpen}\n        onClose={actions.closeRoundModal}\n        maxWidth=\"sm\"\n        fullWidth\n      >\n        <DialogTitle>\n          {state.roundModalMode === \"add\" ? \"Add Round\" : \"Edit Round\"}\n        </DialogTitle>\n        <DialogContent>\n          <Box\n            component=\"form\"\n            sx={{ display: \"flex\", flexDirection: \"column\", gap: 3, mt: 1 }}\n          >\n            <FormControl fullWidth required>\n              <InputLabel>Round Type</InputLabel>\n              <Select\n                value={state.roundForm.type}\n                label=\"Round Type\"\n                onChange={(e) =>\n                  actions.updateRoundForm(\"type\", e.target.value)\n                }\n                aria-label=\"Round type\"\n              >\n                {getAvailableRoundTypes().map((rt) => (\n                  <MenuItem key={rt.value} value={rt.value}>\n                    {rt.label}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n            <FormControl fullWidth required>\n              <InputLabel>Answer Reveal Mode</InputLabel>\n              <Select\n                value={state.roundForm.answerRevealMode}\n                label=\"Answer Reveal Mode\"\n                onChange={(e) =>\n                  actions.updateRoundForm(\"answerRevealMode\", e.target.value)\n                }\n                aria-label=\"Answer reveal mode\"\n              >\n                {REVEAL_MODES.map((rm) => (\n                  <MenuItem key={rm.value} value={rm.value}>\n                    {rm.label}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n            <Box>\n              <Typography gutterBottom>\n                Default Time Per Question (minutes)\n              </Typography>\n              <TextField\n                type=\"number\"\n                fullWidth\n                label=\"Minutes\"\n                inputProps={{\n                  min: 0.1,\n                  max: 10,\n                  step: 0.1,\n                }}\n                value={state.roundForm.defaultTimePerQuestion}\n                onChange={(e) => {\n                  let val = Number(e.target.value);\n                  if (val < 0.1) val = 0.1;\n                  if (val > 10) val = 10;\n                  actions.updateRoundForm(\"defaultTimePerQuestion\", val);\n                }}\n                helperText=\"Time limit per question (0.5 = 30 seconds, 1 = 60 seconds)\"\n                aria-label=\"Default time per question in minutes\"\n              />\n            </Box>\n            <Box>\n              <Typography gutterBottom>Breaking Time (minutes)</Typography>\n              <TextField\n                type=\"number\"\n                fullWidth\n                label=\"Minutes\"\n                placeholder=\"5\"\n                inputProps={{\n                  min: 0.1,\n                  max: 10,\n                  step: 0.1,\n                }}\n                value={state.roundForm.breakingTime || \"\"}\n                onChange={(e) => {\n                  let val = Number(e.target.value) || 5; // Default to 5 if empty\n                  if (val < 0.1) val = 0.1;\n                  if (val > 10) val = 10;\n                  actions.updateRoundForm(\"breakingTime\", val);\n                }}\n                helperText=\"Break time between rounds (default 5 minutes)\"\n                aria-label=\"Breaking time between rounds in minutes\"\n              />\n            </Box>\n            <TextField\n              label=\"Round Description (Optional)\"\n              value={state.roundForm.description}\n              onChange={(e) =>\n                actions.updateRoundForm(\"description\", e.target.value)\n              }\n              fullWidth\n              multiline\n              minRows={2}\n              maxRows={4}\n              inputProps={{ maxLength: 120 }}\n              aria-label=\"Round description\"\n              helperText=\"Optional description for this round\"\n            />\n          </Box>\n        </DialogContent>\n        <DialogActions\n          sx={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n            px: 3,\n            py: 2,\n          }}\n        >\n          {/* Delete Button - Left Side (Only show when editing) */}\n          {state.roundModalMode === \"edit\" && rounds.length > 0 && (\n            <IconButton\n              onClick={requestDeleteRound}\n              color=\"error\"\n              sx={{\n                bgcolor: \"error.50\",\n                \"&:hover\": {\n                  bgcolor: \"error.100\",\n                },\n              }}\n              aria-label=\"Delete round\"\n            >\n              <DeleteIcon />\n            </IconButton>\n          )}\n\n          {/* Spacer for Add mode */}\n          {state.roundModalMode === \"add\" && <Box />}\n\n          {/* Cancel and Save Buttons - Right Side */}\n          <Box sx={{ display: \"flex\", gap: 1 }}>\n            <Button onClick={actions.closeRoundModal}>Cancel</Button>\n            <Button\n              onClick={handleRoundSave}\n              variant=\"contained\"\n              disabled={!isRoundFormValid}\n            >\n              Save\n            </Button>\n          </Box>\n        </DialogActions>\n      </Dialog>\n\n      {/* Validation for Next button: ensure at least one round and each round has at least one question */}\n      {showValidation && rounds.some((r) => r.questions.length === 0) && (\n        <Alert severity=\"error\" sx={{ mt: 2 }}>\n          Each round must have at least one question to proceed.\n        </Alert>\n      )}\n\n      {/* Confirmation dialogs */}\n      <Dialog\n        open={state.deleteRoundConfirmOpen}\n        onClose={handleCancelDeleteRound}\n        aria-labelledby=\"delete-round-dialog-title\"\n        aria-describedby=\"delete-round-dialog-description\"\n      >\n        <DialogTitle id=\"delete-round-dialog-title\">\n          Confirm Delete Round\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"delete-round-dialog-description\">\n            Are you sure you want to delete this round? All questions in this\n            round will be lost. This action cannot be undone.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCancelDeleteRound} color=\"primary\" autoFocus>\n            Cancel\n          </Button>\n          <Button\n            onClick={handleConfirmDeleteRound}\n            color=\"error\"\n            variant=\"contained\"\n          >\n            Delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <Dialog\n        open={state.deleteQuestionConfirmOpen}\n        onClose={handleCancelDeleteQuestion}\n        aria-labelledby=\"delete-question-dialog-title\"\n        aria-describedby=\"delete-question-dialog-description\"\n      >\n        <DialogTitle id=\"delete-question-dialog-title\">\n          Confirm Delete Question\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"delete-question-dialog-description\">\n            Are you sure you want to delete this question? This action cannot be\n            undone.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            onClick={handleCancelDeleteQuestion}\n            color=\"primary\"\n            autoFocus\n          >\n            Cancel\n          </Button>\n          <Button\n            onClick={handleConfirmDeleteQuestion}\n            color=\"error\"\n            variant=\"contained\"\n          >\n            Delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default RoundsQuestionsStep;\n","/**\n * Quiz Creation Wizard Modal Component - Simplified Version\n *\n * Simplified full-screen modal for quiz creation with floating action buttons.\n * No complex stepping system - just basic info and questions in one flow.\n *\n * New Layout:\n * - Main app header at the top (always visible)\n * - Scrollable content with basic info and questions\n * - Two floating action buttons: Edit Quiz and Save Quiz\n * - Save confirmation dialog with quiz summary\n *\n * @fileoverview Simplified quiz creation wizard modal component\n * @version 5.0.0\n * @since December 2025\n */\n\nimport React, { useState, useCallback } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  Fade,\n  Typography,\n  Box,\n  Fab,\n  Card,\n  CardContent,\n  Chip,\n  Button,\n  DialogTitle,\n  DialogActions,\n  Divider,\n} from \"@mui/material\";\nimport {\n  Edit as EditIcon,\n  Save as SaveIcon,\n  Delete as DeleteIcon,\n  Category as CategoryIcon,\n  QuestionAnswer as QuestionIcon,\n  Timer as TimerIcon,\n  CheckCircle as CheckIcon,\n} from \"@mui/icons-material\";\nimport type { QuizWizardProps } from \"../../types\";\nimport { useQuizWizardWithStorage } from \"../../hooks\";\nimport { ErrorBoundary } from \"react-error-boundary\";\nimport Header from \"../../../../../shared/components/Header\";\nimport { useTheme } from \"../../../../../shared/hooks/useTheme\";\n\n// Import step components\nimport { BasicInfoStep } from \"../../steps/BasicInfoStep\";\nimport { RoundsQuestionsStep } from \"../../steps/QuestionsStep\";\n\n/**\n * Quiz Creation Wizard Modal - Simplified Version\n *\n * Simplified interface for creating quizzes with floating action buttons.\n * Combines basic info and questions in a single scrollable view.\n *\n * @param props - Component props including callbacks and optional edit quiz\n * @returns JSX element representing the simplified wizard modal\n */\nexport const QuizWizardModal: React.FC<\n  QuizWizardProps & { onQuizDeleted?: (id: string) => void }\n> = ({ onQuizCreated, onCancel, editQuiz, onQuizDeleted }) => {\n  // === THEME INTEGRATION ===\n  const { mode, handleThemeChange } = useTheme();\n\n  // === LOCAL STATE ===\n  const [showBasicInfo, setShowBasicInfo] = useState(true);\n  const [showSaveDialog, setShowSaveDialog] = useState(false);\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [isOpen, setIsOpen] = useState(true); // Local state to control modal open/close\n\n  // === ENHANCED WIZARD STATE WITH INDEXEDDB ===\n  const {\n    draftQuiz,\n    updateDraft,\n    resetWizard,\n    completeWizard,\n    // Enhanced auto-save features\n    autoSaveStatus,\n    storageError,\n    lastSaved,\n  } = useQuizWizardWithStorage(editQuiz);\n\n  // === COMPUTED VALUES ===\n  const totalQuestions =\n    draftQuiz.rounds?.flatMap((r) => r.questions).length || 0;\n  const totalRounds = draftQuiz.rounds?.length || 0;\n\n  // Basic validation - very lenient to allow saving at any time\n  const canSave = !!draftQuiz.title?.trim();\n\n  // === EVENT HANDLERS ===\n  /**\n   * Handles closing the wizard modal\n   * Auto-saves the draft and shows confirmation message\n   */\n  const handleClose = useCallback(() => {\n    // Check if there are unsaved changes\n    const hasChanges = draftQuiz.title || totalQuestions > 0;\n\n    if (hasChanges) {\n      // Auto-save happens in the background, just close\n      setTimeout(() => {\n        setIsOpen(false);\n        onCancel();\n      }, 100);\n    } else {\n      setIsOpen(false);\n      onCancel();\n    }\n  }, [draftQuiz.title, totalQuestions, onCancel]);\n\n  /**\n   * Handles clicking the Edit Quiz button\n   * Scrolls to basic info section\n   */\n  const handleEditQuiz = useCallback(() => {\n    setShowBasicInfo(true);\n    // Scroll to top\n    const content = document.querySelector('[data-testid=\"wizard-content\"]');\n    if (content) {\n      content.scrollTo({ top: 0, behavior: \"smooth\" });\n    }\n  }, []);\n\n  /**\n   * Handles clicking the Save Quiz button\n   * Shows the save confirmation dialog\n   */\n  const handleSaveQuiz = useCallback(() => {\n    if (canSave) {\n      setShowSaveDialog(true);\n    }\n  }, [canSave]);\n\n  /**\n   * Handles confirming the save action\n   * Creates the quiz and closes the modal\n   */\n  const handleConfirmSave = useCallback(async () => {\n    setIsSubmitting(true);\n\n    try {\n      const completedQuiz = await completeWizard();\n      onQuizCreated(completedQuiz);\n      resetWizard(); // Clear draft for next time\n      setShowSaveDialog(false);\n      onCancel(); // Close the wizard modal after save\n    } catch (error) {\n      console.error(\"Error saving quiz:\", error);\n      // Keep dialog open on error\n    } finally {\n      setIsSubmitting(false);\n    }\n  }, [completeWizard, onQuizCreated, resetWizard, onCancel]);\n\n  /**\n   * Handles canceling the save action\n   */\n  const handleCancelSave = useCallback(() => {\n    setShowSaveDialog(false);\n  }, []);\n\n  /**\n   * Handles clicking the Delete Quiz button\n   * Shows the delete confirmation dialog\n   */\n  const handleDeleteQuiz = useCallback(() => {\n    if (editQuiz) {\n      setShowDeleteDialog(true);\n    }\n  }, [editQuiz]);\n\n  /**\n   * Handles confirming the delete action\n   * Deletes the quiz and closes the modal\n   */\n  const handleConfirmDelete = useCallback(async () => {\n    if (!editQuiz) return;\n\n    setIsDeleting(true);\n\n    try {\n      // Import the delete functionality from the storage service\n      const { indexedDBService } = await import(\n        \"../../../management/services/indexedDBService\"\n      );\n      const result = await indexedDBService.deleteQuiz(editQuiz.id);\n\n      if (result.success) {\n        // Notify parent of deletion before closing\n        if (onQuizDeleted) onQuizDeleted(editQuiz.id);\n        onCancel();\n      } else {\n        throw new Error(result.error || \"Failed to delete quiz\");\n      }\n    } catch (error) {\n      console.error(\"Error deleting quiz:\", error);\n      // Keep dialog open on error\n    } finally {\n      setIsDeleting(false);\n      setShowDeleteDialog(false);\n    }\n  }, [editQuiz, onCancel, onQuizDeleted]);\n\n  /**\n   * Handles canceling the delete action\n   */\n  const handleCancelDelete = useCallback(() => {\n    setShowDeleteDialog(false);\n  }, []);\n\n  // === RENDER ===\n\n  return (\n    <ErrorBoundary\n      fallback={\n        <Dialog open fullScreen>\n          <DialogContent\n            sx={{\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              bgcolor: \"background.default\",\n            }}\n          >\n            <Typography variant=\"h6\" color=\"error\" textAlign=\"center\">\n              Something went wrong in the quiz wizard.\n              <br />\n              Please refresh the page and try again.\n            </Typography>\n          </DialogContent>\n        </Dialog>\n      }\n    >\n      <Dialog\n        open={isOpen}\n        onClose={handleClose}\n        fullScreen\n        PaperProps={{\n          sx: {\n            bgcolor: \"background.default\",\n            backgroundImage: \"none\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            height: \"100vh\",\n          },\n        }}\n        TransitionComponent={Fade}\n        transitionDuration={300}\n      >\n        {/* Main App Header - with proper theme integration and z-index */}\n        <Box sx={{ zIndex: 1400, position: \"relative\" }}>\n          <Header mode={mode} onThemeChange={handleThemeChange} />\n        </Box>\n\n        {/* Main content area - scrollable */}\n        <DialogContent\n          data-testid=\"wizard-content\"\n          sx={{\n            flex: 1,\n            p: 0,\n            display: \"flex\",\n            flexDirection: \"column\",\n            overflow: \"auto\",\n          }}\n        >\n          <Box\n            sx={{\n              maxWidth: 1200,\n              mx: \"auto\",\n              width: \"100%\",\n              px: { xs: 2, sm: 3, md: 4 },\n              py: { xs: 2, sm: 3 },\n            }}\n          >\n            {/* Basic Info Section */}\n            {showBasicInfo && (\n              <Box sx={{ mb: 4 }}>\n                <Typography variant=\"h4\" gutterBottom fontWeight={600}>\n                  Quiz Details\n                </Typography>\n                <BasicInfoStep\n                  draftQuiz={draftQuiz}\n                  updateDraft={updateDraft}\n                  validation={{\n                    isValid: true,\n                    errors: [],\n                    warnings: [],\n                    validatedAt: new Date(),\n                  }}\n                  onDeleteQuiz={editQuiz ? handleDeleteQuiz : undefined}\n                  isEditMode={!!editQuiz}\n                  onContinue={() => setShowBasicInfo(false)}\n                />\n              </Box>\n            )}\n\n            {/* Questions Section */}\n            {!showBasicInfo && (\n              <Box>\n                <RoundsQuestionsStep\n                  draftQuiz={draftQuiz}\n                  updateDraft={updateDraft}\n                  showValidation={false}\n                />\n              </Box>\n            )}\n          </Box>\n        </DialogContent>\n\n        {/* Floating Action Buttons - only show when not in basic info mode */}\n        {!showBasicInfo && (\n          <>\n            {/* Right side buttons */}\n            <Box\n              sx={{\n                position: \"fixed\",\n                bottom: { xs: 16, sm: 24 },\n                right: { xs: 16, sm: 24 },\n                display: \"flex\",\n                flexDirection: \"row\",\n                gap: 2,\n                zIndex: 1300,\n              }}\n            >\n              {/* Edit Quiz Button */}\n              <Box\n                sx={{\n                  display: { xs: \"block\", sm: \"none\" },\n                }}\n              >\n                <Fab\n                  color=\"secondary\"\n                  onClick={handleEditQuiz}\n                  sx={{\n                    boxShadow: 3,\n                    \"&:hover\": {\n                      boxShadow: 6,\n                    },\n                  }}\n                >\n                  <EditIcon />\n                </Fab>\n              </Box>\n              <Box\n                sx={{\n                  display: { xs: \"none\", sm: \"block\" },\n                }}\n              >\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  onClick={handleEditQuiz}\n                  startIcon={<EditIcon />}\n                  sx={{\n                    boxShadow: 3,\n                    \"&:hover\": {\n                      boxShadow: 6,\n                    },\n                    minWidth: 120,\n                    height: 56,\n                  }}\n                >\n                  Edit Quiz\n                </Button>\n              </Box>\n\n              {/* Save Quiz Button */}\n              <Box\n                sx={{\n                  display: { xs: \"block\", sm: \"none\" },\n                }}\n              >\n                <Fab\n                  color=\"primary\"\n                  onClick={handleSaveQuiz}\n                  disabled={!canSave}\n                  sx={{\n                    boxShadow: 3,\n                    \"&:hover\": {\n                      boxShadow: 6,\n                    },\n                    \"&.Mui-disabled\": {\n                      bgcolor: \"action.disabled\",\n                    },\n                  }}\n                >\n                  <SaveIcon />\n                </Fab>\n              </Box>\n              <Box\n                sx={{\n                  display: { xs: \"none\", sm: \"block\" },\n                }}\n              >\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={handleSaveQuiz}\n                  disabled={!canSave}\n                  startIcon={<SaveIcon />}\n                  sx={{\n                    boxShadow: 3,\n                    \"&:hover\": {\n                      boxShadow: 6,\n                    },\n                    \"&.Mui-disabled\": {\n                      bgcolor: \"action.disabled\",\n                    },\n                    minWidth: 120,\n                    height: 56,\n                  }}\n                >\n                  Save Quiz\n                </Button>\n              </Box>\n            </Box>\n          </>\n        )}\n\n        {/* Save Confirmation Dialog */}\n        <Dialog\n          open={showSaveDialog}\n          onClose={handleCancelSave}\n          maxWidth=\"sm\"\n          fullWidth\n          PaperProps={{\n            sx: {\n              borderRadius: 2,\n              boxShadow: 24,\n            },\n          }}\n        >\n          <DialogTitle\n            sx={{\n              display: \"flex\",\n              alignItems: \"center\",\n              gap: 2,\n              pb: 2,\n            }}\n          >\n            <CheckIcon color=\"success\" />\n            <Typography variant=\"h6\" fontWeight={600}>\n              Save Quiz\n            </Typography>\n          </DialogTitle>\n\n          <DialogContent sx={{ pb: 2 }}>\n            <Card\n              variant=\"outlined\"\n              sx={{\n                mb: 3,\n                bgcolor: \"background.paper\",\n                border: \"1px solid\",\n                borderColor: \"divider\",\n              }}\n            >\n              <CardContent>\n                <Typography variant=\"h6\" gutterBottom fontWeight={600}>\n                  {draftQuiz.title}\n                </Typography>\n\n                {draftQuiz.description && (\n                  <Typography\n                    variant=\"body2\"\n                    color=\"text.secondary\"\n                    paragraph\n                    sx={{ mb: 2 }}\n                  >\n                    {draftQuiz.description}\n                  </Typography>\n                )}\n\n                <Box sx={{ display: \"flex\", gap: 1, flexWrap: \"wrap\", mb: 2 }}>\n                  <Chip\n                    icon={<CategoryIcon />}\n                    label={draftQuiz.category || \"General\"}\n                    size=\"small\"\n                    variant=\"outlined\"\n                  />\n                  <Chip\n                    icon={<TimerIcon />}\n                    label={`${totalRounds} Round${\n                      totalRounds !== 1 ? \"s\" : \"\"\n                    }`}\n                    size=\"small\"\n                    variant=\"filled\"\n                    color=\"secondary\"\n                  />\n                  <Chip\n                    icon={<QuestionIcon />}\n                    label={`${totalQuestions} Question${\n                      totalQuestions !== 1 ? \"s\" : \"\"\n                    }`}\n                    size=\"small\"\n                    variant=\"filled\"\n                    color=\"primary\"\n                  />\n                </Box>\n\n                <Divider sx={{ my: 2 }} />\n\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  <strong>Difficulty:</strong>{\" \"}\n                  {draftQuiz.difficulty || \"Not set\"}\n                </Typography>\n              </CardContent>\n            </Card>\n\n            <Typography\n              variant=\"body2\"\n              color=\"text.secondary\"\n              textAlign=\"center\"\n            >\n              Are you ready to save this quiz? You can always edit it later.\n            </Typography>\n          </DialogContent>\n\n          <DialogActions sx={{ px: 3, pb: 3, gap: 1 }}>\n            <Button\n              onClick={handleCancelSave}\n              variant=\"outlined\"\n              disabled={isSubmitting}\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleConfirmSave}\n              variant=\"contained\"\n              disabled={isSubmitting}\n              startIcon={isSubmitting ? null : <SaveIcon />}\n            >\n              {isSubmitting ? \"Saving...\" : \"Save Quiz\"}\n            </Button>\n          </DialogActions>\n        </Dialog>\n\n        {/* Delete Confirmation Dialog */}\n        <Dialog\n          open={showDeleteDialog}\n          onClose={handleCancelDelete}\n          maxWidth=\"sm\"\n          fullWidth\n          PaperProps={{\n            sx: {\n              borderRadius: 2,\n              boxShadow: 24,\n            },\n          }}\n        >\n          <DialogTitle\n            sx={{\n              display: \"flex\",\n              alignItems: \"center\",\n              gap: 2,\n              pb: 2,\n            }}\n          >\n            <DeleteIcon color=\"error\" />\n            <Typography variant=\"h6\" fontWeight={600}>\n              Delete Quiz\n            </Typography>\n          </DialogTitle>\n\n          <DialogContent sx={{ pb: 2 }}>\n            <Typography variant=\"body1\" paragraph>\n              Are you sure you want to delete this quiz?\n            </Typography>\n\n            <Card\n              variant=\"outlined\"\n              sx={{\n                mb: 3,\n                bgcolor: \"background.paper\",\n                border: \"1px solid\",\n                borderColor: \"divider\",\n              }}\n            >\n              <CardContent>\n                <Typography variant=\"h6\" gutterBottom fontWeight={600}>\n                  {editQuiz?.title}\n                </Typography>\n\n                {editQuiz?.description && (\n                  <Typography\n                    variant=\"body2\"\n                    color=\"text.secondary\"\n                    paragraph\n                    sx={{ mb: 2 }}\n                  >\n                    {editQuiz.description}\n                  </Typography>\n                )}\n\n                <Box sx={{ display: \"flex\", gap: 1, flexWrap: \"wrap\", mb: 2 }}>\n                  <Chip\n                    icon={<CategoryIcon />}\n                    label={editQuiz?.category || \"General\"}\n                    size=\"small\"\n                    variant=\"outlined\"\n                  />\n                  <Chip\n                    icon={<TimerIcon />}\n                    label={`${editQuiz?.rounds?.length || 0} Round${\n                      (editQuiz?.rounds?.length || 0) !== 1 ? \"s\" : \"\"\n                    }`}\n                    size=\"small\"\n                    variant=\"filled\"\n                    color=\"secondary\"\n                  />\n                  <Chip\n                    icon={<QuestionIcon />}\n                    label={`${\n                      editQuiz?.rounds?.flatMap((r) => r.questions).length || 0\n                    } Question${\n                      (editQuiz?.rounds?.flatMap((r) => r.questions).length ||\n                        0) !== 1\n                        ? \"s\"\n                        : \"\"\n                    }`}\n                    size=\"small\"\n                    variant=\"filled\"\n                    color=\"primary\"\n                  />\n                </Box>\n              </CardContent>\n            </Card>\n\n            <Typography\n              variant=\"body2\"\n              color=\"error\"\n              textAlign=\"center\"\n              fontWeight={500}\n            >\n              This action cannot be undone. The quiz will be permanently\n              deleted.\n            </Typography>\n          </DialogContent>\n\n          <DialogActions sx={{ px: 3, pb: 3, gap: 1 }}>\n            <Button\n              onClick={handleCancelDelete}\n              variant=\"outlined\"\n              disabled={isDeleting}\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleConfirmDelete}\n              variant=\"contained\"\n              color=\"error\"\n              disabled={isDeleting}\n              startIcon={isDeleting ? null : <DeleteIcon />}\n            >\n              {isDeleting ? \"Deleting...\" : \"Delete Quiz\"}\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </Dialog>\n    </ErrorBoundary>\n  );\n};\n","/**\n * Quiz Actions Component\n *\n * Handles all quiz-related actions including menu interactions, modals,\n * and confirmation dialogs. Extracted from the monolithic Quizzes.tsx\n * to improve maintainability and follow Single Responsibility Principle.\n *\n * Features:\n * - Context menu for quiz actions (Edit, Export, Delete)\n * - Delete confirmation dialog\n * - Quiz wizard modal integration\n * - Floating action button\n *\n * @fileoverview Quiz actions and interactions management\n * @version 1.0.0\n * @since December 2025\n */\n\nimport React from \"react\";\nimport {\n  Menu,\n  MenuItem,\n  ListItemIcon,\n  ListItemText,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  DialogActions,\n  Button,\n  Fab,\n} from \"@mui/material\";\nimport {\n  Edit as EditIcon,\n  Delete as DeleteIcon,\n  Download as DownloadIcon,\n  Add as AddIcon,\n  PowerSettingsNew as PowerPointIcon,\n  Slideshow as GoogleSlidesIcon,\n  Code as JSONIcon,\n} from \"@mui/icons-material\";\nimport { QuizWizardModal } from \"../../../creation-editing/components\";\nimport type { Quiz } from \"../../types\";\n\n/**\n * Props for the QuizActions component\n */\nexport interface QuizActionsProps {\n  /** Currently selected quiz for menu actions */\n  selectedQuiz: Quiz | null;\n  /** Menu anchor element */\n  menuAnchorEl: HTMLElement | null;\n  /** Quiz being edited in wizard */\n  editingQuiz: Quiz | null;\n  /** Whether wizard modal is open */\n  isWizardOpen: boolean;\n  /** Whether delete confirmation dialog is open */\n  deleteConfirmOpen: boolean;\n  /** Quiz pending deletion */\n  pendingDeleteQuiz: Quiz | null;\n  /** Callback when menu should close */\n  onMenuClose: () => void;\n  /** Callback when quiz edit is requested */\n  onEditQuiz: (quiz: Quiz) => void;\n  /** Callback when quiz export is requested */\n  onExportQuiz: (quiz: Quiz, format: \"powerpoint\" | \"slides\" | \"json\") => void;\n  /** Callback when quiz deletion is requested */\n  onRequestDeleteQuiz: (quiz: Quiz) => void;\n  /** Callback when quiz deletion is confirmed */\n  onConfirmDeleteQuiz: () => void;\n  /** Callback when quiz deletion is cancelled */\n  onCancelDeleteQuiz: () => void;\n  /** Callback when quiz creation is requested */\n  onCreateQuiz: () => void;\n  /** Callback when quiz wizard is cancelled */\n  onWizardCancel: () => void;\n  /** Callback when quiz is created/updated */\n  onQuizCreated: (quiz: Quiz) => void;\n}\n\n/**\n * QuizActions Component\n *\n * Manages all quiz-related actions and interactions including menus,\n * modals, and dialogs. Provides a centralized location for action handling.\n *\n * @param props - Component props\n * @returns JSX element representing quiz actions and interactions\n */\nexport const QuizActions: React.FC<QuizActionsProps> = ({\n  selectedQuiz,\n  menuAnchorEl,\n  editingQuiz,\n  isWizardOpen,\n  deleteConfirmOpen,\n  pendingDeleteQuiz,\n  onMenuClose,\n  onEditQuiz,\n  onExportQuiz,\n  onRequestDeleteQuiz,\n  onConfirmDeleteQuiz,\n  onCancelDeleteQuiz,\n  onCreateQuiz,\n  onWizardCancel,\n  onQuizCreated,\n}) => {\n  /**\n   * Handles edit menu item click\n   */\n  const handleEditClick = React.useCallback(() => {\n    if (selectedQuiz) {\n      onEditQuiz(selectedQuiz);\n      onMenuClose();\n    }\n  }, [selectedQuiz, onEditQuiz, onMenuClose]);\n\n  /**\n   * Handles PowerPoint export menu item click\n   */\n  const handlePowerPointExport = React.useCallback(() => {\n    if (selectedQuiz) {\n      onExportQuiz(selectedQuiz, \"powerpoint\");\n      onMenuClose();\n    }\n  }, [selectedQuiz, onExportQuiz, onMenuClose]);\n\n  /**\n   * Handles Google Slides export menu item click (disabled)\n   */\n  const handleSlidesExport = React.useCallback(() => {\n    if (selectedQuiz) {\n      onExportQuiz(selectedQuiz, \"slides\");\n      onMenuClose();\n    }\n  }, [selectedQuiz, onExportQuiz, onMenuClose]);\n\n  /**\n   * Handles JSON export menu item click (disabled)\n   */\n  const handleJSONExport = React.useCallback(() => {\n    if (selectedQuiz) {\n      onExportQuiz(selectedQuiz, \"json\");\n      onMenuClose();\n    }\n  }, [selectedQuiz, onExportQuiz, onMenuClose]);\n\n  /**\n   * Handles delete menu item click\n   */\n  const handleDeleteClick = React.useCallback(() => {\n    if (selectedQuiz) {\n      onRequestDeleteQuiz(selectedQuiz);\n      onMenuClose();\n    }\n  }, [selectedQuiz, onRequestDeleteQuiz, onMenuClose]);\n\n  return (\n    <>\n      {/* Quiz options menu */}\n      <Menu\n        anchorEl={menuAnchorEl}\n        open={Boolean(menuAnchorEl)}\n        onClose={onMenuClose}\n        transformOrigin={{ horizontal: \"right\", vertical: \"top\" }}\n        anchorOrigin={{ horizontal: \"right\", vertical: \"bottom\" }}\n      >\n        <MenuItem onClick={handleEditClick}>\n          <ListItemIcon>\n            <EditIcon fontSize=\"small\" />\n          </ListItemIcon>\n          <ListItemText>Edit Quiz</ListItemText>\n        </MenuItem>\n        <MenuItem onClick={handlePowerPointExport}>\n          <ListItemIcon>\n            <PowerPointIcon fontSize=\"small\" />\n          </ListItemIcon>\n          <ListItemText>Export to PowerPoint</ListItemText>\n        </MenuItem>\n        <MenuItem onClick={handleSlidesExport} disabled>\n          <ListItemIcon>\n            <GoogleSlidesIcon fontSize=\"small\" />\n          </ListItemIcon>\n          <ListItemText>Export to Google Slides</ListItemText>\n        </MenuItem>\n        <MenuItem onClick={handleJSONExport} disabled>\n          <ListItemIcon>\n            <JSONIcon fontSize=\"small\" />\n          </ListItemIcon>\n          <ListItemText>Export as JSON</ListItemText>\n        </MenuItem>\n        <MenuItem onClick={handleDeleteClick} sx={{ color: \"error.main\" }}>\n          <ListItemIcon>\n            <DeleteIcon fontSize=\"small\" color=\"error\" />\n          </ListItemIcon>\n          <ListItemText>Delete Quiz</ListItemText>\n        </MenuItem>\n      </Menu>\n\n      {/* Floating Action Button for quiz creation */}\n      <Fab\n        color=\"primary\"\n        aria-label=\"Create new quiz\"\n        onClick={onCreateQuiz}\n        sx={{\n          position: \"fixed\",\n          bottom: 80,\n          right: 24,\n          zIndex: 1000,\n        }}\n      >\n        <AddIcon />\n      </Fab>\n\n      {/* Quiz Creation/Edit Wizard Modal */}\n      {isWizardOpen && (\n        <QuizWizardModal\n          onQuizCreated={onQuizCreated}\n          onCancel={onWizardCancel}\n          editQuiz={editingQuiz || undefined}\n          onQuizDeleted={() => {\n            window.location.reload();\n          }}\n        />\n      )}\n\n      {/* Delete Confirmation Dialog */}\n      <Dialog\n        open={deleteConfirmOpen}\n        onClose={onCancelDeleteQuiz}\n        aria-labelledby=\"delete-quiz-dialog-title\"\n        aria-describedby=\"delete-quiz-dialog-description\"\n      >\n        <DialogTitle id=\"delete-quiz-dialog-title\">Confirm Delete</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"delete-quiz-dialog-description\">\n            Are you sure you want to delete this quiz? This action cannot be\n            undone.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onCancelDeleteQuiz} color=\"primary\" autoFocus>\n            Cancel\n          </Button>\n          <Button\n            onClick={onConfirmDeleteQuiz}\n            color=\"error\"\n            variant=\"contained\"\n          >\n            Delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n\nexport default QuizActions;\n","/**\n * Storage Modal Component\n *\n * Beautiful modal dialog for displaying storage usage, quiz list with sizes,\n * and storage management actions. Provides a clean interface for users to\n * monitor and manage their quiz storage.\n *\n * Features:\n * - Storage usage visualization with animated progress\n * - Detailed quiz list with individual storage sizes\n * - Storage cleanup functionality with confirmation\n * - Beautiful Material-UI design with animations\n * - Responsive layout for mobile and desktop\n *\n * @fileoverview Storage management modal component\n * @version 1.0.0\n * @since December 2025\n */\n\nimport React, { useState, useMemo } from \"react\";\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Box,\n  Typography,\n  Button,\n  IconButton,\n  LinearProgress,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  Divider,\n  Chip,\n  Alert,\n  Fade,\n  Zoom,\n  useTheme,\n  useMediaQuery,\n} from \"@mui/material\";\nimport {\n  Close as CloseIcon,\n  Storage as StorageIcon,\n  Delete as DeleteIcon,\n  Quiz as QuizIcon,\n  Edit as DraftIcon,\n  BarChart as ChartIcon,\n  CleaningServices as CleanIcon,\n  Warning as WarningIcon,\n} from \"@mui/icons-material\";\nimport type { Quiz } from \"../../types\";\nimport type { StorageUsage } from \"../../services/indexedDBService\";\n\n/**\n * Props for the StorageModal component\n */\ninterface StorageModalProps {\n  /** Whether the modal is open */\n  open: boolean;\n  /** Callback to close the modal */\n  onClose: () => void;\n  /** Storage usage information */\n  storageUsage: StorageUsage | null;\n  /** Array of all quizzes (including drafts) */\n  quizzes: Quiz[];\n  /** Number of drafts */\n  draftsCount: number;\n  /** Callback to cleanup storage */\n  onCleanupStorage: () => void;\n  /** Callback to refresh storage info */\n  onRefreshStorage: () => void;\n}\n\n/**\n * Storage Modal Component\n *\n * Renders a beautiful modal with storage information, quiz list, and management actions.\n */\nexport const StorageModal: React.FC<StorageModalProps> = ({\n  open,\n  onClose,\n  storageUsage,\n  quizzes,\n  draftsCount,\n  onCleanupStorage,\n  onRefreshStorage,\n}) => {\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down(\"sm\"));\n  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);\n\n  // Format file size helper\n  const formatSize = (bytes: number) => {\n    if (bytes === 0) return \"0 B\";\n    const k = 1024;\n    const sizes = [\"B\", \"KB\", \"MB\", \"GB\"];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return `${parseFloat((bytes / Math.pow(k, i)).toFixed(1))} ${sizes[i]}`;\n  };\n\n  // Calculate individual quiz sizes (estimated)\n  const quizzesWithSizes = useMemo(() => {\n    return quizzes.map((quiz) => {\n      // Estimate size based on content\n      const baseSize = 1024; // 1KB base\n      const questionSize = (quiz.rounds?.length || 0) * 512; // 512B per round\n      const titleSize = (quiz.title?.length || 0) * 2; // 2B per character\n      const descSize = (quiz.description?.length || 0) * 2;\n      const estimatedSize = baseSize + questionSize + titleSize + descSize;\n\n      return {\n        ...quiz,\n        estimatedSize,\n      };\n    });\n  }, [quizzes]);\n\n  // Handle cleanup confirmation\n  const handleCleanupClick = () => {\n    setShowDeleteConfirm(true);\n  };\n\n  const handleConfirmCleanup = () => {\n    onCleanupStorage();\n    setShowDeleteConfirm(false);\n    onClose();\n  };\n\n  const handleCancelCleanup = () => {\n    setShowDeleteConfirm(false);\n  };\n\n  // Storage usage percentage\n  const usagePercentage = storageUsage?.percentageUsed || 0;\n  const isNearLimit = storageUsage?.isNearLimit || false;\n\n  return (\n    <>\n      <Dialog\n        open={open}\n        onClose={onClose}\n        maxWidth=\"md\"\n        fullWidth\n        fullScreen={isMobile}\n        TransitionComponent={Zoom}\n        transitionDuration={300}\n        PaperProps={{\n          sx: {\n            borderRadius: isMobile ? 0 : 3,\n            maxHeight: isMobile ? \"100%\" : \"90vh\",\n          },\n        }}\n      >\n        {/* Header */}\n        <DialogTitle\n          sx={{\n            background: `linear-gradient(135deg, ${theme.palette.primary.main}, ${theme.palette.primary.dark})`,\n            color: \"white\",\n            textAlign: \"center\",\n            position: \"relative\",\n            py: 3,\n          }}\n        >\n          <Box\n            display=\"flex\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n            gap={2}\n          >\n            <StorageIcon sx={{ fontSize: 28 }} />\n            <Typography variant=\"h5\" component=\"div\" fontWeight=\"bold\">\n              Storage\n            </Typography>\n          </Box>\n\n          <IconButton\n            onClick={onClose}\n            sx={{\n              position: \"absolute\",\n              right: 8,\n              top: 8,\n              color: \"white\",\n              bgcolor: \"rgba(255,255,255,0.1)\",\n              \"&:hover\": {\n                bgcolor: \"rgba(255,255,255,0.2)\",\n              },\n            }}\n          >\n            <CloseIcon />\n          </IconButton>\n        </DialogTitle>\n\n        {/* Content */}\n        <DialogContent sx={{ p: 0 }}>\n          {/* Storage Usage Section */}\n          <Box sx={{ p: 3, bgcolor: \"background.default\" }}>\n            <Box display=\"flex\" alignItems=\"center\" gap={2} mb={2}>\n              <ChartIcon color=\"primary\" />\n              <Typography variant=\"h6\" fontWeight=\"600\">\n                Current Usage\n              </Typography>\n            </Box>\n\n            {storageUsage && (\n              <Fade in timeout={500}>\n                <Box>\n                  <Box\n                    display=\"flex\"\n                    justifyContent=\"space-between\"\n                    alignItems=\"center\"\n                    mb={1}\n                  >\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      {formatSize(storageUsage.totalSize)} / 500 MB\n                    </Typography>\n                    <Typography\n                      variant=\"body2\"\n                      fontWeight=\"600\"\n                      color={isNearLimit ? \"warning.main\" : \"text.primary\"}\n                    >\n                      {usagePercentage.toFixed(1)}% used\n                    </Typography>\n                  </Box>\n\n                  <LinearProgress\n                    variant=\"determinate\"\n                    value={Math.min(usagePercentage, 100)}\n                    color={isNearLimit ? \"warning\" : \"primary\"}\n                    sx={{\n                      height: 12,\n                      borderRadius: 6,\n                      bgcolor: \"rgba(0,0,0,0.1)\",\n                      \"& .MuiLinearProgress-bar\": {\n                        borderRadius: 6,\n                        background: isNearLimit\n                          ? `linear-gradient(90deg, ${theme.palette.warning.main}, ${theme.palette.warning.dark})`\n                          : `linear-gradient(90deg, ${theme.palette.primary.main}, ${theme.palette.primary.dark})`,\n                      },\n                    }}\n                  />\n\n                  {isNearLimit && (\n                    <Alert\n                      severity=\"warning\"\n                      icon={<WarningIcon />}\n                      sx={{ mt: 2, borderRadius: 2 }}\n                    >\n                      Storage is nearly full. Consider cleaning up old quizzes.\n                    </Alert>\n                  )}\n                </Box>\n              </Fade>\n            )}\n          </Box>\n\n          <Divider />\n\n          {/* Quiz List Section */}\n          <Box sx={{ p: 3 }}>\n            <Box display=\"flex\" alignItems=\"center\" gap={2} mb={2}>\n              <QuizIcon color=\"primary\" />\n              <Typography variant=\"h6\" fontWeight=\"600\">\n                Quiz Storage\n              </Typography>\n              <Chip\n                label={`${quizzesWithSizes.length} items`}\n                size=\"small\"\n                color=\"primary\"\n                variant=\"outlined\"\n              />\n            </Box>\n\n            {quizzesWithSizes.length === 0 ? (\n              <Box textAlign=\"center\" py={4}>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  No quizzes found\n                </Typography>\n              </Box>\n            ) : (\n              <List sx={{ maxHeight: 300, overflow: \"auto\" }}>\n                {quizzesWithSizes.map((quiz, index) => (\n                  <Fade in timeout={300 + index * 100} key={quiz.id}>\n                    <ListItem\n                      sx={{\n                        borderRadius: 2,\n                        mb: 1,\n                        bgcolor: \"background.paper\",\n                        border: 1,\n                        borderColor: \"divider\",\n                        \"&:hover\": {\n                          bgcolor: \"action.hover\",\n                        },\n                      }}\n                    >\n                      <ListItemIcon>\n                        {quiz.isDraft ? (\n                          <DraftIcon color=\"secondary\" />\n                        ) : (\n                          <QuizIcon color=\"primary\" />\n                        )}\n                      </ListItemIcon>\n                      <ListItemText\n                        primary={\n                          <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                            <Typography variant=\"body1\" noWrap>\n                              {quiz.title}\n                            </Typography>\n                            {quiz.isDraft && (\n                              <Chip\n                                label=\"Draft\"\n                                size=\"small\"\n                                color=\"secondary\"\n                                variant=\"outlined\"\n                              />\n                            )}\n                          </Box>\n                        }\n                        secondary={\n                          <Typography variant=\"caption\" color=\"text.secondary\">\n                            {quiz.rounds?.length || 0} rounds • Created{\" \"}\n                            {new Date(quiz.createdAt).toLocaleDateString()}\n                          </Typography>\n                        }\n                      />\n                      <Typography\n                        variant=\"body2\"\n                        fontWeight=\"600\"\n                        color=\"primary.main\"\n                      >\n                        {formatSize(quiz.estimatedSize)}\n                      </Typography>\n                    </ListItem>\n                  </Fade>\n                ))}\n              </List>\n            )}\n          </Box>\n        </DialogContent>\n\n        {/* Actions */}\n        <DialogActions\n          sx={{\n            p: 3,\n            bgcolor: \"background.default\",\n            borderTop: 1,\n            borderColor: \"divider\",\n            gap: 2,\n          }}\n        >\n          <Button\n            onClick={handleCleanupClick}\n            startIcon={<CleanIcon />}\n            color=\"error\"\n            variant=\"outlined\"\n            disabled={quizzesWithSizes.length === 0}\n            sx={{\n              borderRadius: 2,\n              textTransform: \"none\",\n              fontWeight: 600,\n            }}\n          >\n            Clear All Storage\n          </Button>\n\n          <Box sx={{ flex: 1 }} />\n\n          <Button\n            onClick={onClose}\n            variant=\"contained\"\n            sx={{\n              borderRadius: 2,\n              textTransform: \"none\",\n              fontWeight: 600,\n              px: 4,\n            }}\n          >\n            OK\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Delete Confirmation Dialog */}\n      <Dialog\n        open={showDeleteConfirm}\n        onClose={handleCancelCleanup}\n        maxWidth=\"sm\"\n        fullWidth\n        TransitionComponent={Fade}\n      >\n        <DialogTitle sx={{ textAlign: \"center\", pt: 3 }}>\n          <WarningIcon sx={{ fontSize: 48, color: \"warning.main\", mb: 2 }} />\n          <Typography variant=\"h6\" fontWeight=\"600\">\n            Clear All Storage\n          </Typography>\n        </DialogTitle>\n\n        <DialogContent sx={{ textAlign: \"center\", pb: 2 }}>\n          <Typography variant=\"body1\" color=\"text.secondary\">\n            Are you sure you want to clear all quiz storage? This will\n            permanently delete <strong>ALL quizzes and drafts</strong> from your\n            device.\n          </Typography>\n          <Typography\n            variant=\"body2\"\n            color=\"error.main\"\n            sx={{ mt: 2, fontWeight: 600 }}\n          >\n            This action cannot be undone.\n          </Typography>\n        </DialogContent>\n\n        <DialogActions sx={{ p: 3, gap: 2 }}>\n          <Button\n            onClick={handleCancelCleanup}\n            variant=\"outlined\"\n            sx={{ borderRadius: 2, textTransform: \"none\", fontWeight: 600 }}\n            autoFocus\n          >\n            Cancel\n          </Button>\n          <Button\n            onClick={handleConfirmCleanup}\n            color=\"error\"\n            variant=\"contained\"\n            sx={{ borderRadius: 2, textTransform: \"none\", fontWeight: 600 }}\n          >\n            Clear All Storage\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n\nexport default StorageModal;\n","/**\n * Quiz Export Hook\n *\n * Extracted from useQuizManagement for better separation of concerns.\n * Handles PowerPoint export functionality using PptxGenJS with comprehensive\n * slide generation, media support, and presenter notes.\n *\n * @fileoverview Quiz PowerPoint export hook following Single Responsibility Principle\n * @version 1.0.0\n * @since December 2025\n */\n\nimport { useState, useCallback } from \"react\";\nimport type { Quiz, ExportSettings } from \"../types\";\n\n/**\n * Default export settings for PowerPoint generation\n */\nconst DEFAULT_EXPORT_SETTINGS: ExportSettings = {\n  includePresenterNotes: true,\n  slideTemplate: \"standard\",\n  questionFontSize: 24,\n  optionFontSize: 18,\n  includeMetadata: true,\n  includeAnswerKey: true,\n  compressImages: true,\n  imageQuality: 85,\n};\n\n/**\n * Validates quiz data before export\n *\n * @param quiz - Quiz to validate\n * @returns Error message if invalid, null if valid\n */\nconst validateQuizForExport = (quiz: Quiz | null): string | null => {\n  if (!quiz) {\n    return \"Quiz data is missing\";\n  }\n  if (!quiz.rounds || !Array.isArray(quiz.rounds)) {\n    return \"Quiz rounds are missing or invalid\";\n  }\n  if (quiz.rounds.length === 0) {\n    return \"Quiz has no rounds\";\n  }\n  if (!quiz.rounds.every((round) => round && Array.isArray(round.questions))) {\n    return \"One or more quiz rounds have invalid questions\";\n  }\n  return null;\n};\n\n/**\n * Quiz Export Hook\n *\n * Provides PowerPoint export functionality including:\n * - PPTX generation with PptxGenJS\n * - Title slide with quiz metadata\n * - Individual question slides with answers\n * - Media file embedding for images\n * - Presenter notes with explanations\n * - Answer key slide generation\n *\n * @returns Object containing export functions and state\n */\nexport const useQuizExport = () => {\n  const [isExporting, setIsExporting] = useState(false);\n  const [exportError, setExportError] = useState<string | null>(null);\n\n  /**\n   * Exports a quiz to PowerPoint format using PptxGenJS\n   * Creates a downloadable PPTX file with all quiz content\n   *\n   * @param quiz - Quiz to export\n   * @param settings - Export settings and preferences\n   * @returns Promise that resolves when export is complete\n   */\n  const exportToPowerPoint = useCallback(\n    async (\n      quiz: Quiz,\n      settings: ExportSettings = DEFAULT_EXPORT_SETTINGS\n    ): Promise<void> => {\n      setIsExporting(true);\n      setExportError(null);\n\n      try {\n        // Validate quiz data before proceeding\n        const validationError = validateQuizForExport(quiz);\n        if (validationError) {\n          throw new Error(validationError);\n        }\n\n        // Dynamic import to avoid bundling PptxGenJS unless needed\n        const PptxGenJS = (await import(\"pptxgenjs\")).default;\n        const pptx = new PptxGenJS();\n\n        // Configure presentation settings\n        pptx.defineLayout({ name: \"QUIZZARD\", width: 10, height: 7.5 });\n        pptx.layout = \"QUIZZARD\";\n\n        // Add title slide if metadata is included\n        if (settings.includeMetadata) {\n          const titleSlide = pptx.addSlide();\n          titleSlide.addText(quiz.title, {\n            x: 1,\n            y: 2,\n            w: 8,\n            h: 1.5,\n            fontSize: 36,\n            bold: true,\n            align: \"center\",\n          });\n\n          titleSlide.addText(\n            [\n              {\n                text: `Category: ${quiz.category}`,\n                options: { breakLine: true },\n              },\n              {\n                text: `Difficulty: ${quiz.difficulty}`,\n                options: { breakLine: true },\n              },\n              {\n                text: `Questions: ${\n                  quiz.rounds.flatMap((r) => r.questions).length\n                }`,\n                options: { breakLine: true },\n              },\n            ],\n            {\n              x: 1,\n              y: 4,\n              w: 8,\n              h: 2,\n              fontSize: 18,\n              align: \"center\",\n            }\n          );\n\n          if (settings.includePresenterNotes) {\n            titleSlide.addNotes(\n              `Quiz: ${quiz.title}\\nTotal Questions: ${\n                quiz.rounds.flatMap((r) => r.questions).length\n              }\\nEstimated Duration: ${quiz.estimatedDuration} minutes`\n            );\n          }\n        }\n\n        // Add question slides\n        quiz.rounds.forEach((round, roundIndex) => {\n          // Add round title slide\n          const roundSlide = pptx.addSlide();\n          roundSlide.addText(\n            `Round ${roundIndex + 1}${round.name ? `: ${round.name}` : \"\"}`,\n            {\n              x: 1,\n              y: 2,\n              w: 8,\n              h: 1.5,\n              fontSize: 32,\n              bold: true,\n              align: \"center\",\n            }\n          );\n\n          if (round.description) {\n            roundSlide.addText(round.description, {\n              x: 1,\n              y: 4,\n              w: 8,\n              h: 2,\n              fontSize: 18,\n              align: \"center\",\n            });\n          }\n\n          // Add questions for this round\n          round.questions.forEach((question, questionIndex) => {\n            const slide = pptx.addSlide();\n            const questionNumber = `Round ${roundIndex + 1}, Question ${\n              questionIndex + 1\n            }`;\n\n            // Question title\n            slide.addText(questionNumber, {\n              x: 0.5,\n              y: 0.5,\n              w: 9,\n              h: 0.8,\n              fontSize: 28,\n              bold: true,\n              color: \"1976D2\",\n            });\n\n            // Question text\n            slide.addText(question.question, {\n              x: 0.5,\n              y: 1.5,\n              w: 9,\n              h: 1.5,\n              fontSize: settings.questionFontSize,\n              bold: true,\n            });\n\n            // Handle different question types\n            if (question.type === \"single-answer\") {\n              slide.addText(\"Answer:\", {\n                x: 1,\n                y: 3.5,\n                w: 8,\n                h: 0.7,\n                fontSize: settings.optionFontSize,\n                italic: true,\n                color: \"666666\",\n              });\n\n              if (\n                settings.includePresenterNotes &&\n                question.correctAnswerText\n              ) {\n                slide.addNotes(\n                  `${questionNumber}\\nCorrect Answer: ${\n                    question.correctAnswerText\n                  }${\n                    question.explanation\n                      ? `\\nExplanation: ${question.explanation}`\n                      : \"\"\n                  }`\n                );\n              }\n            } else if (\n              question.type === \"multiple-choice\" &&\n              question.possibleAnswers\n            ) {\n              // Multiple choice questions\n              question.possibleAnswers.forEach((answer, answerIndex) => {\n                const optionLetter = String.fromCharCode(65 + answerIndex); // A, B, C, D...\n                const isCorrect = question.correctAnswers.includes(answerIndex);\n\n                slide.addText(`${optionLetter}. ${answer}`, {\n                  x: 1,\n                  y: 3.5 + answerIndex * 0.8,\n                  w: 8,\n                  h: 0.7,\n                  fontSize: settings.optionFontSize,\n                  bold: isCorrect,\n                  color: isCorrect ? \"4CAF50\" : \"000000\",\n                });\n              });\n\n              // Add presenter notes for multiple choice\n              if (settings.includePresenterNotes) {\n                const correctAnswers = question.correctAnswers\n                  .map(\n                    (index) =>\n                      `${String.fromCharCode(65 + index)}. ${\n                        question.possibleAnswers[index]\n                      }`\n                  )\n                  .join(\", \");\n\n                let notes = `${questionNumber}\\nCorrect Answer(s): ${correctAnswers}`;\n                if (question.explanation) {\n                  notes += `\\nExplanation: ${question.explanation}`;\n                }\n                slide.addNotes(notes);\n              }\n            }\n\n            // Add media if present\n            if (question.mediaFile) {\n              try {\n                if (question.mediaFile.type === \"image\") {\n                  slide.addImage({\n                    data: question.mediaFile.data,\n                    x: 6,\n                    y: 3,\n                    w: 3,\n                    h: 2.5,\n                    sizing: { type: \"contain\", w: 3, h: 2.5 },\n                  });\n                }\n                // Note: Audio/video handling would require additional PptxGenJS configuration\n              } catch (mediaError) {\n                console.warn(\n                  `Failed to add media for ${questionNumber}:`,\n                  mediaError\n                );\n              }\n            }\n          });\n        });\n\n        // Add answer key slide if requested\n        if (settings.includeAnswerKey) {\n          const answerSlide = pptx.addSlide();\n          answerSlide.addText(\"Answer Key\", {\n            x: 1,\n            y: 1,\n            w: 8,\n            h: 1,\n            fontSize: 32,\n            bold: true,\n            align: \"center\",\n          });\n\n          let answerText = \"\";\n          quiz.rounds.forEach((round, roundIndex) => {\n            answerText += `Round ${roundIndex + 1}:\\n`;\n            round.questions.forEach((question, questionIndex) => {\n              const questionNumber = `Q${questionIndex + 1}`;\n              if (question.type === \"single-answer\") {\n                answerText += `${questionNumber}: ${question.correctAnswerText}\\n`;\n              } else if (question.type === \"multiple-choice\") {\n                const correctAnswers = question.correctAnswers\n                  .map((index) => String.fromCharCode(65 + index))\n                  .join(\", \");\n                answerText += `${questionNumber}: ${correctAnswers}\\n`;\n              }\n            });\n            answerText += \"\\n\";\n          });\n\n          answerSlide.addText(answerText.trim(), {\n            x: 1,\n            y: 2,\n            w: 8,\n            h: 4,\n            fontSize: 16,\n            align: \"left\",\n          });\n        }\n\n        // Generate filename and save\n        const filename = `${quiz.title.replace(/[^a-z0-9]/gi, \"_\")}_Quiz.pptx`;\n        await pptx.writeFile({ fileName: filename });\n      } catch (err) {\n        const errorMessage =\n          err instanceof Error\n            ? err.message\n            : \"Failed to export quiz to PowerPoint\";\n        setExportError(errorMessage);\n        throw new Error(errorMessage);\n      } finally {\n        setIsExporting(false);\n      }\n    },\n    []\n  );\n\n  /**\n   * Exports quiz data to JSON format for backup/sharing\n   *\n   * @param quiz - Quiz to export\n   * @returns Promise resolving to downloaded JSON file\n   */\n  const exportToJSON = useCallback(async (quiz: Quiz): Promise<void> => {\n    setIsExporting(true);\n    setExportError(null);\n\n    try {\n      const jsonData = JSON.stringify(quiz, null, 2);\n      const blob = new Blob([jsonData], { type: \"application/json\" });\n      const url = URL.createObjectURL(blob);\n\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.download = `${quiz.title.replace(/[^a-z0-9]/gi, \"_\")}_Quiz.json`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n    } catch (err) {\n      const errorMessage =\n        err instanceof Error ? err.message : \"Failed to export quiz to JSON\";\n      setExportError(errorMessage);\n      throw new Error(errorMessage);\n    } finally {\n      setIsExporting(false);\n    }\n  }, []);\n\n  /**\n   * Clears any export errors\n   */\n  const clearExportError = useCallback(() => {\n    setExportError(null);\n  }, []);\n\n  return {\n    isExporting,\n    exportError,\n    exportToPowerPoint,\n    exportToJSON,\n    clearExportError,\n    DEFAULT_EXPORT_SETTINGS,\n  };\n};\n","/**\n * Quizzes Page State Management Hook with IndexedDB Storage\n *\n * Enhanced version of useQuizzesPageState that integrates IndexedDB storage\n * with auto-save functionality and storage usage monitoring.\n *\n * Features:\n * - IndexedDB storage with localStorage fallback\n * - Auto-save for draft quizzes\n * - Storage usage monitoring and warnings\n * - Enhanced error handling\n * - All original UI state management\n *\n * @fileoverview Enhanced state management hook with IndexedDB storage\n * @version 3.0.0\n * @since December 2025\n */\n\nimport React from \"react\";\nimport { useQuizStorage } from \"./useQuizStorage\";\nimport { useQuizExport } from \"../../exporting/hooks/useQuizExport\";\nimport { useSnackbar } from \"../../../../shared/hooks/useSnackbar\";\nimport { indexedDBService } from \"../services/indexedDBService\";\nimport type { Quiz } from \"../types\";\nimport type { AutoSaveStatus } from \"./useQuizStorage\";\n\n/**\n * Enhanced state interface for Quizzes page with storage\n */\nexport interface QuizzesPageStateWithStorage {\n  // Error handling\n  errorDismissed: boolean;\n\n  // Wizard state\n  isWizardOpen: boolean;\n  editingQuiz: Quiz | null;\n\n  // Menu state\n  menuAnchorEl: HTMLElement | null;\n  selectedQuiz: Quiz | null;\n\n  // Delete confirmation state\n  deleteConfirmOpen: boolean;\n  pendingDeleteQuiz: Quiz | null;\n\n  // Storage state\n  autoSaveStatus: AutoSaveStatus;\n  storageWarningDismissed: boolean;\n}\n\n/**\n * Enhanced action handlers interface for Quizzes page with storage\n */\nexport interface QuizzesPageActionsWithStorage {\n  // Error handling\n  dismissError: () => void;\n  dismissStorageWarning: () => void;\n\n  // Quiz creation and editing\n  handleCreateQuiz: () => void;\n  handleEditQuiz: (quiz: Quiz) => void;\n  handleQuizCreated: (quiz: Quiz) => void;\n  handleWizardCancel: () => void;\n\n  // Quiz actions\n  handleExportQuiz: (quiz: Quiz) => void;\n\n  // Menu actions\n  handleMenuOpen: (event: React.MouseEvent<HTMLElement>, quiz: Quiz) => void;\n  handleMenuClose: () => void;\n\n  // Delete actions\n  handleRequestDeleteQuiz: (quiz: Quiz) => void;\n  handleConfirmDeleteQuiz: () => void;\n  handleCancelDeleteQuiz: () => void;\n\n  // Storage actions\n  handleCleanupDrafts: () => void;\n  handleRefreshStorage: () => void;\n}\n\n/**\n * Return type for the useQuizzesPageStateWithStorage hook\n */\nexport interface UseQuizzesPageStateWithStorageReturn {\n  // Quiz management state and actions from storage\n  quizzes: Quiz[];\n  drafts: Partial<Quiz>[];\n  isLoading: boolean;\n  error: string | null;\n  storageUsage: any; // StorageUsage type from storage hook\n  isInitialized: boolean;\n\n  // UI state\n  state: QuizzesPageStateWithStorage;\n\n  // Action handlers\n  actions: QuizzesPageActionsWithStorage;\n}\n\n/**\n * Enhanced Quizzes Page State Hook with IndexedDB Storage\n *\n * Manages all state and event handlers for the Quizzes page with\n * enhanced storage capabilities using IndexedDB and auto-save.\n *\n * @returns Object containing enhanced state, actions, and storage functionality\n */\nexport const useQuizzesPageStateWithStorage =\n  (): UseQuizzesPageStateWithStorageReturn => {\n    // Storage hook for IndexedDB operations\n    const {\n      quizzes,\n      drafts,\n      isLoading,\n      storageUsage,\n      autoSaveStatus,\n      isInitialized,\n      saveQuiz,\n      deleteQuiz,\n      enableAutoSave,\n      disableAutoSave,\n      cleanupOldDrafts,\n      refreshStorageUsage,\n      loadQuizzes,\n      loadDrafts,\n    } = useQuizStorage();\n\n    // Export functionality\n    const { exportToPowerPoint } = useQuizExport();\n\n    const { showSnackbar } = useSnackbar();\n\n    // UI state management\n    const [errorDismissed, setErrorDismissed] = React.useState<boolean>(false);\n    const [isWizardOpen, setIsWizardOpen] = React.useState<boolean>(false);\n    const [editingQuiz, setEditingQuiz] = React.useState<Quiz | null>(null);\n    const [menuAnchorEl, setMenuAnchorEl] = React.useState<HTMLElement | null>(\n      null\n    );\n    const [selectedQuiz, setSelectedQuiz] = React.useState<Quiz | null>(null);\n    const [deleteConfirmOpen, setDeleteConfirmOpen] = React.useState(false);\n    const [pendingDeleteQuiz, setPendingDeleteQuiz] =\n      React.useState<Quiz | null>(null);\n\n    const [storageWarningDismissed, setStorageWarningDismissed] =\n      React.useState(false);\n\n    // Error state (can come from storage operations)\n    const [localError, setLocalError] = React.useState<string | null>(null);\n    const error = localError;\n\n    // Reset dismissed state when error changes\n    React.useEffect(() => {\n      if (error) {\n        setErrorDismissed(false);\n      }\n    }, [error]);\n\n    // Reset storage warning when storage usage changes\n    React.useEffect(() => {\n      if (storageUsage?.isNearLimit) {\n        setStorageWarningDismissed(false);\n      }\n    }, [storageUsage?.isNearLimit]);\n\n    /**\n     * Handles dismissing error messages\n     */\n    const dismissError = React.useCallback(() => {\n      setErrorDismissed(true);\n      setLocalError(null);\n    }, []);\n\n    /**\n     * Handles dismissing storage warning\n     */\n    const dismissStorageWarning = React.useCallback(() => {\n      setStorageWarningDismissed(true);\n    }, []);\n\n    /**\n     * Handles opening the quiz creation wizard\n     */\n    const handleCreateQuiz = React.useCallback(() => {\n      setEditingQuiz(null);\n      setIsWizardOpen(true);\n    }, []);\n\n    /**\n     * Handles editing an existing quiz\n     */\n    const handleEditQuiz = React.useCallback((quiz: Quiz) => {\n      setEditingQuiz(quiz);\n      setIsWizardOpen(true);\n      setMenuAnchorEl(null);\n    }, []);\n\n    /**\n     * Handles quiz creation completion with IndexedDB storage\n     */\n    const handleQuizCreated = React.useCallback(\n      async (quiz: Quiz) => {\n        try {\n          // Set status to completed before saving\n          const completedQuiz: Quiz = {\n            ...quiz,\n            status: \"completed\",\n            updatedAt: new Date(),\n          };\n\n          const success = await saveQuiz(completedQuiz);\n\n          if (success) {\n            if (editingQuiz) {\n              showSnackbar(\"Quiz updated successfully!\", \"success\");\n            } else {\n              showSnackbar(\"Quiz created successfully!\", \"success\");\n            }\n\n            setIsWizardOpen(false);\n            setEditingQuiz(null);\n\n            // Disable auto-save since quiz is now completed\n            disableAutoSave();\n\n            // Refresh storage usage\n            await refreshStorageUsage();\n          } else {\n            throw new Error(\"Failed to save quiz to storage\");\n          }\n        } catch (error) {\n          const message =\n            error instanceof Error ? error.message : \"Failed to save quiz\";\n          setLocalError(message);\n          showSnackbar(message, \"error\");\n        }\n      },\n      [\n        editingQuiz,\n        saveQuiz,\n        showSnackbar,\n        disableAutoSave,\n        refreshStorageUsage,\n      ]\n    );\n\n    /**\n     * Handles wizard cancellation\n     */\n    const handleWizardCancel = React.useCallback(() => {\n      setIsWizardOpen(false);\n      setEditingQuiz(null);\n      disableAutoSave();\n    }, [disableAutoSave]);\n\n    /**\n     * Handles PowerPoint export with enhanced error handling\n     */\n    const handleExportQuiz = React.useCallback(\n      async (quiz: Quiz) => {\n        try {\n          const defaultExportSettings = {\n            includePresenterNotes: true,\n            slideTemplate: \"standard\" as const,\n            questionFontSize: 20,\n            answerFontSize: 16,\n            includeAnswerSlides: true,\n            includeQuizSummary: true,\n          };\n\n          await exportToPowerPoint(quiz, defaultExportSettings);\n          showSnackbar(\"PowerPoint exported successfully!\", \"success\");\n          setMenuAnchorEl(null);\n        } catch (error) {\n          const message =\n            error instanceof Error ? error.message : \"Export failed\";\n          setLocalError(message);\n          showSnackbar(message, \"error\");\n        }\n      },\n      [exportToPowerPoint, showSnackbar]\n    );\n\n    /**\n     * Handles opening context menu for quiz actions\n     */\n    const handleMenuOpen = React.useCallback(\n      (event: React.MouseEvent<HTMLElement>, quiz: Quiz) => {\n        setMenuAnchorEl(event.currentTarget);\n        setSelectedQuiz(quiz);\n      },\n      []\n    );\n\n    /**\n     * Handles closing context menu\n     */\n    const handleMenuClose = React.useCallback(() => {\n      setMenuAnchorEl(null);\n      setSelectedQuiz(null);\n    }, []);\n\n    /**\n     * Handles requesting quiz deletion\n     */\n    const handleRequestDeleteQuiz = React.useCallback((quiz: Quiz) => {\n      setPendingDeleteQuiz(quiz);\n      setDeleteConfirmOpen(true);\n      setMenuAnchorEl(null);\n    }, []);\n\n    /**\n     * Handles confirming quiz deletion with enhanced sync\n     */\n    const handleConfirmDeleteQuiz = React.useCallback(async () => {\n      if (!pendingDeleteQuiz) return;\n\n      try {\n        const success = await deleteQuiz(pendingDeleteQuiz.id);\n\n        if (success) {\n          // Force reload all data to ensure synchronization\n          await Promise.all([\n            loadQuizzes(),\n            loadDrafts(),\n            refreshStorageUsage(),\n          ]);\n\n          showSnackbar(\"Quiz deleted successfully!\", \"success\");\n        }\n      } catch (error) {\n        console.error(\"Error deleting quiz:\", error);\n        setLocalError(\"Failed to delete quiz\");\n      } finally {\n        setDeleteConfirmOpen(false);\n        setPendingDeleteQuiz(null);\n      }\n    }, [\n      pendingDeleteQuiz,\n      deleteQuiz,\n      loadQuizzes,\n      loadDrafts,\n      refreshStorageUsage,\n      showSnackbar,\n    ]);\n\n    /**\n     * Handles cancelling quiz deletion\n     */\n    const handleCancelDeleteQuiz = React.useCallback(() => {\n      setDeleteConfirmOpen(false);\n      setPendingDeleteQuiz(null);\n    }, []);\n\n    /**\n     * Handles cleanup of all storage (now directly executes - confirmation handled by StorageModal)\n     */\n    const handleCleanupDrafts = React.useCallback(async () => {\n      try {\n        // Use clearAllStorage to remove everything instead of just old drafts\n        const result = await indexedDBService.clearAllStorage();\n\n        if (result.success) {\n          showSnackbar(\"All storage cleared successfully!\", \"success\");\n\n          // Refresh storage usage and reload quizzes\n          await refreshStorageUsage();\n          await loadQuizzes(); // This will reload the quiz list\n          await loadDrafts(); // This will reload the drafts list\n        } else {\n          throw new Error(result.error || \"Failed to clear storage\");\n        }\n      } catch (error) {\n        const message =\n          error instanceof Error ? error.message : \"Failed to clear storage\";\n        setLocalError(message);\n        showSnackbar(message, \"error\");\n      }\n    }, [showSnackbar, refreshStorageUsage, loadQuizzes, loadDrafts]);\n\n    /**\n     * Handles refreshing storage usage\n     */\n    const handleRefreshStorage = React.useCallback(async () => {\n      try {\n        await refreshStorageUsage();\n        showSnackbar(\"Storage information refreshed\", \"info\");\n      } catch (error) {\n        const message =\n          error instanceof Error ? error.message : \"Failed to refresh storage\";\n        setLocalError(message);\n        showSnackbar(message, \"error\");\n      }\n    }, [refreshStorageUsage, showSnackbar]);\n\n    // Auto-save draft when editing\n    React.useEffect(() => {\n      if (isWizardOpen && editingQuiz) {\n        const draftQuiz = {\n          ...editingQuiz,\n          status: \"draft\" as const,\n          lastSaved: new Date(),\n        };\n        enableAutoSave(draftQuiz);\n      }\n\n      return () => {\n        if (!isWizardOpen) {\n          disableAutoSave();\n        }\n      };\n    }, [isWizardOpen, editingQuiz, enableAutoSave, disableAutoSave]);\n\n    return {\n      // Storage state\n      quizzes,\n      drafts,\n      isLoading,\n      error,\n      storageUsage,\n      isInitialized,\n\n      // UI state\n      state: {\n        errorDismissed,\n        isWizardOpen,\n        editingQuiz,\n        menuAnchorEl,\n        selectedQuiz,\n        deleteConfirmOpen,\n        pendingDeleteQuiz,\n        autoSaveStatus,\n        storageWarningDismissed,\n      },\n\n      // Action handlers\n      actions: {\n        dismissError,\n        dismissStorageWarning,\n        handleCreateQuiz,\n        handleEditQuiz,\n        handleQuizCreated,\n        handleWizardCancel,\n        handleExportQuiz,\n        handleMenuOpen,\n        handleMenuClose,\n        handleRequestDeleteQuiz,\n        handleConfirmDeleteQuiz,\n        handleCancelDeleteQuiz,\n        handleCleanupDrafts,\n        handleRefreshStorage,\n      },\n    };\n  };\n","/**\n * Quizzes Main Page Component (REFACTORED + INDEXED DB)\n *\n * Primary interface for the Quizzes feature providing quiz creation, management,\n * and export functionality. Enhanced with IndexedDB storage, auto-save, and\n * storage monitoring capabilities.\n *\n * REFACTORING CHANGES:\n * - Extracted QuizCard component for individual quiz display\n * - Extracted QuizGrid component for layout and state management\n * - Extracted QuizActions component for interactions and modals\n * - Extracted useQuizzesPageState hook for state management\n * - Maintained 100% functionality and styling compatibility\n * - Improved maintainability and testability\n *\n * STORAGE ENHANCEMENTS:\n * - IndexedDB storage with localStorage fallback\n * - Auto-save functionality for drafts\n * - Storage usage monitoring and warnings\n * - 500MB storage capacity with media file support\n * - Draft management with cleanup\n *\n * Features:\n * - Quiz creation wizard integration\n * - Quiz library management and search\n * - PowerPoint export functionality\n * - Mobile-first responsive design\n * - Beautiful dashboard interface\n * - Quiz statistics and analytics\n * - Storage status monitoring\n *\n * @fileoverview Enhanced main page component with IndexedDB storage\n * @version 3.0.0 (IndexedDB Enhanced)\n * @since December 2025\n */\n\nimport React from \"react\";\nimport {\n  Box,\n  Typography,\n  Button,\n  Container,\n  Alert,\n  IconButton,\n} from \"@mui/material\";\nimport {\n  Add as AddIcon,\n  Close as CloseIcon,\n  Storage as StorageIcon,\n} from \"@mui/icons-material\";\nimport { QuizGrid, QuizActions } from \"../management/components\";\nimport { StorageModal } from \"../management/components/StorageStatus\";\nimport { useQuizzesPageStateWithStorage } from \"../management/hooks\";\nimport type { QuizzesPageProps } from \"../types\";\nimport type { Quiz, QuizCategory, QuizDifficulty, Round } from \"../types\";\nimport { ErrorBoundary } from \"../../../shared/components\";\n\n/**\n * Main Quizzes Page Component (ENHANCED WITH STORAGE)\n *\n * Provides comprehensive quiz management interface using extracted components\n * and hooks with IndexedDB storage capabilities. Now includes storage monitoring\n * and auto-save functionality.\n *\n * @param props - Component props\n * @returns JSX element representing the quizzes page\n */\nexport const Quizzes: React.FC<QuizzesPageProps> = () => {\n  // Use storage-enhanced state management hook\n  const { quizzes, drafts, isLoading, error, state, actions, storageUsage } =\n    useQuizzesPageStateWithStorage();\n\n  // Storage modal state\n  const [storageModalOpen, setStorageModalOpen] = React.useState(false);\n\n  // Force refresh mechanism to handle stale state\n  const [refreshKey, setRefreshKey] = React.useState(0);\n\n  // Force refresh function that can be called when data changes\n  const forceRefresh = React.useCallback(() => {\n    setRefreshKey((prev) => prev + 1);\n  }, []);\n\n  // Trigger refresh when critical operations complete\n  React.useEffect(() => {\n    forceRefresh();\n  }, [quizzes.length, drafts.length, forceRefresh]);\n\n  const getFullQuizObject = React.useCallback(\n    (quizId: string) => {\n      const allOriginalQuizzes: (Quiz | Partial<Quiz>)[] = [\n        ...quizzes,\n        ...drafts,\n      ];\n      return allOriginalQuizzes.find(\n        (q) => q && String(q.id) === String(quizId)\n      );\n    },\n    [quizzes, drafts]\n  );\n\n  const handleExportWrapper = React.useCallback(\n    (quiz: Quiz) => {\n      const fullQuiz = getFullQuizObject(quiz.id);\n      if (fullQuiz) {\n        actions.handleExportQuiz(fullQuiz as Quiz);\n      } else {\n        console.error(\n          `Could not find full quiz object with id: ${quiz.id} for export.`\n        );\n      }\n    },\n    [actions, getFullQuizObject]\n  );\n\n  const handleEditWrapper = React.useCallback(\n    (quiz: Quiz) => {\n      const fullQuiz = getFullQuizObject(quiz.id);\n      if (fullQuiz) {\n        actions.handleEditQuiz(fullQuiz as Quiz);\n      } else {\n        console.error(\n          `Could not find full quiz object with id: ${quiz.id} for edit.`\n        );\n      }\n    },\n    [actions, getFullQuizObject]\n  );\n\n  const handleMenuOpenWrapper = React.useCallback(\n    (event: React.MouseEvent<HTMLElement>, quiz: Quiz) => {\n      const fullQuiz = getFullQuizObject(quiz.id);\n      if (fullQuiz) {\n        actions.handleMenuOpen(event, fullQuiz as Quiz);\n      } else {\n        console.error(\n          `Could not find full quiz object with id: ${quiz.id} for menu.`\n        );\n      }\n    },\n    [actions, getFullQuizObject]\n  );\n\n  // Combine quizzes and drafts for display\n  const allQuizzes = React.useMemo(() => {\n    // Helper to validate category\n    const validCategories: QuizCategory[] = [\n      \"general\",\n      \"sports\",\n      \"history\",\n      \"science\",\n      \"geography\",\n      \"entertainment\",\n      \"literature\",\n      \"art\",\n      \"music\",\n      \"technology\",\n      \"custom\",\n    ];\n    const sanitizeCategory = (cat: unknown): QuizCategory => {\n      if (\n        typeof cat === \"string\" &&\n        validCategories.includes(cat as QuizCategory)\n      ) {\n        return cat as QuizCategory;\n      }\n      return \"general\";\n    };\n\n    // Helper to sanitize difficulty\n    const sanitizeDifficulty = (diff: unknown): QuizDifficulty => {\n      if (\n        typeof diff === \"string\" &&\n        [\"easy\", \"medium\", \"hard\"].includes(diff)\n      ) {\n        return diff as QuizDifficulty;\n      }\n      return \"medium\";\n    };\n\n    // Helper to sanitize estimated duration\n    const sanitizeDuration = (duration: unknown): number => {\n      if (typeof duration === \"number\" && !isNaN(duration)) {\n        return Math.max(1, Math.min(1000, duration)); // Clamp between 1-1000 minutes\n      }\n      if (\n        duration &&\n        typeof duration === \"object\" &&\n        \"valueOf\" in duration &&\n        typeof duration.valueOf === \"function\"\n      ) {\n        const value = duration.valueOf();\n        if (typeof value === \"number\" && !isNaN(value)) {\n          return Math.max(1, Math.min(1000, value));\n        }\n      }\n      return 10; // Default 10 minutes\n    };\n\n    // Helper to sanitize dates\n    const sanitizeDate = (date: unknown): Date => {\n      if (date instanceof Date) {\n        return date;\n      }\n      if (typeof date === \"string\" || typeof date === \"number\") {\n        const parsed = new Date(date);\n        if (!isNaN(parsed.getTime())) {\n          return parsed;\n        }\n      }\n      return new Date();\n    };\n\n    // Helper to sanitize settings\n    const sanitizeSettings = (settings: unknown) => {\n      const defaultSettings = {\n        defaultTimeLimit: 1,\n        defaultPoints: 1,\n        defaultBreakingTime: 5,\n      };\n\n      if (settings && typeof settings === \"object\") {\n        const settingsObj = settings as Record<string, unknown>;\n        return {\n          defaultTimeLimit:\n            typeof settingsObj.defaultTimeLimit === \"number\"\n              ? settingsObj.defaultTimeLimit\n              : defaultSettings.defaultTimeLimit,\n          defaultPoints:\n            typeof settingsObj.defaultPoints === \"number\"\n              ? settingsObj.defaultPoints\n              : defaultSettings.defaultPoints,\n          defaultBreakingTime:\n            typeof settingsObj.defaultBreakingTime === \"number\"\n              ? settingsObj.defaultBreakingTime\n              : defaultSettings.defaultBreakingTime,\n        };\n      }\n      return defaultSettings;\n    };\n\n    // Helper to sanitize rounds\n    const sanitizeRounds = (rounds: unknown): Round[] => {\n      if (Array.isArray(rounds)) {\n        return rounds.filter(\n          (round) => round && typeof round === \"object\"\n        ) as Round[];\n      }\n      return [];\n    };\n\n    // Helper to sanitize tags\n    const sanitizeTags = (tags: unknown): string[] => {\n      if (Array.isArray(tags)) {\n        return tags.filter((tag) => typeof tag === \"string\").slice(0, 10); // Limit to 10 tags\n      }\n      return [];\n    };\n\n    const defaultSettings = {\n      defaultTimeLimit: 1,\n      defaultPoints: 1,\n      defaultBreakingTime: 5,\n    };\n\n    // Convert drafts to Quiz format with isDraft flag\n    const draftQuizzes = drafts\n      .filter((draft) => draft && draft.id && draft.title)\n      .map((draft) => ({\n        ...draft,\n        id: String(draft.id || \"\"),\n        title: String(draft.title || \"Untitled Draft\"),\n        description: String(draft.description || \"Draft quiz in progress...\"),\n        rounds: sanitizeRounds(draft.rounds),\n        category: sanitizeCategory(draft.category),\n        difficulty: sanitizeDifficulty(draft.difficulty),\n        tags: sanitizeTags((draft as unknown as Record<string, unknown>).tags),\n        status: \"draft\" as const,\n        createdAt: sanitizeDate(draft.createdAt),\n        updatedAt: sanitizeDate(draft.updatedAt),\n        isDraft: true,\n        estimatedDuration: sanitizeDuration(draft.estimatedDuration),\n        settings: sanitizeSettings(draft.settings),\n      }));\n\n    // Combine and sort by most recently updated\n    return [...quizzes, ...draftQuizzes]\n      .map((q) => ({\n        ...q,\n        id: String(q.id || \"\"),\n        title: String(q.title || \"Untitled Quiz\"),\n        description: String(q.description || \"\"),\n        rounds: sanitizeRounds(q.rounds),\n        estimatedDuration: sanitizeDuration(q.estimatedDuration),\n        createdAt: sanitizeDate(q.createdAt),\n        updatedAt: sanitizeDate(q.updatedAt),\n        category: sanitizeCategory(q.category),\n        difficulty: sanitizeDifficulty(q.difficulty),\n        tags: sanitizeTags((q as unknown as Record<string, unknown>).tags),\n        settings: sanitizeSettings(q.settings),\n      }))\n      .sort(\n        (a, b) =>\n          new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime()\n      );\n  }, [quizzes, drafts, refreshKey]);\n\n  const totalQuizCount = allQuizzes.length;\n\n  return (\n    <ErrorBoundary\n      fallback={\n        <Alert severity=\"error\">\n          Something went wrong in the quiz list. Please refresh the page.\n        </Alert>\n      }\n    >\n      <Container maxWidth=\"xl\" sx={{ py: 3 }}>\n        {/* Header section */}\n        <Box mb={4}>\n          <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n            My Quizzes ({totalQuizCount})\n          </Typography>\n        </Box>\n\n        {/* Error display */}\n        {error && !state.errorDismissed && (\n          <Alert\n            severity=\"error\"\n            sx={{ mb: 3 }}\n            action={\n              <IconButton\n                size=\"small\"\n                onClick={actions.dismissError}\n                aria-label=\"Dismiss error\"\n              >\n                <CloseIcon fontSize=\"small\" />\n              </IconButton>\n            }\n          >\n            {error}\n          </Alert>\n        )}\n\n        {/* Storage warning */}\n        {storageUsage?.isNearLimit && !state.storageWarningDismissed && (\n          <Alert\n            severity=\"warning\"\n            sx={{ mb: 3 }}\n            action={\n              <IconButton\n                size=\"small\"\n                onClick={actions.dismissStorageWarning}\n                aria-label=\"Dismiss storage warning\"\n              >\n                <CloseIcon fontSize=\"small\" />\n              </IconButton>\n            }\n          >\n            Storage is nearly full (\n            {(() => {\n              const usage = storageUsage?.usagePercentage;\n              if (typeof usage === \"number\" && !isNaN(usage)) {\n                return Math.round(Math.max(0, Math.min(100, usage)));\n              }\n              return 0;\n            })()}\n            % used). Consider cleaning up old drafts or exporting quizzes to\n            free up space.\n          </Alert>\n        )}\n\n        {/* Action Buttons - only show when we have quizzes */}\n        {totalQuizCount > 0 && (\n          <Box\n            sx={{\n              mb: 4,\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\",\n            }}\n          >\n            <Button\n              variant=\"contained\"\n              startIcon={<AddIcon />}\n              onClick={actions.handleCreateQuiz}\n              sx={{\n                borderRadius: 2,\n                textTransform: \"none\",\n                fontWeight: 600,\n              }}\n            >\n              <Box\n                component=\"span\"\n                sx={{\n                  display: { xs: \"none\", sm: \"inline\" },\n                }}\n              >\n                Create New Quiz\n              </Box>\n              <Box\n                component=\"span\"\n                sx={{\n                  display: { xs: \"inline\", sm: \"none\" },\n                }}\n              >\n                Create\n              </Box>\n            </Button>\n            <Button\n              variant=\"outlined\"\n              startIcon={<StorageIcon />}\n              onClick={() => setStorageModalOpen(true)}\n              sx={{\n                borderRadius: 2,\n                textTransform: \"none\",\n                fontWeight: 600,\n              }}\n            >\n              Storage\n            </Button>\n          </Box>\n        )}\n\n        {/* Quizzes grid - now using extracted component */}\n        <ErrorBoundary>\n          <QuizGrid\n            quizzes={allQuizzes}\n            isLoading={isLoading}\n            onCreateQuiz={actions.handleCreateQuiz}\n            onMenuOpen={handleMenuOpenWrapper}\n            onExport={handleExportWrapper}\n            onEdit={handleEditWrapper}\n          />\n        </ErrorBoundary>\n\n        {/* Quiz actions - now using extracted component */}\n        <QuizActions\n          selectedQuiz={state.selectedQuiz}\n          menuAnchorEl={state.menuAnchorEl}\n          editingQuiz={state.editingQuiz}\n          isWizardOpen={state.isWizardOpen}\n          deleteConfirmOpen={state.deleteConfirmOpen}\n          pendingDeleteQuiz={state.pendingDeleteQuiz}\n          onMenuClose={actions.handleMenuClose}\n          onEditQuiz={actions.handleEditQuiz}\n          onExportQuiz={actions.handleExportQuiz}\n          onRequestDeleteQuiz={actions.handleRequestDeleteQuiz}\n          onConfirmDeleteQuiz={actions.handleConfirmDeleteQuiz}\n          onCancelDeleteQuiz={actions.handleCancelDeleteQuiz}\n          onCreateQuiz={actions.handleCreateQuiz}\n          onWizardCancel={actions.handleWizardCancel}\n          onQuizCreated={actions.handleQuizCreated}\n        />\n\n        {/* Storage Modal */}\n        <StorageModal\n          open={storageModalOpen}\n          onClose={() => setStorageModalOpen(false)}\n          storageUsage={storageUsage}\n          quizzes={allQuizzes}\n          draftsCount={drafts.length}\n          onCleanupStorage={actions.handleCleanupDrafts}\n          onRefreshStorage={actions.handleRefreshStorage}\n        />\n      </Container>\n    </ErrorBoundary>\n  );\n};\n\n// Add default export for React.lazy()\nexport default Quizzes;\n"],"file":"assets/Quizzes-XE2g3_Am.js"}