{"version":3,"file":"RandomTeamGeneratorPage-BySrmFw3.js","sources":["../../src/features/random-team-generator/types/index.ts","../../src/features/random-team-generator/utils/cheatCodes.ts","../../src/features/random-team-generator/hooks/useParticipants.ts","../../src/features/random-team-generator/utils/teamGenerator.ts","../../src/shared/hooks/useLocalStoragePersistence.ts","../../src/features/random-team-generator/hooks/useTeamGeneration.ts","../../src/features/random-team-generator/hooks/useKeyboardNavigation.ts","../../src/features/random-team-generator/components/ParticipantsList/ParticipantNumber.tsx","../../src/features/random-team-generator/components/ParticipantsList/ParticipantInput.tsx","../../src/features/random-team-generator/components/ParticipantsList/ParticipantsList.tsx","../../src/features/random-team-generator/components/TeamsModal/TeamCard.tsx","../../src/features/random-team-generator/components/TeamsModal/ModalActions.tsx","../../src/features/random-team-generator/components/TeamsModal/TeamsModal.tsx","../../src/features/random-team-generator/components/Dialogs/ClearConfirmDialog.tsx","../../src/features/random-team-generator/utils/clipboard.ts","../../src/features/random-team-generator/pages/RandomTeamGeneratorPage.tsx"],"sourcesContent":["/**\n * Type definitions for Random Team Generator feature\n * \n * This file contains all TypeScript interfaces and types used throughout\n * the Random Team Generator feature. Each type is documented with its\n * purpose and usage context.\n */\n\n/**\n * Represents a single participant input field in the UI\n * Used for managing individual name inputs before team generation\n */\nexport interface ParticipantInput {\n  /** Unique identifier for this input field */\n  id: number;\n  /** The name value entered by the user */\n  value: string;\n}\n\n/**\n * Represents a participant in the team generation algorithm\n * This is the format used by the TeamGenerator utility\n */\nexport interface Participant {\n  /** Unique identifier for this participant */\n  id: string;\n  /** The participant's name */\n  name: string;\n  /** The participant's number (for display purposes) */\n  number: number;\n}\n\n/**\n * Represents a generated team with its members\n * Used for displaying results in the modal and copying to clipboard\n */\nexport interface Team {\n  /** Unique identifier for this team */\n  id: string;\n  /** Display name of the team (e.g., \"Team 1\") */\n  name: string;\n  /** Array of team members */\n  members: TeamMember[];\n}\n\n/**\n * Represents a team member (simplified participant for display)\n * Used within Team interface for cleaner data structure\n */\nexport interface TeamMember {\n  /** Unique identifier for this member */\n  id: string;\n  /** The member's name */\n  name: string;\n}\n\n/**\n * Configuration object for team generation\n * Used to pass parameters to the TeamGenerator utility\n */\nexport interface TeamGenerationConfig {\n  /** Array of participants to distribute into teams */\n  participants: Participant[];\n  /** Number of teams to create */\n  teamCount: number;\n}\n\n/**\n * Snackbar configuration for user feedback\n * Used by the useSnackbar hook for consistent messaging\n */\nexport interface SnackbarConfig {\n  /** Whether the snackbar is currently visible */\n  open: boolean;\n  /** The message to display */\n  message: string;\n  /** The severity/type of message (success, error, warning, info) */\n  severity: 'success' | 'error' | 'warning' | 'info';\n}\n\n/**\n * Navigation direction for keyboard navigation between inputs\n * Used by keyboard navigation handlers\n */\nexport type NavigationDirection = 'up' | 'down' | 'enter';\n\n/**\n * Team generation state for managing async operations\n * Used to track loading states and prevent duplicate operations\n */\nexport interface GenerationState {\n  /** Whether teams are currently being generated */\n  isGenerating: boolean;\n  /** Whether teams are being refreshed (for animation) */\n  isRefreshing: boolean;\n}\n\n/**\n * Cheat code configuration\n * Used for the \"the followers\" easter egg functionality\n */\nexport interface CheatCodeConfig {\n  /** The trigger phrase to activate the cheat code */\n  trigger: string;\n  /** Array of friend names to populate */\n  names: string[];\n}\n\n/**\n * Constants used throughout the Random Team Generator\n */\nexport const CONSTANTS = {\n  /** Maximum number of participants allowed */\n  MAX_PARTICIPANTS: 50,\n  /** Minimum number of teams allowed */\n  MIN_TEAMS: 2,\n  /** Maximum number of teams allowed */\n  MAX_TEAMS: 10,\n  /** Minimum participants needed to generate teams */\n  MIN_PARTICIPANTS_FOR_TEAMS: 2,\n  /** Timeout for auto-removing empty inputs (ms) */\n  AUTO_REMOVE_TIMEOUT: 1000,\n} as const;\n\n/**\n * Friend names for the \"the followers\" cheat code\n * These are the real friend names from the original implementation\n */\nexport const FRIEND_NAMES = [\n  \"Simeon\",\n  \"Iliyana\", \n  \"George\",\n  \"Viki\",\n  \"Eli\",\n  \"Asen\",\n  \"Lubomir\",\n  \"Ralica\",\n  \"Venci\",\n  \"Slavi\",\n  \"Djoni\",\n  \"Apapa\",\n  \"Mitaka G\",\n  \"Antonio\",\n  \"Dinkata\",\n  \"Raiko\",\n  \"Tancheto\"\n] as const;\n\nexport interface ValidationResult {\n  isValid: boolean;\n  message?: string;\n}\n\nexport interface TeamGeneratorState {\n  participants: Participant[];\n  teams: Team[];\n  teamCount: number;\n  isGenerating: boolean;\n  showResults: boolean;\n}\n\nexport const TEAM_COLORS = [\n  'rgba(76, 175, 80, 0.1)', // Green\n  'rgba(33, 150, 243, 0.1)', // Blue  \n  'rgba(156, 39, 176, 0.1)', // Purple\n  'rgba(255, 152, 0, 0.1)', // Orange\n  'rgba(233, 30, 99, 0.1)', // Pink\n  'rgba(96, 125, 139, 0.1)', // Blue Grey\n  'rgba(121, 85, 72, 0.1)', // Brown\n  'rgba(158, 158, 158, 0.1)', // Grey\n] as const; ","/**\n * Cheat Code Utilities for Random Team Generator\n * \n * This file handles all cheat code functionality, specifically the \"the followers\"\n * easter egg that populates the participant list with real friend names.\n */\n\nimport { FRIEND_NAMES } from '../types';\nimport type { ParticipantInput } from '../types';\n\n/**\n * Checks if the provided input value is a cheat code trigger\n * Currently supports: \"the followers\" (case-insensitive)\n * \n * @param value - The input value to check\n * @returns True if the value is a cheat code trigger\n */\nexport const isCheatCode = (value: string): boolean => {\n  const normalizedValue = value.toLowerCase().trim();\n  return normalizedValue === 'the followers';\n};\n\n/**\n * Generates participant inputs from the friend names cheat code\n * Creates a list of ParticipantInput objects with friend names plus one empty input\n * \n * @param startingId - The ID to start numbering from\n * @returns Array of ParticipantInput objects with friend names and one empty input\n */\nexport const generateFriendsParticipants = (startingId: number = 1): ParticipantInput[] => {\n  // Create participant inputs for each friend\n  const friendParticipants: ParticipantInput[] = FRIEND_NAMES.map((name, index) => ({\n    id: startingId + index,\n    value: name\n  }));\n\n  // Add one empty input at the end for continued input\n  const emptyInput: ParticipantInput = {\n    id: startingId + FRIEND_NAMES.length,\n    value: ''\n  };\n\n  return [...friendParticipants, emptyInput];\n};\n\n/**\n * Gets the next available ID after processing a cheat code\n * Used to ensure unique IDs for subsequent participant additions\n * \n * @param startingId - The ID that was used as the starting point\n * @returns The next available ID for new participants\n */\nexport const getNextIdAfterCheatCode = (startingId: number = 1): number => {\n  return startingId + FRIEND_NAMES.length + 1;\n};\n\n/**\n * Gets information about available cheat codes for display or documentation\n * \n * @returns Object containing cheat code information\n */\nexport const getCheatCodeInfo = () => ({\n  trigger: 'the followers',\n  description: 'Populates the list with real friend names',\n  friendCount: FRIEND_NAMES.length,\n  friendNames: FRIEND_NAMES\n}); ","/**\n * useParticipants Hook\n * \n * Custom hook for managing participant state in the Random Team Generator.\n * Handles participant input management, cheat codes, localStorage persistence, and validation.\n * \n * FIXED (Dec 2025): Resolved localStorage persistence race condition issue:\n * - Removed auto-cleanup useEffect that was competing with auto-save\n * - Increased debounce to 1000ms for better stability\n * - Added localStorage verification for iOS compatibility\n * - Manual cleanup only occurs during explicit user actions\n * - Saves exact user state without aggressive filtering\n */\n\nimport { useState, useEffect, useRef, useCallback } from 'react';\nimport type { ParticipantInput } from '../types';\nimport { CONSTANTS } from '../types';\nimport { isCheatCode, generateFriendsParticipants, getNextIdAfterCheatCode } from '../utils/cheatCodes';\nimport { STORAGE_KEYS } from '../../../shared/utils/storageKeys';\n\n/**\n * LocalStorage key for saving participant data\n * FIXED: Now uses centralized storage key system to prevent migration conflicts\n */\nconst STORAGE_KEY = STORAGE_KEYS.RTG_PARTICIPANTS;\n\n/**\n * Interface for stored participant data\n */\ninterface StoredParticipantData {\n  participants: ParticipantInput[];\n  nextId: number;\n}\n\n/**\n * Loads participant data from localStorage\n * Returns default state if no data exists or data is corrupted\n * \n * FIXED: Improved validation and better handling of edge cases\n */\nconst loadParticipantsFromStorage = (): StoredParticipantData => {\n  try {\n    const stored = localStorage.getItem(STORAGE_KEY);\n    if (stored) {\n      const data: StoredParticipantData = JSON.parse(stored);\n      \n      // Validate the data structure\n      if (data.participants && Array.isArray(data.participants) && \n          typeof data.nextId === 'number') {\n        \n        // Handle case where all participants are empty (valid state)\n        if (data.participants.length === 0) {\n          return {\n            participants: [{ id: data.nextId, value: '' }],\n            nextId: data.nextId + 1\n          };\n        }\n        \n        // Ensure we have at least one empty input for user interaction\n        const hasEmptyInput = data.participants.some(p => p.value.trim() === '');\n        if (!hasEmptyInput) {\n          data.participants.push({ id: data.nextId, value: '' });\n          data.nextId += 1;\n        }\n        \n        return data;\n      }\n    }\n  } catch (error) {\n    console.warn('Error loading participants from localStorage:', error);\n  }\n  \n  // Return default state if loading fails\n  return {\n    participants: [{ id: 1, value: '' }],\n    nextId: 2\n  };\n};\n\n// REMOVED: saveParticipantsToStorage function - no longer needed\n// Auto-save now happens directly in useEffect with better error handling\n\n/**\n * Clears participant data from localStorage\n */\nconst clearParticipantsFromStorage = (): void => {\n  try {\n    localStorage.removeItem(STORAGE_KEY);\n  } catch (error) {\n    console.warn('Error clearing participants from localStorage:', error);\n  }\n};\n\n/**\n * Hook return type defining all participant-related state and functions\n */\ninterface UseParticipantsReturn {\n  /** Array of current participant inputs */\n  participants: ParticipantInput[];\n  /** Next available ID for new participants */\n  nextId: number;\n  /** Map of input element references for focus management */\n  inputRefs: React.MutableRefObject<Map<number, HTMLInputElement>>;\n  /** Handle input value changes */\n  handleInputChange: (id: number, value: string) => { isCheatCode: boolean };\n  /** Handle participant removal */\n  removeParticipant: (id: number) => void;\n  /** Get array of participant names (non-empty values) */\n  getParticipantNames: () => string[];\n  /** Get count of filled participants for numbering */\n  getFilledParticipantCount: () => number;\n  /** Clear all participants */\n  clearAllParticipants: () => void;\n}\n\n/**\n * Custom hook for managing participant state and operations\n * \n * @returns Object containing participant state and management functions\n */\nexport const useParticipants = (): UseParticipantsReturn => {\n  // Load initial state from localStorage\n  const initialData = loadParticipantsFromStorage();\n  \n  // State management\n  const [participants, setParticipants] = useState<ParticipantInput[]>(initialData.participants);\n  const [nextId, setNextId] = useState(initialData.nextId);\n  \n  // Ref for managing input focus\n  const inputRefs = useRef<Map<number, HTMLInputElement>>(new Map());\n\n  /**\n   * Handles input value changes with cheat code detection\n   * Manages auto-creation of new inputs and cheat code processing\n   */\n  const handleInputChange = useCallback((id: number, value: string): { isCheatCode: boolean } => {\n    // Check for cheat code FIRST before updating state\n    if (isCheatCode(value)) {\n      const friendParticipants = generateFriendsParticipants(1);\n      setParticipants(friendParticipants);\n      setNextId(getNextIdAfterCheatCode(1));\n      return { isCheatCode: true };\n    }\n    \n    // Update participant value\n    setParticipants(prev => prev.map(p => p.id === id ? { ...p, value } : p));\n    \n    // Auto-create new input if typing in the last field and it's not empty\n    const isLastInput = participants[participants.length - 1]?.id === id;\n    if (isLastInput && value.trim() && participants.length < CONSTANTS.MAX_PARTICIPANTS) {\n      setParticipants(prev => [...prev, { id: nextId, value: '' }]);\n      setNextId(prev => prev + 1);\n    }\n\n    return { isCheatCode: false };\n  }, [participants, nextId]);\n\n  /**\n   * Removes a participant by ID\n   * Ensures at least one input always remains\n   * \n   * FIXED: Added manual cleanup logic for better UX after explicit removal\n   */\n  const removeParticipant = useCallback((id: number) => {\n    if (participants.length > 1) {\n      setParticipants(prev => {\n        const filtered = prev.filter(p => p.id !== id);\n        \n        // Manual cleanup: ensure we have exactly one empty input at the end\n        const nonEmpty = filtered.filter(p => p.value.trim() !== '');\n        const hasEmpty = filtered.some(p => p.value.trim() === '');\n        \n        if (hasEmpty) {\n          // Keep existing structure if there's already an empty input\n          return filtered;\n        } else {\n          // Add one empty input if none exists\n          return [...nonEmpty, { id: nextId, value: '' }];\n        }\n      });\n      \n      // Update nextId if we added a new empty input\n      const hasEmptyAfterRemoval = participants.filter(p => p.id !== id).some(p => p.value.trim() === '');\n      if (!hasEmptyAfterRemoval) {\n        setNextId(prev => prev + 1);\n      }\n    }\n  }, [participants, nextId]);\n\n  /**\n   * Gets array of non-empty participant names\n   * Used for team generation and validation\n   */\n  const getParticipantNames = useCallback((): string[] => {\n    return participants\n      .map(p => p.value.trim())\n      .filter(name => name !== '');\n  }, [participants]);\n\n  /**\n   * Gets count of participants with content for numbering display\n   */\n  const getFilledParticipantCount = useCallback((): number => {\n    return participants.filter(p => p.value.trim() !== '').length;\n  }, [participants]);\n\n  /**\n   * Clears all participants and resets to initial state\n   * Also clears localStorage data\n   */\n  const clearAllParticipants = useCallback(() => {\n    setParticipants([{ id: 1, value: '' }]);\n    setNextId(2);\n    clearParticipantsFromStorage();\n  }, []);\n\n  /**\n   * Effect to save participant data to localStorage whenever state changes\n   * \n   * FIXED: Removed race condition with auto-cleanup effect.\n   * Now uses longer debounce (1000ms) and saves exact user state without aggressive filtering.\n   * Only manual cleanup occurs during explicit user actions (remove button, clear all).\n   */\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      try {\n        const dataToSave: StoredParticipantData = {\n          participants,\n          nextId\n        };\n        \n        localStorage.setItem(STORAGE_KEY, JSON.stringify(dataToSave));\n        \n        // Verify save was successful (iOS safety check)\n        const verification = localStorage.getItem(STORAGE_KEY);\n        if (!verification) {\n          console.warn('localStorage save verification failed - data may not persist on iOS');\n        }\n      } catch (error) {\n        console.warn('Error saving participants to localStorage:', error);\n        // App continues working even if localStorage fails\n      }\n    }, 1000); // Increased debounce to 1000ms for better stability\n    \n    return () => clearTimeout(timer);\n  }, [participants, nextId]);\n\n  return {\n    participants,\n    nextId,\n    inputRefs,\n    handleInputChange,\n    removeParticipant,\n    getParticipantNames,\n    getFilledParticipantCount,\n    clearAllParticipants\n  };\n}; ","import { type Participant, type Team, type TeamMember } from '../types';\n\n/**\n * Utility class for generating random teams\n */\nexport class TeamGenerator {\n  /**\n   * Generate random teams from a list of participants\n   */\n  static generateTeams(participants: Participant[], teamCount: number): Team[] {\n    // Create a copy of participants array to shuffle\n    const shuffledParticipants = [...participants].sort(() => Math.random() - 0.5);\n\n    // Calculate minimum team size\n    const minTeamSize = Math.floor(shuffledParticipants.length / teamCount);\n    const extraMembers = shuffledParticipants.length % teamCount;\n\n    // Create teams array\n    const teams: Team[] = [];\n    let participantIndex = 0;\n\n    for (let i = 0; i < teamCount; i++) {\n      const teamSize = i < extraMembers ? minTeamSize + 1 : minTeamSize;\n      const teamParticipants = shuffledParticipants.slice(participantIndex, participantIndex + teamSize);\n      \n      // Convert participants to team members\n      const teamMembers: TeamMember[] = teamParticipants.map(participant => ({\n        id: participant.id,\n        name: participant.name\n      }));\n      \n      teams.push({\n        id: `team-${i + 1}`,\n        name: `Team ${i + 1}`,\n        members: teamMembers\n      });\n      \n      participantIndex += teamSize;\n    }\n\n    return teams;\n  }\n\n  /**\n   * Format teams for copying to clipboard\n   */\n  static formatTeamsForClipboard(teams: Team[]): string {\n    return teams\n      .map((team) => {\n        const teamHeader = `⭐ ${team.name} ⭐`;\n        const members = team.members.map((member) => `- ${member.name}`).join('\\n');\n        return `${teamHeader}\\n${members}`;\n      })\n      .join('\\n\\n');\n  }\n\n  /**\n   * Shuffle an existing set of teams (for refresh functionality)\n   */\n  static shuffleTeams(teams: Team[]): Team[] {\n    // Get all participants from all teams and convert back to Participant format\n    const allParticipants: Participant[] = teams.flatMap(team => \n      team.members.map((member, index) => ({\n        id: member.id,\n        name: member.name,\n        number: index + 1 // Add required number property\n      }))\n    );\n    \n    // Generate new teams with the same team count\n    return this.generateTeams(allParticipants, teams.length);\n  }\n} ","/**\n * useLocalStoragePersistence Hook\n * \n * Standard hook for managing localStorage state with automatic persistence.\n * Provides debounced auto-save functionality, error handling, and iOS safety checks.\n * \n * This hook is the foundation for all data persistence in Quizzard following\n * the development standards for consistent localStorage management across features.\n * \n * Features:\n * - Automatic debounced saving (default 500ms)\n * - iOS localStorage quota handling\n * - Error boundary with graceful degradation\n * - Type-safe operations with generics\n * - Validation for data integrity\n * \n * @fileoverview Standardized localStorage persistence hook\n * @version 1.0.0\n * @since December 2025\n */\n\nimport { useState, useEffect, useMemo, useCallback } from 'react';\n\n/**\n * Configuration options for the localStorage persistence hook\n */\ninterface UseLocalStoragePersistenceOptions {\n  /** Debounce delay in milliseconds for auto-save operations */\n  debounceMs?: number;\n  /** Whether to validate data before saving */\n  validate?: boolean;\n  /** Custom validation function for the stored data */\n  validator?: (value: any) => boolean;\n  /** Whether to enable iOS-specific safety checks */\n  iosCompatMode?: boolean;\n}\n\n/**\n * Return type for the useLocalStoragePersistence hook\n */\ninterface UseLocalStoragePersistenceReturn<T> {\n  /** Current value of the stored data */\n  value: T;\n  /** Function to update the stored value */\n  setValue: (newValue: T | ((prevValue: T) => T)) => void;\n  /** Whether the data is currently being saved */\n  isSaving: boolean;\n  /** Last error that occurred during save operation */\n  lastError: Error | null;\n  /** Function to manually trigger a save operation */\n  forceSave: () => void;\n  /** Function to clear the stored data */\n  clearValue: () => void;\n}\n\n/**\n * Custom debounce implementation for localStorage operations\n * Prevents excessive writes during rapid state changes\n * \n * @param func - Function to debounce\n * @param delay - Delay in milliseconds\n * @returns Debounced function\n */\nconst debounce = <T extends (...args: any[]) => void>(\n  func: T,\n  delay: number\n): ((...args: Parameters<T>) => void) => {\n  let timeoutId: number;\n  \n  return (...args: Parameters<T>) => {\n    clearTimeout(timeoutId);\n    timeoutId = window.setTimeout(() => func(...args), delay);\n  };\n};\n\n/**\n * Validates if data can be safely JSON stringified and parsed\n * Prevents circular references and invalid data from being stored\n * \n * @param value - Value to validate\n * @returns boolean indicating if value is safe to store\n */\nconst isValidForStorage = (value: any): boolean => {\n  try {\n    JSON.stringify(value);\n    return true;\n  } catch (error) {\n    console.warn('Invalid data for localStorage storage:', error);\n    return false;\n  }\n};\n\n/**\n * Custom hook for localStorage persistence with auto-save\n * \n * Manages state synchronization with localStorage, providing automatic\n * persistence with debouncing, error handling, and iOS compatibility.\n * \n * @template T - Type of data being stored\n * @param key - localStorage key to use for storage\n * @param defaultValue - Default value if no stored data exists\n * @param options - Configuration options for the hook\n * @returns Object containing value, setter, and utility functions\n * \n * @example\n * ```typescript\n * const [participants, setParticipants] = useLocalStoragePersistence(\n *   STORAGE_KEYS.RTG_PARTICIPANTS,\n *   [],\n *   { debounceMs: 500, iosCompatMode: true }\n * );\n * ```\n */\nexport const useLocalStoragePersistence = <T>(\n  key: string,\n  defaultValue: T,\n  options: UseLocalStoragePersistenceOptions = {}\n): UseLocalStoragePersistenceReturn<T> => {\n  const {\n    debounceMs = 500,\n    validate = true,\n    validator,\n    iosCompatMode = true\n  } = options;\n\n  // State management\n  const [value, setValueState] = useState<T>(() => {\n    try {\n      const stored = localStorage.getItem(key);\n      if (stored) {\n        const parsed = JSON.parse(stored);\n        \n        // Run custom validation if provided\n        if (validator && !validator(parsed)) {\n          console.warn(`Stored data for key \"${key}\" failed validation, using default`);\n          return defaultValue;\n        }\n        \n        return parsed;\n      }\n    } catch (error) {\n      console.warn(`Error loading data for key \"${key}\":`, error);\n    }\n    \n    return defaultValue;\n  });\n\n  const [isSaving, setIsSaving] = useState(false);\n  const [lastError, setLastError] = useState<Error | null>(null);\n\n  /**\n   * Saves data to localStorage with error handling and iOS compatibility\n   * \n   * @param dataToSave - Data to save to localStorage\n   */\n  const saveToStorage = useCallback((dataToSave: T): void => {\n    if (!key) {\n      console.warn('No storage key provided, skipping save');\n      return;\n    }\n\n    setIsSaving(true);\n    setLastError(null);\n\n    try {\n      // Validate data before saving if enabled\n      if (validate && !isValidForStorage(dataToSave)) {\n        throw new Error('Data is not valid for storage');\n      }\n\n      // Run custom validation if provided\n      if (validator && !validator(dataToSave)) {\n        throw new Error('Data failed custom validation');\n      }\n\n      const serialized = JSON.stringify(dataToSave);\n      localStorage.setItem(key, serialized);\n\n      // iOS safety check - verify data was actually saved\n      if (iosCompatMode) {\n        const verification = localStorage.getItem(key);\n        if (!verification || verification !== serialized) {\n          throw new Error('iOS storage quota exceeded or blocked');\n        }\n      }\n\n      console.debug(`Successfully saved data to localStorage key: ${key}`);\n      \n    } catch (error) {\n      const errorMsg = error instanceof Error ? error : new Error('Unknown storage error');\n      setLastError(errorMsg);\n      \n      // iOS-specific error messaging\n      if (iosCompatMode && errorMsg.message.includes('quota')) {\n        console.warn(\n          'Unable to save data. iPhone/iPad storage may be full.',\n          'Consider clearing app data or freeing device storage.'\n        );\n      } else {\n        console.warn(`localStorage save failed for key \"${key}\":`, errorMsg);\n      }\n    } finally {\n      setIsSaving(false);\n    }\n  }, [key, validate, validator, iosCompatMode]);\n\n  /**\n   * Debounced save function to prevent excessive localStorage writes\n   * Only saves after user stops making changes for the specified delay\n   */\n  const debouncedSave = useMemo(\n    () => debounce(saveToStorage, debounceMs),\n    [saveToStorage, debounceMs]\n  );\n\n  /**\n   * Updates the value and triggers auto-save\n   * Supports both direct values and updater functions\n   * \n   * @param newValue - New value or function to update the value\n   */\n  const setValue = useCallback((newValue: T | ((prevValue: T) => T)): void => {\n    setValueState(prevValue => {\n      const updatedValue = typeof newValue === 'function' \n        ? (newValue as (prevValue: T) => T)(prevValue)\n        : newValue;\n      \n      // Trigger debounced save with new value\n      debouncedSave(updatedValue);\n      \n      return updatedValue;\n    });\n  }, [debouncedSave]);\n\n  /**\n   * Forces an immediate save without debouncing\n   * Useful for critical operations or manual save triggers\n   */\n  const forceSave = useCallback((): void => {\n    saveToStorage(value);\n  }, [saveToStorage, value]);\n\n  /**\n   * Clears the stored value and removes it from localStorage\n   * Resets to the default value\n   */\n  const clearValue = useCallback((): void => {\n    try {\n      localStorage.removeItem(key);\n      setValueState(defaultValue);\n      setLastError(null);\n      console.debug(`Cleared localStorage key: ${key}`);\n    } catch (error) {\n      const errorMsg = error instanceof Error ? error : new Error('Failed to clear storage');\n      setLastError(errorMsg);\n      console.warn(`Failed to clear localStorage key \"${key}\":`, errorMsg);\n    }\n  }, [key, defaultValue]);\n\n  /**\n   * Auto-save effect\n   * Saves the current value whenever it changes (with debouncing)\n   */\n  useEffect(() => {\n    debouncedSave(value);\n  }, [value, debouncedSave]);\n\n  return {\n    value,\n    setValue,\n    isSaving,\n    lastError,\n    forceSave,\n    clearValue\n  };\n}; ","/**\n * useTeamGeneration Hook\n *\n * Custom hook for managing team generation state and operations.\n * Handles team creation, state management, and validation.\n */\n\nimport { useState, useCallback, useMemo } from \"react\";\nimport type { Team, TeamMember, Participant, GenerationState } from \"../types\";\nimport { CONSTANTS } from \"../types\";\nimport { TeamGenerator } from \"../utils/teamGenerator\";\nimport { useLocalStoragePersistence } from \"../../../shared/hooks/useLocalStoragePersistence\";\nimport { STORAGE_KEYS } from \"../../../shared/utils/storageKeys\";\n\n/**\n * Hook return type defining all team generation related state and functions\n */\ninterface UseTeamGenerationReturn {\n  /** Array of generated teams */\n  teams: Team[];\n  /** Current team count setting */\n  teamCount: number;\n  /** Generation state (loading, refreshing) */\n  generationState: GenerationState;\n  /** Whether teams modal is open */\n  teamsModalOpen: boolean;\n  /** Set team count */\n  setTeamCount: (count: number) => void;\n  /** Reset team count to minimum value */\n  resetTeamCount: () => void;\n  /** Generate teams from participant names */\n  generateTeams: (participantNames: string[]) => Team[];\n  /** Refresh existing teams with same participants */\n  refreshTeams: () => void;\n  /** Clear all generated teams */\n  clearTeams: () => void;\n  /** Open teams modal */\n  openTeamsModal: () => void;\n  /** Close teams modal */\n  closeTeamsModal: () => void;\n  /** Get team distribution message */\n  getTeamDistributionMessage: (participantCount: number) => string;\n  /** Validate if teams can be generated */\n  canGenerateTeams: (participantCount: number) => {\n    canGenerate: boolean;\n    message?: string;\n  };\n}\n\n/**\n * Custom hook for managing team generation operations\n *\n * @returns Object containing team generation state and management functions\n */\nexport const useTeamGeneration = (): UseTeamGenerationReturn => {\n  // State management with localStorage persistence for team count\n  const [teams, setTeams] = useState<Team[]>([]);\n  const { value: teamCount, setValue: setTeamCountValue } =\n    useLocalStoragePersistence<number>(\n      STORAGE_KEYS.RTG_TEAM_COUNT,\n      CONSTANTS.MIN_TEAMS,\n      { debounceMs: 500, iosCompatMode: true }\n    );\n  const [generationState, setGenerationState] = useState<GenerationState>({\n    isGenerating: false,\n    isRefreshing: false,\n  });\n  const [teamsModalOpen, setTeamsModalOpen] = useState(false);\n  const [lastParticipantNames, setLastParticipantNames] = useState<string[]>(\n    []\n  );\n\n  /**\n   * Converts participant names to the format expected by TeamGenerator\n   */\n  const convertNamesToParticipants = useCallback(\n    (names: string[]): Participant[] => {\n      return names.map((name, index) => ({\n        id: `participant-${index}`,\n        name,\n        number: index + 1,\n      }));\n    },\n    []\n  );\n\n  /**\n   * Converts TeamGenerator output to our Team format\n   */\n  const convertToTeamFormat = useCallback((generatedTeams: any[]): Team[] => {\n    return generatedTeams.map((team, index) => ({\n      id: `team-${index}`,\n      name: `Team ${index + 1}`,\n      members: team.members.map(\n        (member: any): TeamMember => ({\n          id: member.id,\n          name: member.name,\n        })\n      ),\n    }));\n  }, []);\n\n  /**\n   * Core team generation logic\n   */\n  const performTeamGeneration = useCallback(\n    (participantNames: string[]): Team[] => {\n      try {\n        // Convert names to participants format for TeamGenerator\n        const participantsForGenerator =\n          convertNamesToParticipants(participantNames);\n\n        // Use TeamGenerator utility\n        const generatedTeams = TeamGenerator.generateTeams(\n          participantsForGenerator,\n          teamCount\n        );\n\n        // Convert to our Team format\n        const formattedTeams = convertToTeamFormat(generatedTeams);\n\n        return formattedTeams;\n      } catch (error) {\n        console.error(\"Error generating teams:\", error);\n        throw new Error(\"Failed to generate teams. Please try again.\");\n      }\n    },\n    [teamCount, convertNamesToParticipants, convertToTeamFormat]\n  );\n\n  /**\n   * Generates teams from participant names with state management\n   */\n  const generateTeams = useCallback(\n    (participantNames: string[]): Team[] => {\n      setGenerationState((prev) => ({ ...prev, isGenerating: true }));\n\n      try {\n        const generatedTeams = performTeamGeneration(participantNames);\n        setTeams(generatedTeams);\n        setLastParticipantNames(participantNames);\n        setGenerationState((prev) => ({ ...prev, isGenerating: false }));\n        return generatedTeams;\n      } catch (error) {\n        setGenerationState((prev) => ({ ...prev, isGenerating: false }));\n        throw error;\n      }\n    },\n    [performTeamGeneration]\n  );\n\n  /**\n   * Refreshes teams using the last participant names with animation\n   */\n  const refreshTeams = useCallback(() => {\n    if (lastParticipantNames.length === 0) return;\n\n    setGenerationState((prev) => ({ ...prev, isRefreshing: true }));\n\n    // Add delay for animation effect\n    setTimeout(() => {\n      try {\n        const generatedTeams = performTeamGeneration(lastParticipantNames);\n        setTeams(generatedTeams);\n        setGenerationState((prev) => ({ ...prev, isRefreshing: false }));\n      } catch (error) {\n        setGenerationState((prev) => ({ ...prev, isRefreshing: false }));\n        throw error;\n      }\n    }, 300);\n  }, [lastParticipantNames, performTeamGeneration]);\n\n  /**\n   * Clears all generated teams\n   */\n  const clearTeams = useCallback(() => {\n    setTeams([]);\n    setLastParticipantNames([]);\n  }, []);\n\n  /**\n   * Opens the teams modal\n   */\n  const openTeamsModal = useCallback(() => {\n    setTeamsModalOpen(true);\n  }, []);\n\n  /**\n   * Closes the teams modal\n   */\n  const closeTeamsModal = useCallback(() => {\n    setTeamsModalOpen(false);\n  }, []);\n\n  /**\n   * Validates team count constraints\n   */\n  const setTeamCountSafe = useCallback(\n    (count: number) => {\n      const safeCount = Math.max(\n        CONSTANTS.MIN_TEAMS,\n        Math.min(CONSTANTS.MAX_TEAMS, count)\n      );\n      setTeamCountValue(safeCount);\n    },\n    [setTeamCountValue]\n  );\n\n  /**\n   * Gets team distribution message for UI display\n   */\n  const getTeamDistributionMessage = useCallback(\n    (participantCount: number): string => {\n      if (participantCount === 0) return \"\";\n\n      const membersPerTeam = Math.floor(participantCount / teamCount);\n      const extraMembers = participantCount % teamCount;\n\n      if (extraMembers === 0) {\n        return `Your ${teamCount} teams will have ${membersPerTeam} members each.`;\n      } else {\n        return `Your ${teamCount} teams will have ${membersPerTeam}-${\n          membersPerTeam + 1\n        } members each.`;\n      }\n    },\n    [teamCount]\n  );\n\n  /**\n   * Memoized team distribution message for current participant count\n   * This prevents unnecessary recalculations when the same participant count is used\n   */\n  const memoizedTeamDistributionMessage = useMemo(() => {\n    // This will be used by components that need the distribution message\n    // without having to pass participant count every time\n    return (participantCount: number) =>\n      getTeamDistributionMessage(participantCount);\n  }, [getTeamDistributionMessage]);\n\n  /**\n   * Validates if teams can be generated with current settings\n   */\n  const canGenerateTeams = useCallback(\n    (\n      participantCount: number\n    ): {\n      canGenerate: boolean;\n      message?: string;\n    } => {\n      if (participantCount < CONSTANTS.MIN_PARTICIPANTS_FOR_TEAMS) {\n        return {\n          canGenerate: false,\n          message: `You need at least ${CONSTANTS.MIN_PARTICIPANTS_FOR_TEAMS} participants to generate teams.`,\n        };\n      }\n\n      if (participantCount < teamCount) {\n        return {\n          canGenerate: false,\n          message: `You need at least ${teamCount} participants to create ${teamCount} teams.`,\n        };\n      }\n\n      return { canGenerate: true };\n    },\n    [teamCount]\n  );\n\n  /**\n   * Resets team count to minimum value\n   */\n  const resetTeamCount = useCallback(() => {\n    setTeamCountSafe(CONSTANTS.MIN_TEAMS);\n  }, [setTeamCountSafe]);\n\n  return {\n    teams,\n    teamCount,\n    generationState,\n    teamsModalOpen,\n    setTeamCount: setTeamCountSafe,\n    resetTeamCount,\n    generateTeams,\n    refreshTeams,\n    clearTeams,\n    openTeamsModal,\n    closeTeamsModal,\n    getTeamDistributionMessage,\n    canGenerateTeams,\n  };\n};\n","/**\n * useKeyboardNavigation Hook\n * \n * Custom hook for managing keyboard navigation between participant inputs.\n * Handles Enter, Arrow Up, and Arrow Down key navigation with focus management.\n */\n\nimport { useCallback } from 'react';\nimport type { ParticipantInput } from '../types';\nimport { CONSTANTS } from '../types';\n\n/**\n * Hook return type defining keyboard navigation functions\n */\ninterface UseKeyboardNavigationReturn {\n  /** Handle keyboard events for navigation */\n  handleKeyDown: (id: number, e: React.KeyboardEvent) => void;\n}\n\n/**\n * Props for the useKeyboardNavigation hook\n */\ninterface UseKeyboardNavigationProps {\n  /** Array of current participants */\n  participants: ParticipantInput[];\n  /** Next available ID for new participants */\n  nextId: number;\n  /** Map of input element references */\n  inputRefs: React.MutableRefObject<Map<number, HTMLInputElement>>;\n  /** Function to add new participant */\n  onAddParticipant: () => void;\n}\n\n/**\n * Custom hook for managing keyboard navigation between input fields\n * \n * @param props - Configuration object with participants and refs\n * @returns Object containing keyboard navigation handlers\n */\nexport const useKeyboardNavigation = ({\n  participants,\n  nextId,\n  inputRefs,\n  onAddParticipant\n}: UseKeyboardNavigationProps): UseKeyboardNavigationReturn => {\n\n  /**\n   * Focuses an input element by participant ID\n   */\n  const focusInput = useCallback((id: number) => {\n    const input = inputRefs.current.get(id);\n    input?.focus();\n  }, [inputRefs]);\n\n  /**\n   * Handles Enter key navigation\n   * Moves to next input or creates new one if at the end\n   */\n  const handleEnterKey = useCallback((currentId: number) => {\n    const currentIndex = participants.findIndex(p => p.id === currentId);\n    \n    if (currentIndex < participants.length - 1) {\n      // Move to next existing input\n      const nextParticipant = participants[currentIndex + 1];\n      focusInput(nextParticipant.id);\n    } else if (participants.length < CONSTANTS.MAX_PARTICIPANTS) {\n      // Create new input and focus it\n      onAddParticipant();\n      \n      // Focus the new input after it's created\n      setTimeout(() => {\n        focusInput(nextId);\n      }, 10);\n    }\n  }, [participants, nextId, focusInput, onAddParticipant]);\n\n  /**\n   * Handles Arrow Up key navigation\n   * Moves to previous input if available\n   */\n  const handleArrowUp = useCallback((currentId: number) => {\n    const currentIndex = participants.findIndex(p => p.id === currentId);\n    \n    if (currentIndex > 0) {\n      const prevParticipant = participants[currentIndex - 1];\n      focusInput(prevParticipant.id);\n    }\n  }, [participants, focusInput]);\n\n  /**\n   * Handles Arrow Down key navigation\n   * Moves to next input if available\n   */\n  const handleArrowDown = useCallback((currentId: number) => {\n    const currentIndex = participants.findIndex(p => p.id === currentId);\n    \n    if (currentIndex < participants.length - 1) {\n      const nextParticipant = participants[currentIndex + 1];\n      focusInput(nextParticipant.id);\n    }\n  }, [participants, focusInput]);\n\n  /**\n   * Main keyboard event handler\n   * Routes different key events to appropriate handlers\n   */\n  const handleKeyDown = useCallback((id: number, e: React.KeyboardEvent) => {\n    switch (e.key) {\n      case 'Enter':\n        e.preventDefault();\n        handleEnterKey(id);\n        break;\n        \n      case 'ArrowUp':\n        e.preventDefault();\n        handleArrowUp(id);\n        break;\n        \n      case 'ArrowDown':\n        e.preventDefault();\n        handleArrowDown(id);\n        break;\n        \n      default:\n        // Let other keys pass through normally\n        break;\n    }\n  }, [handleEnterKey, handleArrowUp, handleArrowDown]);\n\n  return {\n    handleKeyDown\n  };\n}; ","/**\n * ParticipantNumber Component\n * \n * A small, focused component that displays the participant number indicator.\n * Shows a circular badge with the participant's number when the input has content.\n * \n * Responsibilities:\n * - Display participant number in a circular badge\n * - Show/hide based on whether input has content\n * - Provide smooth transitions for better UX\n */\n\nimport { Box } from '@mui/material';\n\n/**\n * Props for the ParticipantNumber component\n */\ninterface ParticipantNumberProps {\n  /** The number to display (1-based index) */\n  number: number;\n  /** Whether to show the number (based on input content) */\n  show: boolean;\n}\n\n/**\n * ParticipantNumber Component\n * \n * Displays a circular badge with the participant number.\n * Only visible when the associated input has content.\n * \n * @param props - Component props\n * @returns JSX element for the participant number indicator\n */\nexport const ParticipantNumber = ({ number, show }: ParticipantNumberProps) => {\n  return (\n    <Box\n      sx={{\n        minWidth: 24,\n        height: 24,\n        borderRadius: '50%',\n        bgcolor: show ? 'primary.main' : 'transparent',\n        color: show ? 'primary.contrastText' : 'transparent',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        fontSize: '0.75rem',\n        fontWeight: 600,\n        flexShrink: 0,\n        transition: 'all 0.2s ease',\n        // Accessibility: Ensure minimum touch target size\n        minHeight: 24,\n      }}\n    >\n      {show ? number : ''}\n    </Box>\n  );\n}; ","/**\n * ParticipantInput Component\n * \n * A focused component that handles a single participant input field.\n * Manages the input field, delete button, and participant number display.\n * \n * Responsibilities:\n * - Render individual participant input field\n * - Handle input changes and keyboard navigation\n * - Show/hide delete button based on content\n * - Display participant number when appropriate\n */\n\nimport { Box, TextField, IconButton } from '@mui/material';\nimport { Close as CloseIcon } from '@mui/icons-material';\nimport { ParticipantNumber } from './ParticipantNumber';\nimport type { ParticipantInput as ParticipantInputType } from '../../types';\n\n/**\n * Props for the ParticipantInput component\n */\ninterface ParticipantInputProps {\n  /** The participant data */\n  participant: ParticipantInputType;\n  /** The display number for this participant */\n  displayNumber: number;\n  /** Whether to show the participant number */\n  showNumber: boolean;\n  /** Whether this is the only input (disable delete) */\n  isOnlyInput: boolean;\n  /** Ref callback for the input element */\n  inputRef: (el: HTMLInputElement | null) => void;\n  /** Handle input value changes */\n  onChange: (id: number, value: string) => void;\n  /** Handle keyboard navigation */\n  onKeyDown: (id: number, e: React.KeyboardEvent) => void;\n  /** Handle participant removal */\n  onRemove: (id: number) => void;\n}\n\n/**\n * ParticipantInput Component\n * \n * Renders a single participant input with number indicator and delete button.\n * Handles all interactions for one participant entry.\n * \n * @param props - Component props\n * @returns JSX element for the participant input row\n */\nexport const ParticipantInput = ({\n  participant,\n  displayNumber,\n  showNumber,\n  isOnlyInput,\n  inputRef,\n  onChange,\n  onKeyDown,\n  onRemove\n}: ParticipantInputProps) => {\n  const hasContent = participant.value.trim() !== '';\n\n  return (\n    <Box \n      sx={{ \n        display: 'flex',\n        alignItems: 'center',\n        gap: 1,\n        // Ensure consistent height for all input rows\n        minHeight: 40,\n      }}\n    >\n      {/* Participant Number Indicator */}\n      <ParticipantNumber \n        number={displayNumber} \n        show={showNumber} \n      />\n      \n      {/* Input Field */}\n      <TextField\n        inputRef={inputRef}\n        value={participant.value}\n        onChange={(e) => onChange(participant.id, e.target.value)}\n        onKeyDown={(e) => onKeyDown(participant.id, e)}\n        placeholder=\"Enter name...\"\n        variant=\"outlined\"\n        size=\"small\"\n        sx={{ \n          flex: 1,\n          '& .MuiOutlinedInput-root': {\n            '& fieldset': {\n              border: 'none'\n            },\n            '&:hover fieldset': {\n              border: 'none'\n            },\n            '&.Mui-focused fieldset': {\n              border: 'none'\n            },\n            bgcolor: 'background.default',\n            borderRadius: 1\n          }\n        }}\n        // Accessibility attributes\n        aria-label={`Participant ${displayNumber} name input`}\n        autoComplete=\"off\"\n      />\n      \n      {/* Delete Button */}\n      <IconButton\n        size=\"small\"\n        onClick={() => onRemove(participant.id)}\n        disabled={isOnlyInput}\n        sx={{\n          // Show button when input has content, hide when empty\n          opacity: hasContent ? 0.7 : 0,\n          transition: 'opacity 0.2s ease',\n          color: 'error.main',\n          flexShrink: 0,\n          '&:hover': {\n            opacity: hasContent ? 1 : 0,\n            bgcolor: 'error.main',\n            color: 'error.contrastText'\n          },\n          '&.Mui-disabled': {\n            opacity: 0\n          }\n        }}\n        // Accessibility attributes\n        aria-label={`Remove participant ${displayNumber}`}\n        title={`Remove participant ${displayNumber}`}\n      >\n        <CloseIcon fontSize=\"small\" />\n      </IconButton>\n    </Box>\n  );\n}; ","/**\n * ParticipantsList Component\n * \n * Container component that manages the list of participant input fields and team controls.\n * Handles the scrollable area, header with clear button, individual inputs, and team generation controls.\n * \n * Responsibilities:\n * - Render the participants input section with header\n * - Manage scrollable list of participant inputs\n * - Handle clear all functionality\n * - Coordinate between individual inputs and parent state\n * - Provide team count selection and generate button controls\n */\n\nimport { Box, Typography, Button, IconButton, useTheme } from '@mui/material';\nimport { Add as AddIcon, Remove as RemoveIcon, Shuffle as ShuffleIcon, DeleteForever as DeleteForeverIcon } from '@mui/icons-material';\nimport { ParticipantInput } from './ParticipantInput';\nimport type { ParticipantInput as ParticipantInputType } from '../../types';\nimport { CONSTANTS } from '../../types';\n\n/**\n * Props for the ParticipantsList component\n */\ninterface ParticipantsListProps {\n  /** Array of participant inputs */\n  participants: ParticipantInputType[];\n  /** Count of filled participants for numbering */\n  filledCount: number;\n  /** Whether this is the only input (disable delete) */\n  isOnlyInput: boolean;\n  /** Map of input element references */\n  inputRefs: React.MutableRefObject<Map<number, HTMLInputElement>>;\n  /** Handle input value changes */\n  onInputChange: (id: number, value: string) => void;\n  /** Handle keyboard navigation */\n  onKeyDown: (id: number, e: React.KeyboardEvent) => void;\n  /** Handle participant removal */\n  onRemoveParticipant: (id: number) => void;\n  /** Handle clear all participants */\n  onClearAll: () => void;\n  /** Current team count */\n  teamCount: number;\n  /** Whether teams are being generated */\n  isGenerating: boolean;\n  /** Team distribution message */\n  distributionMessage: string;\n  /** Whether generate button should be disabled */\n  canGenerate: boolean;\n  /** Handle team count changes */\n  onTeamCountChange: (count: number) => void;\n  /** Handle generate teams action */\n  onGenerateTeams: () => void;\n}\n\n/**\n * ParticipantsList Component\n * \n * Renders the complete participants input section with header, scrollable list, and team controls.\n * Manages the layout and coordinates between individual participant inputs and team generation.\n * \n * @param props - Component props\n * @returns JSX element for the participants list section with integrated team controls\n */\nexport const ParticipantsList = ({\n  participants,\n  filledCount,\n  isOnlyInput,\n  inputRefs,\n  onInputChange,\n  onKeyDown,\n  onRemoveParticipant,\n  onClearAll,\n  teamCount,\n  isGenerating,\n  distributionMessage,\n  canGenerate,\n  onTeamCountChange,\n  onGenerateTeams\n}: ParticipantsListProps) => {\n  const theme = useTheme();\n  \n  // Team count selector logic - Ensure proper number handling\n  const safeTeamCount = (() => {\n    // Ensure we always get a valid number\n    const numericTeamCount = typeof teamCount === 'number' ? teamCount : parseInt(String(teamCount), 10);\n    const fallbackCount = typeof CONSTANTS.MIN_TEAMS === 'number' ? CONSTANTS.MIN_TEAMS : 2;\n    \n    return (!isNaN(numericTeamCount) && numericTeamCount > 0) ? numericTeamCount : fallbackCount;\n  })();\n  \n  const canDecrement = safeTeamCount > CONSTANTS.MIN_TEAMS;\n  const canIncrement = safeTeamCount < CONSTANTS.MAX_TEAMS;\n\n  const handleDecrement = () => {\n    if (canDecrement) {\n      onTeamCountChange(safeTeamCount - 1);\n    }\n  };\n\n  const handleIncrement = () => {\n    if (canIncrement) {\n      onTeamCountChange(safeTeamCount + 1);\n    }\n  };\n\n  // Generate button logic\n  const isDisabled = !canGenerate || isGenerating;\n\n  return (\n    <Box \n      sx={{ \n        display: 'flex',\n        flexDirection: 'column',\n        // Take full available height in the new viewport layout\n        height: '100%', // Full height of available space\n        bgcolor: 'background.paper',\n        borderRadius: 3,\n        elevation: 4,\n        boxShadow: (theme) => theme.shadows[4],\n        overflow: 'hidden'\n      }}\n    >\n      {/* Participant List - Scrollable Area */}\n      <Box \n        sx={{ \n          flex: 1, // Take remaining space\n          p: { xs: 1, sm: 2 },\n          pt: { xs: 1, sm: 2 }, // Full top padding since no header\n          overflowY: 'auto', // Only this area scrolls\n          display: 'flex',\n          flexDirection: 'column',\n          gap: 1,\n          // Enhanced scrollbar styling for better UX in full viewport mode\n          '&::-webkit-scrollbar': {\n            width: '8px',\n          },\n          '&::-webkit-scrollbar-track': {\n            background: theme.palette.mode === 'dark' \n              ? 'rgba(255,255,255,0.05)' \n              : 'rgba(0,0,0,0.05)',\n            borderRadius: '4px'\n          },\n          '&::-webkit-scrollbar-thumb': {\n            background: theme.palette.mode === 'dark' \n              ? 'rgba(255,255,255,0.3)' \n              : 'rgba(0,0,0,0.3)',\n            borderRadius: '4px',\n            '&:hover': {\n              background: theme.palette.mode === 'dark' \n                ? 'rgba(255,255,255,0.4)' \n                : 'rgba(0,0,0,0.4)',\n            },\n          },\n        }}\n      >\n        {participants.map((participant, index) => {\n          // Calculate display number and visibility\n          const showNumber = participant.value.trim() !== '' || index < filledCount;\n          const displayNumber = participant.value.trim() !== '' ? index + 1 : filledCount + 1;\n          \n          return (\n            <ParticipantInput\n              key={participant.id}\n              participant={participant}\n              displayNumber={displayNumber}\n              showNumber={showNumber}\n              isOnlyInput={isOnlyInput}\n              inputRef={(el) => {\n                if (el) {\n                  inputRefs.current.set(participant.id, el);\n                }\n              }}\n              onChange={onInputChange}\n              onKeyDown={onKeyDown}\n              onRemove={onRemoveParticipant}\n            />\n          );\n        })}\n      </Box>\n\n      {/* Integrated Team Controls Section - Combined from separate TeamControls component */}\n      <Box \n        sx={{ \n          flexShrink: 0, // Fixed size at bottom\n          display: 'flex',\n          flexDirection: 'column',\n          gap: 'clamp(0.25rem, 1vw, 0.5rem)', // Optimized compact spacing for team controls\n          p: { xs: 1, sm: 2 }, // Match scrollable area padding for consistency\n          pt: 'clamp(0.25rem, 1vw, 0.75rem)', // Optimized top padding for compact separation\n        }}\n      >\n        {/* Team Count Controls */}\n        <Box \n          sx={{ \n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            gap: 'clamp(1rem, 2.5vw, 2rem)' // Fluid gap for better button spacing\n          }}\n        >\n          {/* Decrement Button */}\n          <IconButton\n            onClick={handleDecrement}\n            disabled={!canDecrement}\n            sx={{ \n              bgcolor: 'background.default',\n              '&:hover': { \n                bgcolor: canDecrement ? 'action.hover' : 'background.default' \n              },\n              '&.Mui-disabled': {\n                bgcolor: 'background.default',\n                opacity: 0.5\n              }\n            }}\n            aria-label=\"Decrease team count\"\n            title={`Decrease team count (minimum ${CONSTANTS.MIN_TEAMS})`}\n          >\n            <RemoveIcon />\n          </IconButton>\n          \n          {/* Team Count Display */}\n          <Typography \n            variant=\"quizCounter\"\n            sx={{ \n              minWidth: { xs: 120, sm: 140 },\n              textAlign: 'center',\n              userSelect: 'none', // Prevent text selection\n              marginBottom: 0, // Override theme margin\n            }}\n            aria-live=\"polite\" // Announce changes to screen readers\n          >\n            {safeTeamCount} Team{safeTeamCount === 1 ? '' : 's'}\n          </Typography>\n          \n          {/* Increment Button */}\n          <IconButton\n            onClick={handleIncrement}\n            disabled={!canIncrement}\n            sx={{ \n              bgcolor: 'background.default',\n              '&:hover': { \n                bgcolor: canIncrement ? 'action.hover' : 'background.default' \n              },\n              '&.Mui-disabled': {\n                bgcolor: 'background.default',\n                opacity: 0.5\n              }\n            }}\n            aria-label=\"Increase team count\"\n            title={`Increase team count (maximum ${CONSTANTS.MAX_TEAMS})`}\n          >\n            <AddIcon />\n          </IconButton>\n        </Box>\n\n        {/* Distribution Message - Styled as hint text */}\n        {distributionMessage && (\n          <Typography \n            variant=\"quizInstructions\"\n            sx={{ \n              textAlign: 'center',\n              minHeight: '1.2em', // Prevent layout shift\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              marginBottom: 0, // Override theme margin\n              fontStyle: 'italic', // Italic for hint appearance\n              color: 'text.secondary', // Muted color for subtle hint\n              fontSize: 'clamp(0.75rem, 1.3vw, 0.8rem)', // Slightly smaller than default\n              opacity: 0.8, // Subtle transparency for hint effect\n            }}\n          >\n            {distributionMessage}\n          </Typography>\n        )}\n\n        {/* Action Buttons - Generate centered, Clear icon at end */}\n        <Box \n          sx={{ \n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            position: 'relative', // For absolute positioning of clear button\n          }}\n        >\n          {/* Generate Teams Button - Centered */}\n          <Button\n            variant=\"contained\"\n            startIcon={<ShuffleIcon />}\n            onClick={onGenerateTeams}\n            disabled={isDisabled}\n            sx={{ \n              px: { xs: 4, sm: 6 },\n              py: { xs: 1.5, sm: 1.25 },\n              fontSize: 'clamp(0.8rem, 1.2vw, 0.875rem)', // Fluid scaling for responsive button text\n              borderRadius: 2,\n              boxShadow: (theme) => theme.shadows[2],\n              '&:hover': {\n                boxShadow: (theme) => theme.shadows[4],\n                transform: 'translateY(-1px)',\n                transition: 'all 0.2s ease-in-out'\n              },\n              '&:active': {\n                transform: 'translateY(0px)',\n              },\n              '&.Mui-disabled': {\n                boxShadow: (theme) => theme.shadows[1],\n                transform: 'none'\n              }\n            }}\n            // Accessibility attributes\n            aria-label={isGenerating ? 'Generating teams, please wait' : 'Generate teams'}\n            title={isGenerating ? 'Generating teams...' : 'Generate teams from participants'}\n          >\n            {isGenerating ? 'Generating...' : 'Generate'}\n          </Button>\n\n          {/* Clear All Icon Button - Positioned at the end */}\n          <IconButton\n            onClick={onClearAll}\n            sx={{ \n              position: 'absolute',\n              right: 0,\n              bgcolor: 'secondary.main',\n              color: 'secondary.contrastText',\n              '&:hover': {\n                bgcolor: 'secondary.dark',\n                transform: 'scale(1.1)',\n                transition: 'all 0.2s ease-in-out'\n              },\n              '&:active': {\n                transform: 'scale(1)',\n              }\n            }}\n            // Accessibility attributes\n            aria-label=\"Clear all participants\"\n            title=\"Clear all participants\"\n          >\n            <DeleteForeverIcon />\n          </IconButton>\n        </Box>\n      </Box>\n    </Box>\n  );\n}; ","/**\n * TeamCard Component\n * \n * A focused component for displaying a single team card.\n * Shows team name and member list with hover effects.\n * \n * Responsibilities:\n * - Display team name and members\n * - Provide hover animations\n * - Handle responsive layout\n * - Show team emoji and styling\n */\n\nimport { Box, Typography } from '@mui/material';\nimport type { Team } from '../../types';\n\n/**\n * Props for the TeamCard component\n */\ninterface TeamCardProps {\n  /** The team data to display */\n  team: Team;\n  /** Whether the card should show refresh animation */\n  isRefreshing?: boolean;\n}\n\n/**\n * TeamCard Component\n * \n * Renders a single team card with name and member list.\n * Provides hover effects and responsive design.\n * \n * @param props - Component props\n * @returns JSX element for the team card\n */\nexport const TeamCard = ({ team, isRefreshing = false }: TeamCardProps) => {\n  return (\n    <Box\n      sx={{\n        p: 2,\n        bgcolor: 'background.default',\n        borderRadius: 2,\n        boxShadow: (theme) => theme.shadows[2],\n        opacity: isRefreshing ? 0.5 : 1,\n        transform: isRefreshing ? 'scale(0.98)' : 'scale(1)',\n        transition: 'all 0.3s ease-in-out',\n        '&:hover': {\n          boxShadow: (theme) => theme.shadows[4],\n          transform: isRefreshing ? 'scale(0.98)' : 'translateY(-2px)',\n        }\n      }}\n    >\n      {/* Team Name */}\n      <Typography\n        variant=\"subtitle1\"\n        fontWeight={600}\n        color=\"primary.main\"\n        sx={{ \n          mb: 1,\n          display: 'flex',\n          alignItems: 'center',\n          gap: 0.5\n        }}\n      >\n        🏆 {team.name}\n      </Typography>\n      \n      {/* Team Members */}\n      <Box \n        sx={{ \n          display: 'flex', \n          flexDirection: 'column', \n          gap: 0.5 \n        }}\n      >\n        {team.members.map((member, index) => (\n          <Typography\n            key={member.id}\n            variant=\"body2\"\n            color=\"text.primary\"\n            sx={{\n              fontSize: '0.875rem',\n              lineHeight: 1.4\n            }}\n          >\n            {index + 1}. {member.name}\n          </Typography>\n        ))}\n      </Box>\n      \n      {/* Member Count Badge */}\n      <Typography\n        variant=\"caption\"\n        color=\"text.secondary\"\n        sx={{\n          mt: 1,\n          display: 'block',\n          fontSize: '0.75rem',\n          fontStyle: 'italic'\n        }}\n      >\n        {team.members.length} member{team.members.length !== 1 ? 's' : ''}\n      </Typography>\n    </Box>\n  );\n}; ","/**\n * ModalActions Component\n * \n * A focused component for the teams modal action buttons.\n * Handles refresh, copy, and close actions with proper states.\n * \n * Responsibilities:\n * - Display action buttons (refresh, copy, close)\n * - Handle loading states and animations\n * - Provide proper accessibility attributes\n * - Show visual feedback for actions\n */\n\nimport { Box, IconButton } from '@mui/material';\nimport { \n  Refresh as RefreshIcon,\n  ContentCopy as CopyIcon,\n  Close as CloseIcon\n} from '@mui/icons-material';\n\n/**\n * Props for the ModalActions component\n */\ninterface ModalActionsProps {\n  /** Whether teams are being refreshed */\n  isRefreshing: boolean;\n  /** Whether teams are being generated */\n  isGenerating: boolean;\n  /** Handle refresh teams action */\n  onRefresh: () => void;\n  /** Handle copy teams action */\n  onCopy: () => void;\n  /** Handle close modal action */\n  onClose: () => void;\n}\n\n/**\n * ModalActions Component\n * \n * Renders the action buttons for the teams modal.\n * Provides refresh, copy, and close functionality.\n * \n * @param props - Component props\n * @returns JSX element for the modal action buttons\n */\nexport const ModalActions = ({\n  isRefreshing,\n  isGenerating,\n  onRefresh,\n  onCopy,\n  onClose\n}: ModalActionsProps) => {\n  const isRefreshDisabled = isGenerating || isRefreshing;\n\n  return (\n    <Box sx={{ display: 'flex', gap: 1 }}>\n      {/* Refresh Button */}\n      <IconButton\n        onClick={onRefresh}\n        disabled={isRefreshDisabled}\n        sx={{ \n          color: 'primary.main',\n          '&:hover': { \n            bgcolor: 'primary.main', \n            color: 'primary.contrastText' \n          },\n          transform: isRefreshing ? 'rotate(360deg)' : 'rotate(0deg)',\n          transition: 'transform 0.3s ease-in-out',\n          '&.Mui-disabled': {\n            color: 'action.disabled'\n          }\n        }}\n        aria-label=\"Refresh teams\"\n        title=\"Generate new teams with same participants\"\n      >\n        <RefreshIcon />\n      </IconButton>\n      \n      {/* Copy Button */}\n      <IconButton\n        onClick={onCopy}\n        sx={{ \n          color: 'success.main',\n          '&:hover': { \n            bgcolor: 'success.main', \n            color: 'success.contrastText' \n          }\n        }}\n        aria-label=\"Copy teams to clipboard\"\n        title=\"Copy teams to clipboard\"\n      >\n        <CopyIcon />\n      </IconButton>\n      \n      {/* Close Button */}\n      <IconButton\n        onClick={onClose}\n        sx={{ \n          color: 'text.secondary',\n          '&:hover': { \n            bgcolor: 'error.main', \n            color: 'error.contrastText' \n          }\n        }}\n        aria-label=\"Close teams modal\"\n        title=\"Close teams modal\"\n      >\n        <CloseIcon />\n      </IconButton>\n    </Box>\n  );\n}; ","/**\n * TeamsModal Component\n * \n * Container component for displaying generated teams in a modal dialog.\n * Handles the modal layout, team grid, and action buttons.\n * \n * Responsibilities:\n * - Display teams in a responsive grid layout\n * - Handle modal open/close state\n * - Coordinate team actions (refresh, copy)\n * - Provide proper modal accessibility\n */\n\nimport { Dialog, DialogTitle, DialogContent, Box, Typography } from '@mui/material';\nimport { TeamCard } from './TeamCard';\nimport { ModalActions } from './ModalActions';\nimport type { Team } from '../../types';\n\n/**\n * Props for the TeamsModal component\n */\ninterface TeamsModalProps {\n  /** Whether the modal is open */\n  open: boolean;\n  /** Array of teams to display */\n  teams: Team[];\n  /** Whether teams are being refreshed */\n  isRefreshing: boolean;\n  /** Whether teams are being generated */\n  isGenerating: boolean;\n  /** Handle modal close */\n  onClose: () => void;\n  /** Handle refresh teams action */\n  onRefresh: () => void;\n  /** Handle copy teams action */\n  onCopy: () => void;\n}\n\n/**\n * TeamsModal Component\n * \n * Renders the teams modal with generated teams in a grid layout.\n * Provides actions for refreshing, copying, and closing.\n * \n * @param props - Component props\n * @returns JSX element for the teams modal\n */\nexport const TeamsModal = ({\n  open,\n  teams,\n  isRefreshing,\n  isGenerating,\n  onClose,\n  onRefresh,\n  onCopy\n}: TeamsModalProps) => {\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      maxWidth=\"md\"\n      fullWidth\n      sx={{\n        '& .MuiDialog-paper': {\n          maxHeight: '80vh',\n          m: 2\n        }\n      }}\n      // Accessibility attributes\n      aria-labelledby=\"teams-modal-title\"\n      aria-describedby=\"teams-modal-content\"\n    >\n      {/* Modal Header */}\n      <DialogTitle \n        id=\"teams-modal-title\"\n        sx={{ \n          display: 'flex', \n          justifyContent: 'space-between', \n          alignItems: 'center',\n          pb: 1\n        }}\n      >\n        <Typography \n          variant=\"quizTitle\" \n          component=\"h2\"\n          sx={{ \n            marginBottom: 0, // Override theme margin\n          }}\n        >\n          Your Teams\n        </Typography>\n        \n        {/* Action Buttons */}\n        <ModalActions\n          isRefreshing={isRefreshing}\n          isGenerating={isGenerating}\n          onRefresh={onRefresh}\n          onCopy={onCopy}\n          onClose={onClose}\n        />\n      </DialogTitle>\n      \n      {/* Modal Content */}\n      <DialogContent \n        id=\"teams-modal-content\"\n        sx={{ pt: 1 }}\n      >\n        {teams.length > 0 ? (\n          <Box\n            sx={{\n              display: 'grid',\n              gridTemplateColumns: { \n                xs: '1fr', \n                sm: 'repeat(auto-fit, minmax(200px, 1fr))' \n              },\n              gap: 2,\n              opacity: isRefreshing ? 0.5 : 1,\n              transform: isRefreshing ? 'scale(0.98)' : 'scale(1)',\n              transition: 'all 0.3s ease-in-out'\n            }}\n          >\n            {teams.map((team) => (\n              <TeamCard\n                key={team.id}\n                team={team}\n                isRefreshing={isRefreshing}\n              />\n            ))}\n          </Box>\n        ) : (\n          <Box\n            sx={{\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              minHeight: 200,\n              textAlign: 'center'\n            }}\n          >\n            <Typography \n              variant=\"body1\" \n              color=\"text.secondary\"\n            >\n              No teams generated yet.\n            </Typography>\n          </Box>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}; ","/**\n * ClearConfirmDialog Component\n * \n * A focused component for confirming the clear all participants action.\n * Provides a confirmation dialog with proper messaging and actions.\n * \n * Responsibilities:\n * - Display confirmation dialog for clearing participants\n * - Show participant count in confirmation message\n * - Provide cancel and confirm actions\n * - Handle proper dialog accessibility\n */\n\nimport { Dialog, DialogTitle, DialogContent, DialogActions, Typography, Button } from '@mui/material';\n\n/**\n * Props for the ClearConfirmDialog component\n */\ninterface ClearConfirmDialogProps {\n  /** Whether the dialog is open */\n  open: boolean;\n  /** Number of participants to be cleared */\n  participantCount: number;\n  /** Handle dialog close/cancel */\n  onCancel: () => void;\n  /** Handle confirm clear action */\n  onConfirm: () => void;\n}\n\n/**\n * ClearConfirmDialog Component\n * \n * Renders a confirmation dialog for clearing all participants.\n * Shows the number of participants that will be cleared.\n * \n * @param props - Component props\n * @returns JSX element for the clear confirmation dialog\n */\nexport const ClearConfirmDialog = ({\n  open,\n  participantCount,\n  onCancel,\n  onConfirm\n}: ClearConfirmDialogProps) => {\n  return (\n    <Dialog\n      open={open}\n      onClose={onCancel}\n      maxWidth=\"xs\"\n      fullWidth\n      // Accessibility attributes\n      aria-labelledby=\"clear-dialog-title\"\n      aria-describedby=\"clear-dialog-description\"\n    >\n      <DialogTitle id=\"clear-dialog-title\">\n        Clear All Participants?\n      </DialogTitle>\n      \n      <DialogContent>\n        <Typography id=\"clear-dialog-description\">\n          Are you sure you want to clear all {participantCount} participant{participantCount !== 1 ? 's' : ''}?\n          This action cannot be undone.\n        </Typography>\n      </DialogContent>\n      \n      <DialogActions>\n        <Button \n          onClick={onCancel}\n          color=\"inherit\"\n        >\n          Cancel\n        </Button>\n        <Button \n          onClick={onConfirm} \n          color=\"error\" \n          variant=\"contained\"\n          autoFocus // Focus the primary action\n        >\n          Clear All\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}; ","/**\n * Clipboard Utilities for Random Team Generator\n * \n * This file handles all clipboard operations, specifically copying generated teams\n * to the clipboard in a nicely formatted text format suitable for sharing.\n */\n\nimport type { Team } from '../types';\n\n/**\n * Formats teams into a nicely structured text format for sharing\n * Creates a formatted string with emojis and proper spacing\n * \n * @param teams - Array of teams to format\n * @returns Formatted string ready for clipboard or sharing\n */\nexport const formatTeamsForClipboard = (teams: Team[]): string => {\n  if (teams.length === 0) {\n    return 'No teams generated yet.';\n  }\n\n  let formattedText = '🎯 **TEAM GENERATOR RESULTS** 🎯\\n\\n';\n  \n  teams.forEach((team, index) => {\n    formattedText += `🏆 **${team.name}**\\n`;\n    team.members.forEach((member, memberIndex) => {\n      formattedText += `   ${memberIndex + 1}. ${member.name}\\n`;\n    });\n    \n    // Add spacing between teams (except after the last one)\n    if (index < teams.length - 1) {\n      formattedText += '\\n';\n    }\n  });\n  \n  formattedText += '\\n✨ Generated with Quizzard Team Generator ✨';\n  \n  return formattedText;\n};\n\n/**\n * Copies teams to the system clipboard with proper error handling\n * Uses the modern Clipboard API with fallback handling\n * \n * @param teams - Array of teams to copy\n * @returns Promise that resolves to true if successful, false if failed\n */\nexport const copyTeamsToClipboard = async (teams: Team[]): Promise<boolean> => {\n  try {\n    // Check if clipboard API is available\n    if (!navigator.clipboard) {\n      console.warn('Clipboard API not available');\n      return false;\n    }\n\n    const formattedText = formatTeamsForClipboard(teams);\n    await navigator.clipboard.writeText(formattedText);\n    \n    return true;\n  } catch (error) {\n    console.error('Failed to copy teams to clipboard:', error);\n    return false;\n  }\n};\n\n/**\n * Gets a preview of how the teams will look when copied\n * Useful for showing users what will be copied before the action\n * \n * @param teams - Array of teams to preview\n * @returns Formatted preview string (truncated if too long)\n */\nexport const getClipboardPreview = (teams: Team[]): string => {\n  const formatted = formatTeamsForClipboard(teams);\n  const maxLength = 200;\n  \n  if (formatted.length <= maxLength) {\n    return formatted;\n  }\n  \n  return formatted.substring(0, maxLength) + '...';\n};\n\n/**\n * Validates if teams data is suitable for clipboard operations\n * Checks for empty teams, missing data, etc.\n * \n * @param teams - Array of teams to validate\n * @returns Object with validation result and optional error message\n */\nexport const validateTeamsForClipboard = (teams: Team[]): { \n  isValid: boolean; \n  message?: string; \n} => {\n  if (!teams || teams.length === 0) {\n    return {\n      isValid: false,\n      message: 'No teams available to copy'\n    };\n  }\n\n  const hasEmptyTeams = teams.some(team => !team.members || team.members.length === 0);\n  if (hasEmptyTeams) {\n    return {\n      isValid: false,\n      message: 'Some teams are empty'\n    };\n  }\n\n  const hasInvalidMembers = teams.some(team => \n    team.members.some(member => !member.name || member.name.trim() === '')\n  );\n  if (hasInvalidMembers) {\n    return {\n      isValid: false,\n      message: 'Some team members have invalid names'\n    };\n  }\n\n  return { isValid: true };\n}; ","/**\n * RandomTeamGeneratorPage Component\n * \n * Main page component for the Random Team Generator feature.\n * Orchestrates all components and hooks to provide the complete functionality.\n * \n * Responsibilities:\n * - Coordinate between all feature components\n * - Manage overall page layout and structure\n * - Handle integration between hooks and components\n * - Provide snackbar feedback for user actions\n */\n\nimport { useState, useEffect } from 'react';\nimport { Box, Snackbar, Alert } from '@mui/material';\nimport { useSnackbar } from '../../../shared/hooks/useSnackbar';\nimport { useParticipants } from '../hooks/useParticipants';\nimport { useTeamGeneration } from '../hooks/useTeamGeneration';\nimport { useKeyboardNavigation } from '../hooks/useKeyboardNavigation';\nimport { ParticipantsList } from '../components/ParticipantsList/ParticipantsList';\nimport { TeamsModal } from '../components/TeamsModal/TeamsModal';\nimport { ClearConfirmDialog } from '../components/Dialogs/ClearConfirmDialog';\nimport { copyTeamsToClipboard } from '../utils/clipboard';\n\n/**\n * RandomTeamGeneratorPage Component\n * \n * The main page component that brings together all the refactored pieces.\n * Uses custom hooks for state management and coordinates between components.\n * \n * @returns JSX element for the complete Random Team Generator page\n */\nexport default function RandomTeamGeneratorPage() {\n  const { snackbar, showSnackbar, hideSnackbar } = useSnackbar();\n  \n  // Local state for dialogs\n  const [clearDialogOpen, setClearDialogOpen] = useState(false);\n  \n  // Custom hooks for feature logic\n  const {\n    participants,\n    nextId,\n    inputRefs,\n    handleInputChange,\n    removeParticipant,\n    getParticipantNames,\n    getFilledParticipantCount,\n    clearAllParticipants\n  } = useParticipants();\n  \n  const {\n    teams,\n    teamCount,\n    generationState,\n    teamsModalOpen,\n    setTeamCount,\n    resetTeamCount,\n    generateTeams,\n    refreshTeams,\n    clearTeams,\n    openTeamsModal,\n    closeTeamsModal,\n    getTeamDistributionMessage,\n    canGenerateTeams\n  } = useTeamGeneration();\n  \n  // Add a simple function to add new participant for keyboard navigation\n  const addNewParticipant = () => {\n    // This will be handled by the existing logic in useParticipants\n    // when the user types in the last input field\n  };\n  \n  const { handleKeyDown } = useKeyboardNavigation({\n    participants,\n    nextId,\n    inputRefs,\n    onAddParticipant: addNewParticipant\n  });\n  \n  // Derived state\n  const participantNames = getParticipantNames();\n  const filledCount = getFilledParticipantCount();\n  const isOnlyInput = participants.length === 1;\n  const distributionMessage = getTeamDistributionMessage(participantNames.length);\n  const { canGenerate } = canGenerateTeams(participantNames.length);\n  \n  /**\n   * Auto-reset team count to minimum when no participants remain\n   * This provides logical UX - empty participant list should reset team count\n   */\n  useEffect(() => {\n    if (participantNames.length === 0 && teamCount > 2) {\n      resetTeamCount();\n    }\n  }, [participantNames.length, teamCount, resetTeamCount]);\n  \n  /**\n   * Handle input changes with cheat code detection\n   */\n  const handleParticipantInputChange = (id: number, value: string) => {\n    const result = handleInputChange(id, value);\n    \n    if (result.isCheatCode) {\n      showSnackbar('🎉 The followers have joined!', 'success');\n    }\n  };\n  \n  /**\n   * Handle team generation with validation and feedback\n   */\n  const handleGenerateTeams = async () => {\n    const validation = canGenerateTeams(participantNames.length);\n    \n    if (!validation.canGenerate) {\n      showSnackbar(validation.message || 'Cannot generate teams', 'warning');\n      return;\n    }\n    \n    try {\n      const generatedTeams = generateTeams(participantNames);\n      if (generatedTeams.length > 0) {\n        openTeamsModal();\n        showSnackbar(`Generated ${generatedTeams.length} teams successfully!`, 'success');\n      }\n    } catch (error) {\n      showSnackbar('Error generating teams. Please try again.', 'error');\n    }\n  };\n  \n  /**\n   * Handle team refresh with feedback\n   */\n  const handleRefreshTeams = () => {\n    try {\n      refreshTeams();\n      showSnackbar('Teams refreshed!', 'success');\n    } catch (error) {\n      showSnackbar('Error refreshing teams. Please try again.', 'error');\n    }\n  };\n  \n  /**\n   * Handle copy teams to clipboard\n   */\n  const handleCopyTeams = async () => {\n    const success = await copyTeamsToClipboard(teams);\n    \n    if (success) {\n      showSnackbar('Teams copied to clipboard! 📋', 'success');\n    } else {\n      showSnackbar('Failed to copy teams', 'error');\n    }\n  };\n  \n  /**\n   * Handle clear all participants\n   */\n  const handleClearAll = () => {\n    if (participantNames.length === 0) {\n      showSnackbar('No participants to clear.', 'info');\n      return;\n    }\n    setClearDialogOpen(true);\n  };\n  \n  /**\n   * Confirm clear all participants\n   */\n  const confirmClearAll = () => {\n    clearAllParticipants();\n    clearTeams();\n    resetTeamCount(); // Reset team count to minimum when no participants\n    \n    // Close dialog FIRST\n    setClearDialogOpen(false);\n    \n    // Then show message\n    setTimeout(() => {\n      showSnackbar('All participants cleared.', 'success');\n    }, 100);\n  };\n  \n  /**\n   * Cancel clear all action\n   */\n  const cancelClear = () => {\n    setClearDialogOpen(false);\n  };\n\n  return (\n    <>\n      {/* Full Viewport Container - App-like Layout */}\n      <Box sx={{ \n        // Account for browser chrome (address bar, tabs, etc.)\n        height: 'calc(100vh - 100px)', // Subtract space for browser UI elements\n        minHeight: '480px', // Safety minimum for very small screens\n        display: 'flex',\n        flexDirection: 'column',\n        bgcolor: 'background.default',\n        overflow: 'hidden', // Prevent page-level scrolling\n      }}>\n        \n        {/* Main Content Area - Takes remaining space between header and footer */}\n        <Box sx={{ \n          flex: 1, // Fill available space\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          p: { xs: 1, sm: 2 }, // Padding for the card\n          overflow: 'hidden', // Ensure no overflow\n        }}>\n          <Box sx={{ \n            width: '100%',\n            height: '100%', // Take full available height\n            maxWidth: { \n              xs: 'calc(100vw - 16px)', \n              sm: 'clamp(280px, 50vw, 600px)' // Same as original --main-content-width\n            },\n            display: 'flex',\n            flexDirection: 'column'\n          }}>\n            {/* Combined Participants Input and Team Controls Section */}\n            <ParticipantsList\n              participants={participants}\n              filledCount={filledCount}\n              isOnlyInput={isOnlyInput}\n              inputRefs={inputRefs}\n              onInputChange={handleParticipantInputChange}\n              onKeyDown={handleKeyDown}\n              onRemoveParticipant={removeParticipant}\n              onClearAll={handleClearAll}\n              teamCount={teamCount}\n              isGenerating={generationState.isGenerating}\n              distributionMessage={distributionMessage}\n              canGenerate={canGenerate}\n              onTeamCountChange={setTeamCount}\n              onGenerateTeams={handleGenerateTeams}\n            />\n          </Box>\n        </Box>\n      </Box>\n\n      {/* Teams Modal */}\n      <TeamsModal\n        open={teamsModalOpen}\n        teams={teams}\n        isRefreshing={generationState.isRefreshing}\n        isGenerating={generationState.isGenerating}\n        onClose={closeTeamsModal}\n        onRefresh={handleRefreshTeams}\n        onCopy={handleCopyTeams}\n      />\n\n      {/* Clear Confirmation Dialog */}\n      <ClearConfirmDialog\n        open={clearDialogOpen}\n        participantCount={participantNames.length}\n        onCancel={cancelClear}\n        onConfirm={confirmClearAll}\n      />\n\n      {/* Snackbar for User Feedback */}\n      <Snackbar\n        open={snackbar.open}\n        autoHideDuration={4000}\n        onClose={hideSnackbar}\n        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n      >\n        <Alert \n          onClose={hideSnackbar} \n          severity={snackbar.severity}\n          variant=\"filled\"\n        >\n          {snackbar.message}\n        </Alert>\n      </Snackbar>\n    </>\n  );\n} "],"names":["CONSTANTS","FRIEND_NAMES","isCheatCode","value","generateFriendsParticipants","startingId","friendParticipants","name","index","emptyInput","getNextIdAfterCheatCode","STORAGE_KEY","STORAGE_KEYS","loadParticipantsFromStorage","stored","data","p","error","clearParticipantsFromStorage","useParticipants","initialData","participants","setParticipants","useState","nextId","setNextId","inputRefs","useRef","handleInputChange","useCallback","id","prev","_a","removeParticipant","filtered","nonEmpty","getParticipantNames","getFilledParticipantCount","clearAllParticipants","useEffect","timer","dataToSave","TeamGenerator","teamCount","shuffledParticipants","minTeamSize","extraMembers","teams","participantIndex","i","teamSize","teamMembers","participant","team","teamHeader","members","member","allParticipants","debounce","func","delay","timeoutId","args","isValidForStorage","useLocalStoragePersistence","key","defaultValue","options","debounceMs","validate","validator","iosCompatMode","setValueState","parsed","isSaving","setIsSaving","lastError","setLastError","saveToStorage","serialized","verification","errorMsg","debouncedSave","useMemo","setValue","newValue","prevValue","updatedValue","forceSave","clearValue","useTeamGeneration","setTeams","setTeamCountValue","generationState","setGenerationState","teamsModalOpen","setTeamsModalOpen","lastParticipantNames","setLastParticipantNames","convertNamesToParticipants","names","convertToTeamFormat","generatedTeams","performTeamGeneration","participantNames","participantsForGenerator","generateTeams","refreshTeams","clearTeams","openTeamsModal","closeTeamsModal","setTeamCountSafe","count","safeCount","getTeamDistributionMessage","participantCount","membersPerTeam","canGenerateTeams","resetTeamCount","useKeyboardNavigation","onAddParticipant","focusInput","input","handleEnterKey","currentId","currentIndex","nextParticipant","handleArrowUp","prevParticipant","handleArrowDown","e","ParticipantNumber","number","show","jsx","Box","ParticipantInput","displayNumber","showNumber","isOnlyInput","inputRef","onChange","onKeyDown","onRemove","hasContent","jsxs","TextField","IconButton","CloseIcon","ParticipantsList","filledCount","onInputChange","onRemoveParticipant","onClearAll","isGenerating","distributionMessage","canGenerate","onTeamCountChange","onGenerateTeams","theme","useTheme","safeTeamCount","numericTeamCount","fallbackCount","canDecrement","canIncrement","handleDecrement","handleIncrement","isDisabled","el","RemoveIcon","Typography","AddIcon","Button","ShuffleIcon","DeleteForeverIcon","TeamCard","isRefreshing","ModalActions","onRefresh","onCopy","onClose","isRefreshDisabled","RefreshIcon","CopyIcon","TeamsModal","open","Dialog","DialogTitle","DialogContent","ClearConfirmDialog","onCancel","onConfirm","DialogActions","formatTeamsForClipboard","formattedText","memberIndex","copyTeamsToClipboard","RandomTeamGeneratorPage","snackbar","showSnackbar","hideSnackbar","useSnackbar","clearDialogOpen","setClearDialogOpen","setTeamCount","addNewParticipant","handleKeyDown","handleParticipantInputChange","handleGenerateTeams","validation","handleRefreshTeams","handleCopyTeams","handleClearAll","confirmClearAll","cancelClear","Fragment","Snackbar","Alert"],"mappings":"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"}